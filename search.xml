<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloud之整体聚合父工程</title>
      <link href="/2022-03-13-springcloud-zhi-zheng-ti-ju-he-fu-gong-cheng.html"/>
      <url>/2022-03-13-springcloud-zhi-zheng-ti-ju-he-fu-gong-cheng.html</url>
      
        <content type="html"><![CDATA[<h3 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h3><blockquote><p>springcloud官方文档（Hoxton SR5）：<a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/htmlsingle/">https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/htmlsingle/</a><br>springcloud中文文档：<a href="https://www.springcloud.cc/">https://www.springcloud.cc/</a><br>springcloud中国社区文档：<a href="http://docs.springcloud.cn/">http://docs.springcloud.cn/</a><br><a href="https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md">https://www.bookstack.cn/read/spring-cloud-docs/docs-index.md</a></p></blockquote><p><img src="https://img-blog.csdnimg.cn/eee91c9b39d74970b6901df3773afc05.png" alt="微服务架构"></p><h3 id="创建父项目"><a href="#创建父项目" class="headerlink" title="创建父项目"></a>创建父项目</h3><h4 id="new-Project"><a href="#new-Project" class="headerlink" title="new Project"></a>new Project</h4><p><img src="https://img-blog.csdnimg.cn/924e8c187e45423baf8b43c58f71476f.png" alt="New Project"></p><h4 id="聚合总父工程名字"><a href="#聚合总父工程名字" class="headerlink" title="聚合总父工程名字"></a>聚合总父工程名字</h4><p><img src="https://img-blog.csdnimg.cn/7dd7c1d778e64e9399117bf379fb0e44.png" alt="聚合总父工程"></p><h4 id="Maven版本"><a href="#Maven版本" class="headerlink" title="Maven版本"></a>Maven版本</h4><p><img src="https://img-blog.csdnimg.cn/530c38f4aa3c48ac90b46902d20e6758.png" alt="Maven版本"></p><h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p><img src="https://img-blog.csdnimg.cn/b866417de40d45058c0a66d203e9a01b.png" alt="UTF-8"></p><h4 id="注解生效激活"><a href="#注解生效激活" class="headerlink" title="注解生效激活"></a>注解生效激活</h4><p><img src="https://img-blog.csdnimg.cn/98627ba52f8847edab68300ccdf05e3f.png" alt="注解生效激活"></p><h4 id="File-Type文件过滤"><a href="#File-Type文件过滤" class="headerlink" title="File Type文件过滤"></a>File Type文件过滤</h4><ul><li></li></ul><p><img src="https://img-blog.csdnimg.cn/99484db1e56340b599d188bf2090d63a.png" alt="File Type文件过滤"></p><h3 id="构建支付模块"><a href="#构建支付模块" class="headerlink" title="构建支付模块"></a>构建支付模块</h3><h4 id="New-Module"><a href="#New-Module" class="headerlink" title="New Module"></a>New Module</h4><p><img src="https://img-blog.csdnimg.cn/a1ec226c1f5c448383eafe94ee9863d9.png" alt="New Module"></p><h4 id="Finish"><a href="#Finish" class="headerlink" title="Finish"></a>Finish</h4><p><img src="https://img-blog.csdnimg.cn/ae90dbcaaaf44ca1a9d61626765060d0.png" alt="Finish"></p><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ssm.springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springloud2022<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>cloud-provider-payment8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>cloud-consumer-order80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- packaging pom 总工程--></span>  <span class="token comment">&lt;!--统一管理jar包版本--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>druid.version</span><span class="token punctuation">></span></span>1.1.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>druid.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.spring.boot.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用写groupId和version--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--定义规范，但不导入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--      &lt;dependency>--></span><span class="token comment">&lt;!--        &lt;groupId>org.apache.maven.plugins&lt;/groupId>--></span><span class="token comment">&lt;!--        &lt;artifactId>maven-project-info-reports-plugin&lt;/artifactId>--></span><span class="token comment">&lt;!--        &lt;version>3.0.0&lt;/version>--></span><span class="token comment">&lt;!--      &lt;/dependency>--></span>      <span class="token comment">&lt;!--spring boot 2.2.2--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--spring cloud Hoxton.SR1--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Hoxton.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--spring cloud 阿里巴巴--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--mysql--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mysql.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- druid--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;druid.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--mybatis--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;mybatis.spring.boot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--junit--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--log4j--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;log4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux操作系统问题解决</title>
      <link href="/2022-03-12-linux-cao-zuo-xi-tong-wen-ti-jie-jue.html"/>
      <url>/2022-03-12-linux-cao-zuo-xi-tong-wen-ti-jie-jue.html</url>
      
        <content type="html"><![CDATA[<ul><li>Xshell连接不上Ubuntu系统的解决办法<ul><li>安装ssh服务，输入命令：sudo apt-get install openssh-server</li><li>启动服务: /etc/init.d/ssh start</li><li>测试连接即可</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成thymeleaf</title>
      <link href="/2022-03-06-springboot-ji-cheng-thymeleaf.html"/>
      <url>/2022-03-06-springboot-ji-cheng-thymeleaf.html</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot-集成-Thymeleaf-模板"><a href="#SpringBoot-集成-Thymeleaf-模板" class="headerlink" title="SpringBoot 集成 Thymeleaf 模板"></a>SpringBoot 集成 Thymeleaf 模板</h3><h4 id="关闭页面缓存"><a href="#关闭页面缓存" class="headerlink" title="关闭页面缓存"></a>关闭页面缓存</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/cac435e160a9441e90687d60ea2dcef5.png" alt="关闭缓存"></p><p>UserController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/detail"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">message</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"springboot继承thtmeleaf模板引擎!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"message"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>message.html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;data&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>展示要显示的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">用户名称:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/test1(id=$&#123;id&#125;,username=$&#123;username&#125;,age=$&#123;age&#125;)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>相对路径多个参数(强烈推荐)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>/test3/<span class="token punctuation">'</span>+$&#123;id&#125;+<span class="token punctuation">'</span>/<span class="token punctuation">'</span>+$&#123;username&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请求路径为RESTful风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/js/jQuery.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/img/005XKz6xgy1g5c1bt9q9nj31hc0u0n17.jpg&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标准变量表达式$&#123;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>选择变量表达式:*&#123;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>混合使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*&#123;user.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环遍历l集合"><a href="#循环遍历l集合" class="headerlink" title="循环遍历l集合"></a>循环遍历l集合</h3><h4 id="list集合"><a href="#list集合" class="headerlink" title="list集合"></a>list集合</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--user 当前循环的对象变量名（随意）--></span><span class="token comment">&lt;!--userStat 当前循环对象状态的变量 可选 默认就有--></span><span class="token comment">&lt;!--$&#123;userList&#125; 当前循环的集合--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user,userStat:$&#123;userList&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userStat.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.nick&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.phone&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.address&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap,userMapStat:$&#123;userMaps&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userMapStat.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userMapStat.index&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userMap.key&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userMap.value&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userMap.value.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user,userStat:$&#123;userArray&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userStat.index&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userStat.count&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.nick&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.phone&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.address&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复杂集合"><a href="#复杂集合" class="headerlink" title="复杂集合"></a>复杂集合</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/each/all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">eachAll</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span><span class="token punctuation">></span></span> myList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">2</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> myMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span><span class="token number">2</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> myUserList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span><span class="token number">3</span> <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    user<span class="token punctuation">.</span><span class="token function">setNick</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    user<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"111111"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"运城"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    myUserList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                myMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>myUserList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            myList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"myList"</span><span class="token punctuation">,</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"eachAll"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myListMap:$&#123;myList&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myListMapObj:$&#123;myListMap&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        Map集合的key:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myListMapObj.key&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myListMapObjList:$&#123;myListMapObj.value&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myListMapObjList.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myListMapObjList.nick&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myListMapObjList.address&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;myListMapObjList.phone&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex eq 1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex eq 0&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- th:unless 与if相反--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex ne 1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;productType&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>产品0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>产品1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>无产品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="内敛表达式"><a href="#内敛表达式" class="headerlink" title="内敛表达式"></a>内敛表达式</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内敛文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    数据：[[$&#123;data&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>数据：[[$&#123;data&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>内敛脚本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">showData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"-------"</span><span class="token punctuation">)</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">th:</span>onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showData()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>展示数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>文本字面量，用单引号引起来的就是字面量''<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;<span class="token punctuation">'</span>/user/detail?sex=<span class="token punctuation">'</span>+$&#123;sex&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>a<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>数字字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>今年是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2020<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1949<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>年20年后是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2020+20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1969<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>年<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>boolean字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;flag&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    执行成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;!flag&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    执行失败<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;!flag&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    执行成功<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>null字面量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user.id&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userDetail eq null&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>对象已创建,地址不为空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;userDetail.id eq null&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>空<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>共<span class="token punctuation">'</span>+$&#123;totalRows&#125;+<span class="token punctuation">'</span>条记录<span class="token punctuation">'</span>+$&#123;totalPage&#125;+<span class="token punctuation">'</span>页,当前第<span class="token punctuation">'</span>+$&#123;currentPage&#125;+<span class="token punctuation">'</span>页<span class="token punctuation">'</span>+<span class="token punctuation">'</span> 尾页<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>使用更优雅的方式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>|共$&#123;totalRows&#125;条$&#123;totalPage&#125;页,当前第$&#123;currentPage&#125;页,首页,尾页|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>共120条12页,当前第一页,首页,尾页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>三元运算符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex eq 1 ? <span class="token punctuation">'</span>男<span class="token punctuation">'</span>:<span class="token punctuation">'</span>女<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex == 1 ? <span class="token punctuation">'</span>男<span class="token punctuation">'</span>:<span class="token punctuation">'</span>女<span class="token punctuation">'</span>&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>20+2=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20+2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>5>2为<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5  gt 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>真<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>5&lt;2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5 lt 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>假<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>1>=1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1 ge 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>真<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>1&lt;=1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1 le 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>真<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex eq 1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;sex ne 1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表达式内置对象"><a href="#表达式内置对象" class="headerlink" title="表达式内置对象"></a>表达式内置对象</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>送session中获取值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#session.getAttribute(<span class="token punctuation">'</span>data<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#httpSession.getAttribute(<span class="token punctuation">'</span>data<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;session.data&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> scheme <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#request<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#request<span class="token punctuation">.</span><span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#request<span class="token punctuation">.</span><span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#request<span class="token punctuation">.</span><span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> requestURL <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#httpServletRequest<span class="token punctuation">.</span>requestURL<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> requestString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">&#123;</span>#httpServletRequest<span class="token punctuation">.</span>queryString<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span>  requestAddress <span class="token operator">=</span> requestURL <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span> requestString<span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>requestURL<span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>requestString<span class="token punctuation">)</span>    <span class="token function">alert</span><span class="token punctuation">(</span>requestAddress<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;time&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(time,<span class="token punctuation">'</span>yyyy-MM-dd HH-mm-ss-SSS<span class="token punctuation">'</span>)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;data&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#strings.substring(data,3,5)&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql</title>
      <link href="/2022-03-06-mysql.html"/>
      <url>/2022-03-06-mysql.html</url>
      
        <content type="html"><![CDATA[<h3 id="数据库导入数据基本操作"><a href="#数据库导入数据基本操作" class="headerlink" title="数据库导入数据基本操作"></a>数据库导入数据基本操作</h3><ul><li><p>dos命令窗口</p><ul><li><code>mysql -uroot -phxl158120</code></li></ul></li><li><p>查看所有数据库</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> <span class="token keyword">Database</span>           <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> school             <span class="token operator">|</span><span class="token operator">|</span> springboot         <span class="token operator">|</span><span class="token operator">|</span> springdb           <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 创建数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> ssm<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 使用数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> ssm<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 查看当前 使用的数据库中的表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token operator">|</span> Tables_in_ssm <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+</span><span class="token operator">|</span> dept          <span class="token operator">|</span><span class="token operator">|</span> emp           <span class="token operator">|</span><span class="token operator">|</span> salgrade      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># (文件路径)</span>source G:\BaiduNetdiskDownload\Msq笔记\bjpowernode<span class="token punctuation">.</span><span class="token keyword">sql</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看表结构</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">desc</span> dept<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field  <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span> <span class="token operator">+</span><span class="token comment">--------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> DEPTNO <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>  部门编号<span class="token operator">|</span> DNAME  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>  部门名称<span class="token operator">|</span> LOC    <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span>  部门位置<span class="token operator">+</span><span class="token comment">--------+-------------+------+-----+---------+-------+</span><span class="token keyword">desc</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field    <span class="token operator">|</span> <span class="token keyword">Type</span>        <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+-------------+------+-----+---------+-------+</span><span class="token operator">|</span> EMPNO    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 员工编号 <span class="token operator">|</span> ENAME    <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 员工姓名<span class="token operator">|</span> JOB      <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 工作岗位<span class="token operator">|</span> MGR      <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>      <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 上级领导编号<span class="token operator">|</span> HIREDATE <span class="token operator">|</span> <span class="token keyword">date</span>        <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 入职日期<span class="token operator">|</span> SAL      <span class="token operator">|</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 月薪<span class="token operator">|</span> COMM     <span class="token operator">|</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 补助<span class="token operator">|</span> DEPTNO   <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>      <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 部门编号<span class="token operator">+</span><span class="token comment">----------+-------------+------+-----+---------+-------+</span><span class="token keyword">desc</span> salgrade<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+------+-----+---------+-------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>    <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span> <span class="token operator">+</span><span class="token comment">-------+---------+------+-----+---------+-------+</span><span class="token operator">|</span> GRADE <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 等级<span class="token operator">|</span> LOSAL <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 最低薪资<span class="token operator">|</span> HISAL <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span> 最高薪资<span class="token operator">+</span><span class="token comment">-------+---------+------+-----+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看表数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> dept<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------------+----------+</span><span class="token operator">|</span> DEPTNO <span class="token operator">|</span> DNAME      <span class="token operator">|</span> LOC      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+----------+</span><span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span> NEW YORK <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span> DALLAS   <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span> SALES      <span class="token operator">|</span> CHICAGO  <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">40</span> <span class="token operator">|</span> OPERATIONS <span class="token operator">|</span> BOSTON   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+----------+</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span> EMPNO <span class="token operator">|</span> ENAME  <span class="token operator">|</span> JOB       <span class="token operator">|</span> MGR  <span class="token operator">|</span> HIREDATE   <span class="token operator">|</span> SAL     <span class="token operator">|</span> COMM    <span class="token operator">|</span> DEPTNO <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span>  <span class="token number">7369</span> <span class="token operator">|</span> SMITH  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7902</span> <span class="token operator">|</span> <span class="token number">1980</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span>  <span class="token number">800.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7499</span> <span class="token operator">|</span> ALLEN  <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">|</span> <span class="token number">1600.00</span> <span class="token operator">|</span>  <span class="token number">300.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7521</span> <span class="token operator">|</span> WARD   <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">22</span> <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span>  <span class="token number">500.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7566</span> <span class="token operator">|</span> JONES  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7654</span> <span class="token operator">|</span> MARTIN <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span> <span class="token number">1400.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7698</span> <span class="token operator">|</span> BLAKE  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7782</span> <span class="token operator">|</span> CLARK  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">09</span> <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7788</span> <span class="token operator">|</span> SCOTT  <span class="token operator">|</span> ANALYST   <span class="token operator">|</span> <span class="token number">7566</span> <span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">19</span> <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7839</span> <span class="token operator">|</span> KING   <span class="token operator">|</span> PRESIDENT <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7844</span> <span class="token operator">|</span> TURNER <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span>    <span class="token number">0.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7876</span> <span class="token operator">|</span> ADAMS  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7788</span> <span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7900</span> <span class="token operator">|</span> JAMES  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span>  <span class="token number">950.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7902</span> <span class="token operator">|</span> FORD   <span class="token operator">|</span> ANALYST   <span class="token operator">|</span> <span class="token number">7566</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7934</span> <span class="token operator">|</span> MILLER <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7782</span> <span class="token operator">|</span> <span class="token number">1982</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> salgrade<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token operator">|</span> GRADE <span class="token operator">|</span> LOSAL <span class="token operator">|</span> HISAL <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">700</span> <span class="token operator">|</span>  <span class="token number">1200</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span>  <span class="token number">1201</span> <span class="token operator">|</span>  <span class="token number">1400</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span>  <span class="token number">1401</span> <span class="token operator">|</span>  <span class="token number">2000</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span>  <span class="token number">2001</span> <span class="token operator">|</span>  <span class="token number">3000</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">5</span> <span class="token operator">|</span>  <span class="token number">3001</span> <span class="token operator">|</span>  <span class="token number">9999</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>查看数据库版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql --versionmysql -Vmysql  Ver <span class="token number">8.0</span>.17 <span class="token keyword">for</span> Win64 on x86_64 <span class="token punctuation">(</span>MySQL Community Server - GPL<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查询当前使用数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">databases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>终止一条语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">\c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>退出mysql</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">ctrl <span class="token operator">+</span> cquit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li> 查看表的创建语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> emp<span class="token punctuation">;</span> <span class="token comment">--------------------+</span><span class="token operator">|</span> emp   <span class="token operator">|</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>emp<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>ENAME<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>JOB<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>MGR<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>HIREDATE<span class="token punctuation">`</span> <span class="token keyword">date</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>SAL<span class="token punctuation">`</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>COMM<span class="token punctuation">`</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>DEPTNO<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>EMPNO<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看其他库中的表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">tables</span> <span class="token keyword">from</span> springboot<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>数据库导出导入</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 在Windows的dos命令窗口中执行</span>mysqldump ssm<span class="token operator">></span>D:\ssm<span class="token punctuation">.</span><span class="token keyword">sql</span> <span class="token operator">-</span>uroot <span class="token operator">-</span>p333<span class="token comment"># 导入</span><span class="token keyword">create</span> <span class="token keyword">database</span> ssm；<span class="token keyword">use</span> ssm<span class="token punctuation">;</span>source D:\ssm<span class="token punctuation">.</span><span class="token keyword">sql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h3><ul><li><code>char</code> : 不可变长度，当某个字段中的数据长度不发生改变的时候使用</li><li><code>varchar</code>：可变长度，当某个字段中的数据长度不确定时使用</li><li><code>BLOB</code>：二进制大对象（存储图片、视频等流媒体信息） Binary Large OBject （对应java中的Object）</li><li><code>CLOB</code>：字符大对象（存储较大文本，比如，可以存储4G的字符串。） Character Large OBject（对应java中的Object）</li></ul><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token keyword">no</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_student<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token keyword">no</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'zhangsan3'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-----------+------+------------+</span><span class="token operator">|</span> <span class="token keyword">no</span> <span class="token operator">|</span> name      <span class="token operator">|</span> sex  <span class="token operator">|</span> birth      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-----------+------+------------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> jack      <span class="token operator">|</span> <span class="token number">0</span>    <span class="token operator">|</span> <span class="token number">2000</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> zhangsan  <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">3</span> <span class="token operator">|</span> zhangsan2 <span class="token operator">|</span> <span class="token number">0</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">4</span> <span class="token operator">|</span> zhangsan3 <span class="token operator">|</span> <span class="token number">0</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">5</span> <span class="token operator">|</span> zhangsan  <span class="token operator">|</span> <span class="token number">0</span>    <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-----------+------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h4><p>语法格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token keyword">as</span> <span class="token keyword">select</span> 语句<span class="token punctuation">;</span>没有条件整张表字段全部插入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>将查询结果放入两一张表中</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> t_student1 <span class="token keyword">as</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">14</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.04</span> sec<span class="token punctuation">)</span>Records: <span class="token number">14</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> deptno <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+</span>mysql<span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> t_student1 <span class="token keyword">select</span> ename<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp<span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">14</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>Records: <span class="token number">14</span>  Duplicates: <span class="token number">0</span>  <span class="token keyword">Warnings</span>: <span class="token number">0</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_student1<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> deptno <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span class="token number">28</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改表中数据"><a href="#修改表中数据" class="headerlink" title="修改表中数据"></a>修改表中数据</h4><p>语法格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">update</span> 表名 <span class="token keyword">set</span> 字段名<span class="token number">1</span><span class="token operator">=</span>值<span class="token number">1</span>，字段名<span class="token number">2</span><span class="token operator">=</span>值<span class="token number">2</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">where</span> 条件没有条件整张表全部更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>将学生表中编号为1的学生姓名和性别分别改为‘ssm’和‘1‘</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">update</span> t_student <span class="token keyword">set</span> sex <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">'ssm'</span> <span class="token keyword">where</span> <span class="token keyword">no</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="删除表中数据"><a href="#删除表中数据" class="headerlink" title="删除表中数据"></a>删除表中数据</h4><p>语法格式：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件<span class="token punctuation">;</span>没有条件全部删除。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>删除表中编号为0的数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">delete</span> <span class="token keyword">from</span> t_student <span class="token keyword">where</span> <span class="token keyword">no</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>删除所有记录</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> t_student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="删除大表"><a href="#删除大表" class="headerlink" title="删除大表"></a>删除大表</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">truncate</span> <span class="token keyword">table</span> t_student1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>    <span class="token number">5</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">from</span>      <span class="token number">1</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">where</span>     <span class="token number">2</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token keyword">group</span> <span class="token keyword">by</span>  <span class="token number">3</span>  分组函数在分组之后才能使用  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">having</span>    <span class="token number">4</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">order</span> <span class="token keyword">by</span>  <span class="token number">6</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">limit</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span>      <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h4><ul><li>列出员工的编号，姓名和年薪</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> empno<span class="token punctuation">,</span>ename<span class="token punctuation">,</span>sal<span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">as</span> yearsal <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+--------+----------+</span><span class="token operator">|</span> empno <span class="token operator">|</span> ename  <span class="token operator">|</span> yearsal  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+----------+</span><span class="token operator">|</span>  <span class="token number">7369</span> <span class="token operator">|</span> SMITH  <span class="token operator">|</span>  <span class="token number">9600.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7499</span> <span class="token operator">|</span> ALLEN  <span class="token operator">|</span> <span class="token number">19200.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7521</span> <span class="token operator">|</span> WARD   <span class="token operator">|</span> <span class="token number">15000.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7566</span> <span class="token operator">|</span> JONES  <span class="token operator">|</span> <span class="token number">35700.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7654</span> <span class="token operator">|</span> MARTIN <span class="token operator">|</span> <span class="token number">15000.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7698</span> <span class="token operator">|</span> BLAKE  <span class="token operator">|</span> <span class="token number">34200.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7782</span> <span class="token operator">|</span> CLARK  <span class="token operator">|</span> <span class="token number">29400.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7788</span> <span class="token operator">|</span> SCOTT  <span class="token operator">|</span> <span class="token number">36000.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7839</span> <span class="token operator">|</span> KING   <span class="token operator">|</span> <span class="token number">60000.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7844</span> <span class="token operator">|</span> TURNER <span class="token operator">|</span> <span class="token number">18000.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7876</span> <span class="token operator">|</span> ADAMS  <span class="token operator">|</span> <span class="token number">13200.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7900</span> <span class="token operator">|</span> JAMES  <span class="token operator">|</span> <span class="token number">11400.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7902</span> <span class="token operator">|</span> FORD   <span class="token operator">|</span> <span class="token number">36000.00</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7934</span> <span class="token operator">|</span> MILLER <span class="token operator">|</span> <span class="token number">15600.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;或!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>between … and ….</td><td>两个值之间,<strong>等同于 &gt;= and &lt;=</strong>  字符方面：左闭右开</td></tr><tr><td>is null</td><td>为null（is not null 不为空）</td></tr><tr><td><strong>and</strong></td><td>并且</td></tr><tr><td><strong>or</strong></td><td>或者</td></tr><tr><td>in</td><td>包含，相当于多个or（not in不在这个范围中）</td></tr><tr><td>not</td><td>not可以取非，主要用在is 或in中</td></tr><tr><td>like</td><td>like称为模糊查询，支持%或下划线匹配  %匹配任意个字符  下划线，一个下划线只匹配一个字符</td></tr></tbody></table><ul><li>查询薪水为1600到3000的员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">between</span> <span class="token number">1100</span> <span class="token operator">and</span> <span class="token number">3100</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+---------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> sal     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> <span class="token number">1600.00</span> <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出哪些人没有津贴</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>comm <span class="token keyword">from</span> emp <span class="token keyword">where</span> comm <span class="token operator">is</span> <span class="token boolean">null</span> <span class="token operator">or</span> comm <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+---------+------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> sal     <span class="token operator">|</span> comm <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span>  <span class="token number">800.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span> <span class="token number">0.00</span> <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span>  <span class="token number">950.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>薪资大于1000的并且部门编号是20或30的员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal<span class="token punctuation">,</span>deptno <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal<span class="token operator">></span><span class="token number">1000</span> <span class="token operator">and</span> <span class="token punctuation">(</span>deptno <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">or</span> deptno <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+---------+--------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> sal     <span class="token operator">|</span> deptno <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+--------+</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> <span class="token number">1600.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出工资是800和5000的员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>job<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+-----------+---------+</span><span class="token operator">|</span> ename <span class="token operator">|</span> job       <span class="token operator">|</span> sal     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-----------+---------+</span><span class="token operator">|</span> SMITH <span class="token operator">|</span> CLERK     <span class="token operator">|</span>  <span class="token number">800.00</span> <span class="token operator">|</span><span class="token operator">|</span> KING  <span class="token operator">|</span> PRESIDENT <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+-----------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>模糊查询<ul><li><code>%</code>代表多个字符</li><li><code>_</code>代表单个字符</li></ul></li><li>查询姓名以M开头所有的员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'M%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+--------+----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span> EMPNO <span class="token operator">|</span> ENAME  <span class="token operator">|</span> JOB      <span class="token operator">|</span> MGR  <span class="token operator">|</span> HIREDATE   <span class="token operator">|</span> SAL     <span class="token operator">|</span> COMM    <span class="token operator">|</span> DEPTNO <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span>  <span class="token number">7369</span> <span class="token operator">|</span> SMITH  <span class="token operator">|</span> CLERK    <span class="token operator">|</span> <span class="token number">7902</span> <span class="token operator">|</span> <span class="token number">1980</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span>  <span class="token number">800.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7654</span> <span class="token operator">|</span> MARTIN <span class="token operator">|</span> SALESMAN <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span> <span class="token number">1400.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7876</span> <span class="token operator">|</span> ADAMS  <span class="token operator">|</span> CLERK    <span class="token operator">|</span> <span class="token number">7788</span> <span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7900</span> <span class="token operator">|</span> JAMES  <span class="token operator">|</span> CLERK    <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span>  <span class="token number">950.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7934</span> <span class="token operator">|</span> MILLER <span class="token operator">|</span> CLERK    <span class="token operator">|</span> <span class="token number">7782</span> <span class="token operator">|</span> <span class="token number">1982</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+----------+------+------------+---------+---------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>查询姓名以N结尾的所有的员工</p></li><li><p>查询姓名中包含O的所有的员工</p></li><li><p>查询姓名中第三个字符为A的所有员工</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%N'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%O%'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'__a%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查询姓名中有下划线的所有的员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> ename <span class="token operator">like</span> <span class="token string">'%\_%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h3><ul><li>按照job和薪水倒序</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> job <span class="token keyword">desc</span><span class="token punctuation">,</span>sal <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span> EMPNO <span class="token operator">|</span> ENAME  <span class="token operator">|</span> JOB       <span class="token operator">|</span> MGR  <span class="token operator">|</span> HIREDATE   <span class="token operator">|</span> SAL     <span class="token operator">|</span> COMM    <span class="token operator">|</span> DEPTNO <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span>  <span class="token number">7499</span> <span class="token operator">|</span> ALLEN  <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">|</span> <span class="token number">1600.00</span> <span class="token operator">|</span>  <span class="token number">300.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7844</span> <span class="token operator">|</span> TURNER <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span>    <span class="token number">0.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7521</span> <span class="token operator">|</span> WARD   <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">22</span> <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span>  <span class="token number">500.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7654</span> <span class="token operator">|</span> MARTIN <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span> <span class="token number">1400.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7839</span> <span class="token operator">|</span> KING   <span class="token operator">|</span> PRESIDENT <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7566</span> <span class="token operator">|</span> JONES  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7698</span> <span class="token operator">|</span> BLAKE  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7782</span> <span class="token operator">|</span> CLARK  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">09</span> <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7934</span> <span class="token operator">|</span> MILLER <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7782</span> <span class="token operator">|</span> <span class="token number">1982</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7876</span> <span class="token operator">|</span> ADAMS  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7788</span> <span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7900</span> <span class="token operator">|</span> JAMES  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span>  <span class="token number">950.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7369</span> <span class="token operator">|</span> SMITH  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7902</span> <span class="token operator">|</span> <span class="token number">1980</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span>  <span class="token number">800.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7788</span> <span class="token operator">|</span> SCOTT  <span class="token operator">|</span> ANALYST   <span class="token operator">|</span> <span class="token number">7566</span> <span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">19</span> <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7902</span> <span class="token operator">|</span> FORD   <span class="token operator">|</span> ANALYST   <span class="token operator">|</span> <span class="token number">7566</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>手动指定按照薪水由小到大排序</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">asc</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span> EMPNO <span class="token operator">|</span> ENAME  <span class="token operator">|</span> JOB       <span class="token operator">|</span> MGR  <span class="token operator">|</span> HIREDATE   <span class="token operator">|</span> SAL     <span class="token operator">|</span> COMM    <span class="token operator">|</span> DEPTNO <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span class="token operator">|</span>  <span class="token number">7369</span> <span class="token operator">|</span> SMITH  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7902</span> <span class="token operator">|</span> <span class="token number">1980</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span>  <span class="token number">800.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7900</span> <span class="token operator">|</span> JAMES  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span>  <span class="token number">950.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7876</span> <span class="token operator">|</span> ADAMS  <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7788</span> <span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7521</span> <span class="token operator">|</span> WARD   <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">22</span> <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span>  <span class="token number">500.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7654</span> <span class="token operator">|</span> MARTIN <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">28</span> <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span> <span class="token number">1400.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7934</span> <span class="token operator">|</span> MILLER <span class="token operator">|</span> CLERK     <span class="token operator">|</span> <span class="token number">7782</span> <span class="token operator">|</span> <span class="token number">1982</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">23</span> <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7844</span> <span class="token operator">|</span> TURNER <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">09</span><span class="token operator">-</span><span class="token number">08</span> <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span>    <span class="token number">0.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7499</span> <span class="token operator">|</span> ALLEN  <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span> <span class="token number">7698</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">20</span> <span class="token operator">|</span> <span class="token number">1600.00</span> <span class="token operator">|</span>  <span class="token number">300.00</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7782</span> <span class="token operator">|</span> CLARK  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">09</span> <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7698</span> <span class="token operator">|</span> BLAKE  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">01</span> <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7566</span> <span class="token operator">|</span> JONES  <span class="token operator">|</span> MANAGER   <span class="token operator">|</span> <span class="token number">7839</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">02</span> <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7788</span> <span class="token operator">|</span> SCOTT  <span class="token operator">|</span> ANALYST   <span class="token operator">|</span> <span class="token number">7566</span> <span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">19</span> <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7902</span> <span class="token operator">|</span> FORD   <span class="token operator">|</span> ANALYST   <span class="token operator">|</span> <span class="token number">7566</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">03</span> <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">7839</span> <span class="token operator">|</span> KING   <span class="token operator">|</span> PRESIDENT <span class="token operator">|</span> <span class="token boolean">NULL</span> <span class="token operator">|</span> <span class="token number">1981</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">17</span> <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span>    <span class="token boolean">NULL</span> <span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------+-----------+------+------------+---------+---------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组函数-聚合函数-多行处理函数"><a href="#分组函数-聚合函数-多行处理函数" class="headerlink" title="分组函数/聚合函数/多行处理函数"></a>分组函数/聚合函数/多行处理函数</h3><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>count</td><td>取得记录数</td></tr><tr><td>sum</td><td>求和</td></tr><tr><td>avg</td><td>取平均</td></tr><tr><td>max</td><td>取最大的数</td></tr><tr><td>min</td><td>取最小的数</td></tr></tbody></table><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>采用count(字段名称)，不会取得为null的记录</p><ul><li>取得所有的员工数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>取得津贴不为null员工数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>comm<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>取得工作岗位的个数 <font color="red"><code>distinct</code>：去重 只能出现在所有字段的最前面</font></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select count(distinct job ) from emp;+---------------------+| count(distinct job) |+---------------------+|                   5 |+---------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h4><ul><li>取得薪水的合计（sal+comm）</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token operator">+</span>ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------------------+</span><span class="token operator">|</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token operator">+</span>ifnull<span class="token punctuation">(</span>comm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------+</span><span class="token operator">|</span>                <span class="token number">31225.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h4><ul><li>取得平均薪水</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token operator">|</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+</span><span class="token operator">|</span> <span class="token number">2073.214286</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="max"><a href="#max" class="headerlink" title="max"></a>max</h4><ul><li>取得最高薪水</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------+</span><span class="token operator">|</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+</span><span class="token operator">|</span>  <span class="token number">5000.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取得最晚入职得员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>str_to_date <span class="token punctuation">(</span>hiredate<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------------------------------+</span><span class="token operator">|</span> <span class="token function">max</span><span class="token punctuation">(</span>str_to_date <span class="token punctuation">(</span>hiredate<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------------------------+</span><span class="token operator">|</span> <span class="token number">1987</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">23</span>                              <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="min"><a href="#min" class="headerlink" title="min"></a>min</h4><ul><li>取得最早入职得员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>str_to_date<span class="token punctuation">(</span>hiredate<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------------------------------------+</span><span class="token operator">|</span> <span class="token function">min</span><span class="token punctuation">(</span>str_to_date<span class="token punctuation">(</span>hiredate<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------------------+</span><span class="token operator">|</span> <span class="token number">1980</span><span class="token operator">-</span><span class="token number">12</span><span class="token operator">-</span><span class="token number">17</span>                             <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------------------------------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组合聚合函数"><a href="#组合聚合函数" class="headerlink" title="组合聚合函数"></a>组合聚合函数</h4><ul><li>可以将这些聚合函数都放到select中一起使用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----------+----------+-------------+----------+----------+</span><span class="token operator">|</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span>    <span class="token operator">|</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">min</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+----------+-------------+----------+----------+</span><span class="token operator">|</span>       <span class="token number">14</span> <span class="token operator">|</span> <span class="token number">29025.00</span> <span class="token operator">|</span> <span class="token number">2073.214286</span> <span class="token operator">|</span>  <span class="token number">5000.00</span> <span class="token operator">|</span>   <span class="token number">800.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----------+----------+-------------+----------+----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><ul><li><code>group by</code>:按照某个字段或者某些字段进行分组</li><li><code>having</code>: 对分组之后的数据进行再次过滤</li><li><code>where </code>后面不能使用分组函数，遇到这种情况就使用<code>having</code></li></ul><hr><ul><li>找出每个部门不同工作岗位的最高薪资</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span>job<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">,</span>job <span class="token keyword">order</span> <span class="token keyword">by</span> deptno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-----------+----------+</span><span class="token operator">|</span> deptno <span class="token operator">|</span> job       <span class="token operator">|</span> <span class="token function">max</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-----------+----------+</span><span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span> CLERK     <span class="token operator">|</span>  <span class="token number">1300.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span> MANAGER   <span class="token operator">|</span>  <span class="token number">2450.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span> PRESIDENT <span class="token operator">|</span>  <span class="token number">5000.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span> ANALYST   <span class="token operator">|</span>  <span class="token number">3000.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span> CLERK     <span class="token operator">|</span>  <span class="token number">1100.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span> MANAGER   <span class="token operator">|</span>  <span class="token number">2975.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span> CLERK     <span class="token operator">|</span>   <span class="token number">950.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span> MANAGER   <span class="token operator">|</span>  <span class="token number">2850.00</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span>  <span class="token number">1600.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-----------+----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果使用了order by，order by必须放到group by后面</li><li>按照工作岗位和部门编码分组并按工资合计排序，取得的工资合计</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> job <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+----------+-----------+</span><span class="token operator">|</span> ename <span class="token operator">|</span> <span class="token function">sum</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token operator">|</span> job       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+-----------+</span><span class="token operator">|</span> JONES <span class="token operator">|</span>  <span class="token number">8275.00</span> <span class="token operator">|</span> MANAGER   <span class="token operator">|</span><span class="token operator">|</span> SCOTT <span class="token operator">|</span>  <span class="token number">6000.00</span> <span class="token operator">|</span> ANALYST   <span class="token operator">|</span><span class="token operator">|</span> ALLEN <span class="token operator">|</span>  <span class="token number">5600.00</span> <span class="token operator">|</span> SALESMAN  <span class="token operator">|</span><span class="token operator">|</span> KING  <span class="token operator">|</span>  <span class="token number">5000.00</span> <span class="token operator">|</span> PRESIDENT <span class="token operator">|</span><span class="token operator">|</span> SMITH <span class="token operator">|</span>  <span class="token number">4150.00</span> <span class="token operator">|</span> CLERK     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+----------+-----------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出工资高于平均工资的员工(where后面嵌套子查询)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+</span><span class="token operator">|</span> ename <span class="token operator">|</span> sal     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+</span><span class="token operator">|</span> JONES <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span><span class="token operator">|</span> KING  <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span><span class="token operator">|</span> FORD  <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出每个部门的平均薪资，要去显示薪资大于2000的数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2000</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-------------+</span><span class="token operator">|</span> deptno <span class="token operator">|</span> <span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------------+</span><span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span> <span class="token number">2175.000000</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span> <span class="token number">2916.666667</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="sql99"><a href="#sql99" class="headerlink" title="sql99"></a>sql99</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  A<span class="token keyword">join</span>  B<span class="token keyword">on</span>  连接条件<span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内外连接比较"><a href="#内外连接比较" class="headerlink" title="内外连接比较"></a>内外连接比较</h5><ul><li>内连接：假设A和B表进行连接，使用内连接的话，凡是A表和B表能够匹配上的记录查询出来(null查不出来)，这就是内连接。AB两张表没有主副之分，两张表是平等的。</li><li>外连接：假设A和B表进行连接，使用外连接的话，AB两张表中有一张表是主表，一张表是副表，主要查询主表中的数据，捎带着查询副表，当副表中的数据没有和主表中的数据匹配上，副表自动模拟出NULL与之匹配。</li></ul><h5 id="内连接之等值连接"><a href="#内连接之等值连接" class="headerlink" title="内连接之等值连接"></a>内连接之等值连接</h5><ul><li>查询每个员工的部门名称，要求显示员工名和部门名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno<span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> dname      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="内连接之非等值连接"><a href="#内连接之非等值连接" class="headerlink" title="内连接之非等值连接"></a>内连接之非等值连接</h5><ul><li>查询每个员工的工资等级，要求显示员工名，工资，工资等级</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>e<span class="token punctuation">.</span>sal<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade <span class="token keyword">from</span> emp e <span class="token keyword">join</span> salgrade s <span class="token keyword">on</span> e<span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+---------+-------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> sal     <span class="token operator">|</span> grade <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+-------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span>  <span class="token number">800.00</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> <span class="token number">1600.00</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> <span class="token number">1250.00</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span>     <span class="token number">5</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> <span class="token number">1100.00</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span>  <span class="token number">950.00</span> <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><p><font color="blue">一张表看做两张表</font></p><ul><li>找出每个员工的上级领导，要求显示员工名和对应的领导名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'员工名'</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>ename <span class="token keyword">as</span> <span class="token string">'领导名'</span><span class="token keyword">from</span> emp e <span class="token keyword">join</span> emp b <span class="token keyword">on</span> e<span class="token punctuation">.</span>mgr <span class="token operator">=</span> b<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span class="token operator">|</span> 员工名 <span class="token operator">|</span> 领导名 <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span> FORD   <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> BLAKE  <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> BLAKE  <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> KING   <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> BLAKE  <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> KING   <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> KING   <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> JONES  <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> BLAKE  <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> SCOTT  <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span> BLAKE  <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> JONES  <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> CLARK  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="外连接-左右"><a href="#外连接-左右" class="headerlink" title="外连接(左右)"></a>外连接(左右)</h5><ul><li>找出每个员工的上级领导，要求显示员工名和对应的领导名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> a<span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>ename <span class="token string">'领导'</span> <span class="token keyword">from</span> emp b <span class="token keyword">right</span> <span class="token keyword">join</span> emp a <span class="token keyword">on</span> a<span class="token punctuation">.</span>mgr<span class="token operator">=</span>b<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-------+</span><span class="token operator">|</span> 员工   <span class="token operator">|</span> 领导  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span> FORD  <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> JONES <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> SCOTT <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> JONES <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> CLARK <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------+</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> a<span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span>b<span class="token punctuation">.</span>ename <span class="token string">'领导'</span> <span class="token keyword">from</span> emp a <span class="token keyword">left</span> <span class="token keyword">join</span> emp b <span class="token keyword">on</span> a<span class="token punctuation">.</span>mgr<span class="token operator">=</span>b<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-------+</span><span class="token operator">|</span> 员工   <span class="token operator">|</span> 领导  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span> FORD  <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> JONES <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> SCOTT <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> JONES <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> CLARK <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出哪个部门没有员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> d<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> emp e <span class="token keyword">right</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno<span class="token operator">=</span>d<span class="token punctuation">.</span>deptno <span class="token keyword">where</span> e<span class="token punctuation">.</span>empno <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------------+--------+</span><span class="token operator">|</span> DEPTNO <span class="token operator">|</span> DNAME      <span class="token operator">|</span> LOC    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+--------+</span><span class="token operator">|</span>     <span class="token number">40</span> <span class="token operator">|</span> OPERATIONS <span class="token operator">|</span> BOSTON <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="三张表查询"><a href="#三张表查询" class="headerlink" title="三张表查询"></a>三张表查询</h5><ul><li>找出每一个员工的部门名称以及工资等级,以及上级领导</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>ename <span class="token string">'员工'</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname<span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade<span class="token punctuation">,</span>e1<span class="token punctuation">.</span>ename <span class="token string">'领导'</span> <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno<span class="token operator">=</span>d<span class="token punctuation">.</span>deptno <span class="token keyword">join</span> salgrade s <span class="token keyword">on</span> e<span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal <span class="token keyword">left</span> <span class="token keyword">join</span> emp e1 <span class="token keyword">on</span> e<span class="token punctuation">.</span>mgr <span class="token operator">=</span> e1<span class="token punctuation">.</span>empno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------------+-------+-------+</span><span class="token operator">|</span> 员工   <span class="token operator">|</span> dname      <span class="token operator">|</span> grade <span class="token operator">|</span> 领导  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+-------+-------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span> FORD  <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> SALES      <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> SALES      <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> SALES      <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> SALES      <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> KING  <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> JONES <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span>     <span class="token number">5</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> SALES      <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span> SCOTT <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span> SALES      <span class="token operator">|</span>     <span class="token number">1</span> <span class="token operator">|</span> BLAKE <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span> JONES <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span>     <span class="token number">2</span> <span class="token operator">|</span> CLARK <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+-------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h5><h6 id="from后嵌套子查询"><a href="#from后嵌套子查询" class="headerlink" title="from后嵌套子查询"></a>from后嵌套子查询</h6><ul><li>找出每个部门的平均薪水的薪资等级（）</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> t<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>grade <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>sal<span class="token punctuation">)</span> <span class="token keyword">as</span> avgsal <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> deptno<span class="token punctuation">)</span> t <span class="token keyword">join</span> salgrade s <span class="token keyword">on</span> t<span class="token punctuation">.</span>avgsal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+-------------+-------+</span><span class="token operator">|</span> deptno <span class="token operator">|</span> avgsal      <span class="token operator">|</span> grade <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------------+-------+</span><span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span> <span class="token number">2175.000000</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span> <span class="token number">1566.666667</span> <span class="token operator">|</span>     <span class="token number">3</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span> <span class="token number">2916.666667</span> <span class="token operator">|</span>     <span class="token number">4</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+-------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出每个部门平均的薪水等级</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> emp e <span class="token keyword">join</span> salgrade s <span class="token keyword">on</span> e<span class="token punctuation">.</span>sal <span class="token operator">between</span> s<span class="token punctuation">.</span>losal <span class="token operator">and</span> s<span class="token punctuation">.</span>hisal <span class="token keyword">group</span> <span class="token keyword">by</span> e<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+--------------+</span><span class="token operator">|</span> deptno <span class="token operator">|</span> <span class="token function">avg</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>grade<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------------+</span><span class="token operator">|</span>     <span class="token number">20</span> <span class="token operator">|</span>       <span class="token number">2.8000</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">30</span> <span class="token operator">|</span>       <span class="token number">2.5000</span> <span class="token operator">|</span><span class="token operator">|</span>     <span class="token number">10</span> <span class="token operator">|</span>       <span class="token number">3.6667</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+--------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="select后嵌套子查询"><a href="#select后嵌套子查询" class="headerlink" title="select后嵌套子查询"></a>select后嵌套子查询</h6><ul><li>找出每个员工所在部门的名称，要求显示员工名和部门名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dname <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>deptno<span class="token operator">=</span>d<span class="token punctuation">.</span>deptno<span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> e<span class="token punctuation">.</span>ename<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span> d<span class="token punctuation">.</span>dname <span class="token keyword">from</span> dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>deptno <span class="token operator">=</span> d<span class="token punctuation">.</span>deptno<span class="token punctuation">)</span> <span class="token keyword">as</span> dname <span class="token keyword">from</span> emp e<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+------------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> dname      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+</span><span class="token operator">|</span> SMITH  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> WARD   <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> MARTIN <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span><span class="token operator">|</span> SCOTT  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> KING   <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> ADAMS  <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> JAMES  <span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> FORD   <span class="token operator">|</span> RESEARCH   <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> ACCOUNTING <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="union"><a href="#union" class="headerlink" title="union"></a>union</h5><ul><li>主要用于查询毫无关系的两张表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> ename <span class="token keyword">from</span> emp <span class="token keyword">union</span> <span class="token keyword">select</span> dname <span class="token keyword">from</span> dept<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token operator">|</span> ename      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+</span><span class="token operator">|</span> SMITH      <span class="token operator">|</span><span class="token operator">|</span> ALLEN      <span class="token operator">|</span><span class="token operator">|</span> WARD       <span class="token operator">|</span><span class="token operator">|</span> JONES      <span class="token operator">|</span><span class="token operator">|</span> MARTIN     <span class="token operator">|</span><span class="token operator">|</span> BLAKE      <span class="token operator">|</span><span class="token operator">|</span> CLARK      <span class="token operator">|</span><span class="token operator">|</span> SALES      <span class="token operator">|</span><span class="token operator">|</span> OPERATIONS <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>每页显示pageSize条记录：第pageNo页：（pageNo - 1）* pageSize，pageSize</p><ul><li>取出工资前五名的员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+---------+</span><span class="token operator">|</span> ename <span class="token operator">|</span> sal     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+</span><span class="token operator">|</span> KING  <span class="token operator">|</span> <span class="token number">5000.00</span> <span class="token operator">|</span><span class="token operator">|</span> FORD  <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span><span class="token operator">|</span> SCOTT <span class="token operator">|</span> <span class="token number">3000.00</span> <span class="token operator">|</span><span class="token operator">|</span> JONES <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>找出工资排名在第4-9名的员工</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------+---------+</span><span class="token operator">|</span> ename  <span class="token operator">|</span> sal     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+</span><span class="token operator">|</span> JONES  <span class="token operator">|</span> <span class="token number">2975.00</span> <span class="token operator">|</span><span class="token operator">|</span> BLAKE  <span class="token operator">|</span> <span class="token number">2850.00</span> <span class="token operator">|</span><span class="token operator">|</span> CLARK  <span class="token operator">|</span> <span class="token number">2450.00</span> <span class="token operator">|</span><span class="token operator">|</span> ALLEN  <span class="token operator">|</span> <span class="token number">1600.00</span> <span class="token operator">|</span><span class="token operator">|</span> TURNER <span class="token operator">|</span> <span class="token number">1500.00</span> <span class="token operator">|</span><span class="token operator">|</span> MILLER <span class="token operator">|</span> <span class="token number">1300.00</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+---------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><h4 id="非空约束-notnull"><a href="#非空约束-notnull" class="headerlink" title="非空约束 (notnull)"></a>非空约束 (notnull)</h4><ul><li>非空约束只能出现在列级约束中</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    usercode <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="唯一性约束（unique）"><a href="#唯一性约束（unique）" class="headerlink" title="唯一性约束（unique）"></a>唯一性约束（unique）</h4><ul><li>唯一约束修饰的字段具有唯一性，不能重复。但可以为null。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 多个字段联合添加1个约束unique 【表级约束】</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>usercode <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">unique</span><span class="token punctuation">(</span>usercode<span class="token punctuation">,</span>username<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment"># 单个字段添加1个约束unique 【列级约束】</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>usercode <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h4><ul><li>主键不能为null，且不能重复</li><li>一张表的主键约束只能有一个</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 列级约束</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    usercode <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 表级约束</span> <span class="token keyword">create</span> <span class="token keyword">table</span> t_user<span class="token punctuation">(</span>    id <span class="token keyword">int</span> <span class="token punctuation">,</span>    usercode <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span>，     <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="主键自增"><a href="#主键自增" class="headerlink" title="主键自增"></a>主键自增</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span>  t_user<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>    username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><ul><li>子表中的某个字段来自父表中的字段不一定是主键，但一定要具有unique约束，一般是主键</li><li>外键可以为null</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_student<span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> t_class<span class="token punctuation">;</span><span class="token comment"># 父表</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_class<span class="token punctuation">(</span>cno <span class="token keyword">int</span><span class="token punctuation">,</span>    canme <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>cno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># 子表</span><span class="token keyword">create</span> <span class="token keyword">table</span> t_class<span class="token punctuation">(</span>cno <span class="token keyword">int</span><span class="token punctuation">,</span>    sanme <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    classno <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>classno<span class="token punctuation">)</span> <span class="token keyword">references</span> t_class<span class="token punctuation">(</span>cno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li><p>一个事务是一个完整的业务逻辑单元，不可再分。</p></li><li><p>事务的特性？</p><ul><li>A:原子性：事务是最小的工作单元，不可再分。</li><li>B:一致性：事务必须保证多条DML语句同时成功或者同时失败。</li><li>C:隔离性：事务A与事务B之间具有隔离。</li><li>D:持久性：持久性说的是最终数据必须持久化到硬盘中，事务才算成功结束。</li></ul></li><li><p>mysql数据库默认的隔离级别是：第三级别，可重复读。</p></li><li><p>隔离性</p></li><li><p>查询当前隔离事务级别,开启事务</p><ul><li><p>```sql<br>select @@global.tx_isolation;<br>start transaction;</p><pre class="line-numbers language-none"><code class="language-none">- 第一级别：读未提交(read uncommitted) 存在脏读现象&lt;font color&#x3D;&quot;blue&quot;&gt;未提交也能读到&lt;&#x2F;font&gt;  - &#96;&#96;&#96;sql    set global transaction isolation level read uncommitted;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二级别：读已提交(read committed) 不可重复读，解决了脏读现象<font color="blue">提交了才能读到</font></p><ul><li>```sql<br>set global transaction isolation level read committed;<pre class="line-numbers language-none"><code class="language-none">- 第三级别：可重复读(repeatable read) 读到的数据是幻象，解决了不可重复读现象&lt;font color&#x3D;&quot;blue&quot;&gt;提交了还能读到之前的数据&lt;&#x2F;font&gt;  - &#96;&#96;&#96;sql    set global transaction isolation level repeatable read;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>第四级别：序列化读/串行化读 需要事务排队，解决了所有问题<font color="blue">事务提交了之后才能访问</font></p><ul><li>```sql<br>set global transaction isolation level serializable;<pre class="line-numbers language-none"><code class="language-none">-  &#96;start transaction;&#96;:关闭自动提交机制-  &#96;rollback&#96;: 回滚事务-  &#96;commit&#96;: 提交### 索引- 索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。- 添加索引是给某一个字段，或者说某些字段添加索引。- 创建索引对象：  - &lt;font color&#x3D;&quot;red&quot;&gt;create index 索引名称 on 表名(字段名);&lt;&#x2F;font&gt;- 删除索引对象：  - &lt;font color&#x3D;&quot;red&quot;&gt;drop index 索引名称 on 表名;&lt;&#x2F;font&gt;- 什么时候考虑给字段添加索引？(满足什么条件)  - 数据量庞大。(根据客户的需求，根据线上的环境)  - 该字段很少的DML操作。(因为字段进行修改操作，索引也需要维护)  - 该字段经常出现在where子句中。(经常根据哪个字段维护)- 主键具有unique约束的字段会自动添加索引。根据主键查询效率较高，尽量根据主键检索。- 索引底层采用的数据结构是：B + Tree- 索引的实现原理？  通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的&quot;物理地址&quot;，最终通过索引检索到数据之后，获取到关联的物理地址，通过物理索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率是最高的。  elect ename from emp where ename &#x3D; &#39;SMITH&#39;;  通过索引转换为：  select ename from emp where  物理地址 &#x3D; 0x123;- 索引的分类  - 单一索引：给单个字段添加索引  - 复合索引：给多个字段联合起来添加一个索引  - 主键索引：主键上会自动添加索引  - 唯一索引：有unique约束的字段会自动添加索引- 模糊查询的时候，第一个通配符使用的是%，这个时候索引是是失效的。---- 查看sql语句的执行计划&#96;&#96;&#96;sqlmysql&gt; explain select ename,sal from emp where sal &#x3D; 800;+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+|  1 | SIMPLE      | emp   | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   14 |    10.00 | Using where |+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>给sal字段添加索引</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> emp_sal_index <span class="token keyword">on</span> emp<span class="token punctuation">(</span>sal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>再次查看sql语句的执行计划</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">explain</span> <span class="token keyword">select</span> ename<span class="token punctuation">,</span>sal <span class="token keyword">from</span> emp <span class="token keyword">where</span> sal <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span> id <span class="token operator">|</span> select_type <span class="token operator">|</span> <span class="token keyword">table</span> <span class="token operator">|</span> partitions <span class="token operator">|</span> <span class="token keyword">type</span> <span class="token operator">|</span> possible_keys <span class="token operator">|</span> <span class="token keyword">key</span>           <span class="token operator">|</span> key_len <span class="token operator">|</span> ref   <span class="token operator">|</span> <span class="token keyword">rows</span> <span class="token operator">|</span> filtered <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> <span class="token keyword">SIMPLE</span>      <span class="token operator">|</span> emp   <span class="token operator">|</span> <span class="token boolean">NULL</span>       <span class="token operator">|</span> ref  <span class="token operator">|</span> emp_sal_index <span class="token operator">|</span> emp_sal_index <span class="token operator">|</span> <span class="token number">9</span>       <span class="token operator">|</span> const <span class="token operator">|</span>    <span class="token number">1</span> <span class="token operator">|</span>   <span class="token number">100.00</span> <span class="token operator">|</span> <span class="token boolean">NULL</span>  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+-------------+-------+------------+------+---------------+---------------+---------+-------+------+----------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li><p> 站在不同的角度去看到数据。(同一张表的数据，通过不同的角度去看待)</p></li><li><p>创建视图，删除视图</p><ul><li>```sql<br>create view myview as select empno,ename from emp;<br>drop view myview;<pre class="line-numbers language-none"><code class="language-none">- 对试图进行增删改查，会影响到原表数据。(通过视图影响原表数据，不是直接操作的原表)- 试图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java程序员只对视图对象进行CRUD。### 数据库设计三范式- 三范式都是哪些？- 第一范式：任何一张表都应该有主键，并且每一个字段原子性不可再分。- 第二范式：建立在第一范式的基础上，所有非主键字段完全依赖主键，不能产生部份依赖。- &lt;font color&#x3D;&quot;red&quot;&gt;多对多？三张表，关系表两个外键。&lt;&#x2F;font&gt;&#96;&#96;&#96;sql# 多对多？三张表，关系表两个外键。t_student学生表sno(pk)       sname---------------------1             张三2             李四 3             王五t_teacher 讲师表tno(pk)            tname----------------------1王老师2张老师3李老师t_student_teacher_relation 学生讲师关系表id(pk)        sno(fk)          tno(fk)-------------------------------------------1      1                 32      113      224      235      316      33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>第三范式：建立在第二范式的基础上，所有非主键字段直接依赖主键，不能产生传递依赖。</p></li><li><p><font color="red">一对多？两张表，多的表加外键。</font></p></li><li><p>一对一怎么设计？</p><ul><li><p>主键共享</p></li><li><p>外键唯一</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot配置文件整理</title>
      <link href="/2022-03-04-springboot-pei-zhi-wen-jian-zheng-li.html"/>
      <url>/2022-03-04-springboot-pei-zhi-wen-jian-zheng-li.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 内嵌tomcat端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token comment"># 数据库配置</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/guli?useSSL=false&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://192.168.174.131:3306/springboot?useSSL=false&amp;serverTimezone=UTC</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">hxl158120</span><span class="token comment"># dubbo配置</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">024-springboot-dubbo-ssm-provider</span><span class="token attr-name">spring.dubbo.server</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># 指定注册中心</span><span class="token attr-name">spring.dubbo.registry</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://192.168.174.131:2181</span><span class="token comment"># redis配置</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.174.131</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token comment">#配置视图解析器</span><span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.jsp</span><span class="token comment">#自定义配置</span><span class="token attr-name">school.name</span><span class="token punctuation">=</span><span class="token attr-value">bjpowernode</span><span class="token attr-name">school.websit</span><span class="token punctuation">=</span><span class="token attr-value">http://www.baidu.com</span><span class="token comment">#设置内嵌Tomcat端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token comment">#设置dubbo配置</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">025-springboot-dubbo-ssm-consumer</span><span class="token attr-name">spring.dubbo.registry</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://192.168.174.131:2181</span><span class="token comment">#配置视图解析器</span><span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.jsp</span><span class="token comment">#关闭sspringboot字符编码支持</span><span class="token attr-name">spring.http.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment"># 设置thymeleaf模板引擎的前/后缀（可选项）</span><span class="token attr-name">spring.thymeleaf.prefix</span><span class="token punctuation">=</span><span class="token attr-value">classpath:/templates/</span><span class="token attr-name">spring.thymeleaf.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.html</span><span class="token comment"># 关闭页面缓存</span><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> localhost <span class="token comment">#eureka服务端的实例名称</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token comment">#false表示不向注册中心注册自己。</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>    <span class="token comment">#设置与Eureka Server交互的地址查询服务和注册服务都需要依赖这个地址。</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">&#123;</span>eureka.instance.hostname<span class="token punctuation">&#125;</span><span class="token punctuation">:</span>$<span class="token punctuation">&#123;</span>server.port<span class="token punctuation">&#125;</span>/eureka/ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 配置文件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> properties </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bug问题总结</title>
      <link href="/2022-03-02-bug-wen-ti-zong-jie.html"/>
      <url>/2022-03-02-bug-wen-ti-zong-jie.html</url>
      
        <content type="html"><![CDATA[<ul><li>Mybatis逆向工程生成代码报错 <code>Public Key Retrieval is not allowed</code> </li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 在配置文件和逆向工程url链接中加入</span><span class="token attr-name">allowPublicKeyRetrieval</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>SpringBoot引用Eureka导致返回结果由json变为xml解决方案</li></ul><p><img src="https://img-blog.csdnimg.cn/4af1c26a13e84a40844af71e8d755c6f.png" alt="问题演示"></p><p>在@GetMapping 后加入produces = MediaType.APPLICATION_JSON_UTF8_VALUE 即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/consumer/payment/get/&#123;id&#125;"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_JSON_UTF8_VALUE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f222bc57c16842288de8be79df942b07.png" alt="完美解决"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2022-03-01-springboot.html"/>
      <url>/2022-03-01-springboot.html</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h3><h4 id="Spring-Boot-简介"><a href="#Spring-Boot-简介" class="headerlink" title="Spring Boot 简介"></a>Spring Boot 简介</h4><p>Spring Boot 用来简化 Spring 应用程序的创建和 开发过程，采用 Spring Boot 可以非常容易和快速地创建基于 Spring 框架的应用程序，它让编 码变简单了，配置变简单了，部署变简单了，监控变简单了。正因为 Spring Boot 它化繁为简，让开发变得极其简单和快速，所以在业界备受关注。</p><h4 id="Spring-Boot-的特性"><a href="#Spring-Boot-的特性" class="headerlink" title="Spring Boot 的特性"></a>Spring Boot 的特性</h4><p> ➢ 能够快速创建基于 Spring 的应用程序</p><p> ➢ 能够直接使用 java main 方法启动内嵌的 Tomcat 服务器运行 Spring Boot 程序，不需 要部署 war 包文件</p><p> ➢ 提供约定的 starter POM 来简化 Maven 配置，让 Maven 的配置变得简单</p><p> ➢ 自动化配置，根据项目的 Maven 依赖配置，Spring boot 自动配置 Spring、Spring mvc 等 </p><p>➢ 提供了程序的健康检查等功能 ➢ 基本可以完全不使用 XML 配置文件，采用注解配置</p><h4 id="Spring-Boot-四大核心"><a href="#Spring-Boot-四大核心" class="headerlink" title="Spring Boot 四大核心"></a>Spring Boot 四大核心</h4><ul><li><p>自动配置</p></li><li><p>起步依赖</p></li><li><p>Actuator</p></li><li><p>命令行界面</p></li></ul><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><h4 id="创建Spring-Boot-项目"><a href="#创建Spring-Boot-项目" class="headerlink" title="创建Spring Boot 项目"></a>创建Spring Boot 项目</h4><h5 id="1-创建一个-Module，选择类型为-Spring-Initializr-快速构建"><a href="#1-创建一个-Module，选择类型为-Spring-Initializr-快速构建" class="headerlink" title="(1) 创建一个 Module，选择类型为 Spring Initializr 快速构建"></a>(1) 创建一个 Module，选择类型为 Spring Initializr 快速构建</h5><p><img src="https://img-blog.csdnimg.cn/57b7bd14405e41b2883aa4c8c9ec38a4.png" alt="Spring Initializr"></p><h5 id="设置-GAV-坐标及-pom-配置信息"><a href="#设置-GAV-坐标及-pom-配置信息" class="headerlink" title="设置 GAV 坐标及 pom 配置信息"></a>设置 GAV 坐标及 pom 配置信息</h5><p><img src="https://img-blog.csdnimg.cn/a2ee19e2e0874eccbf43fdea411b3ce1.png" alt="GAV&amp;pom"></p><h5 id="选择-Spring-Boot-版本及依赖"><a href="#选择-Spring-Boot-版本及依赖" class="headerlink" title="选择 Spring Boot 版本及依赖"></a>选择 Spring Boot 版本及依赖</h5><p><img src="https://img-blog.csdnimg.cn/a7c48bef10aa4745a509bb7b19a1e97a.png" alt="版本号和依赖"></p><h5 id="设置模块名称、Content-Root-路径及模块文件的目录"><a href="#设置模块名称、Content-Root-路径及模块文件的目录" class="headerlink" title="设置模块名称、Content Root 路径及模块文件的目录"></a>设置模块名称、Content Root 路径及模块文件的目录</h5><p><img src="https://img-blog.csdnimg.cn/a411abcc8a12421c9b88129c80418ae5.png" alt="名称及目录"></p><h5 id="点击finish完成创建"><a href="#点击finish完成创建" class="headerlink" title="点击finish完成创建"></a>点击finish完成创建</h5><p><img src="https://img-blog.csdnimg.cn/26b8c7a8034d4c48a01b99a25e32a4af.png" alt="项目结构"></p><h4 id="核心配置文件"><a href="#核心配置文件" class="headerlink" title="核心配置文件"></a>核心配置文件</h4><ul><li>若两种配置文件同时存在,优先读取application.properties文件</li></ul><p>application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 设置端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token comment"># 设置上下文根</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>application.yaml</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">server:  port: 8081  servlet:    context-path: &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><h5 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># springboot核心主配置文件</span><span class="token comment"># 激活使用的配置文件</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="application-dev-properties"><a href="#application-dev-properties" class="headerlink" title="application-dev.properties"></a>application-dev.properties</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 开发环境配置文件</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/dev</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="application-product-properties"><a href="#application-product-properties" class="headerlink" title="application-product.properties"></a>application-product.properties</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 生产环境配置文件</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">9090</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/product</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /product<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="application-ready-properties"><a href="#application-ready-properties" class="headerlink" title="application-ready.properties"></a>application-ready.properties</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 准生产环境配置文件</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8082</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/ready</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="application-test-properties"><a href="#application-test-properties" class="headerlink" title="application-test.properties"></a>application-test.properties</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#测试环境配置文件</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="获取自定义配置"><a href="#获取自定义配置" class="headerlink" title="获取自定义配置"></a>获取自定义配置</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">school.name</span><span class="token punctuation">=</span><span class="token attr-value">bjpowernode</span><span class="token attr-name">websit</span><span class="token punctuation">=</span><span class="token attr-value">http://www.baidu.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;school.name&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> schooName<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;websit&#125;"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> websit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多个自定义配置区分"><a href="#多个自定义配置区分" class="headerlink" title="多个自定义配置区分"></a>多个自定义配置区分</h4><ul><li>@ConfigurationProperties(prefix = “abc”) 注解设置前缀</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">school.name</span><span class="token punctuation">=</span><span class="token attr-value">bjpowernode</span><span class="token attr-name">school.websit</span><span class="token punctuation">=</span><span class="token attr-value">http://www.baidu.com</span><span class="token attr-name">abc.name</span><span class="token punctuation">=</span><span class="token attr-value">abc</span><span class="token attr-name">abc.websit</span><span class="token punctuation">=</span><span class="token attr-value">http:www.abc.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Abc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> websit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SpringBoot继承JSP"><a href="#SpringBoot继承JSP" class="headerlink" title="SpringBoot继承JSP"></a>SpringBoot继承JSP</h4><ul><li>建立webapp文件夹</li></ul><p><img src="https://img-blog.csdnimg.cn/c3d822d1ea9d4ff4980b3afa348b486d.png" alt="webapp设置步骤"></p><ul><li>加入依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>手动置顶jsp编译位置</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置视图解析器</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value">.jsp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>IndexController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/say"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"Hello Springboot jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"say"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/index"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"say"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>say.jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h3&gt;$&#123;message&#125;&lt;&#x2F;h3&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Boot-框架-Web-开发"><a href="#Spring-Boot-框架-Web-开发" class="headerlink" title="Spring Boot 框架 Web 开发"></a>Spring Boot 框架 Web 开发</h3><h4 id="Spring-Boot-集成-MyBatis"><a href="#Spring-Boot-集成-MyBatis" class="headerlink" title="Spring Boot 集成 MyBatis"></a>Spring Boot 集成 MyBatis</h4><p><img src="https://img-blog.csdnimg.cn/4a513ca475974120a7f49c0dc85250ff.png" alt="目录结构"></p><ul><li>添加mybatis依赖,MySQL驱动</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>GeneratorMapper.xml(Mybatis逆向工程)</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 指定连接数据库的 JDBC 驱动包所在位置，指定到你本机的完整路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classPathEntry</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>F:\javabook\mysql-connector-java-8.0.17.jar<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 配置 table 表信息内容体，targetRuntime 指定采用 MyBatis3 的版本 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 抑制生成注释，由于生成的注释都是英文的，可以不让它生成 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 配置数据库连接信息 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/springboot?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=UTC<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 生成 model 类，targetPackage 指定 model 类的包名， targetProject 指定        生成的 model 放在 eclipse 的哪个工程下面--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.springboot.model<span class="token punctuation">"</span></span>                            <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 生成 MyBatis 的 Mapper.xml 文件，targetPackage 指定 mapper.xml 文件的        包名， targetProject 指定生成的 mapper.xml 放在 eclipse 的哪个工程下面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.springboot.mapper<span class="token punctuation">"</span></span>                         <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 生成 MyBatis 的 Mapper 接口类文件,targetPackage 指定 Mapper 接口类的包        名， targetProject 指定生成的 Mapper 接口放在 eclipse 的哪个工程下面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span>                             <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.springboot.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 数据库表名及对应的 Java 模型类名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>t_student<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span>               <span class="token attr-name">enableCountByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableUpdateByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableDeleteByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">enableSelectByExample</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>               <span class="token attr-name">selectByExampleQueryId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/25c560efe2cc4e13bc84c07d56cb1847.png" alt="generator"></p><ul><li>设置连接数据库配置</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/springboot?useSSL=false&amp;serverTimezone=UTCallowPublicKeyRetrieval=true</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">hxl158120</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>springboot手动指定资源文件夹为resources</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动数据库<code>./mysqld_safe &amp;</code></li></ul><h5 id="Mapper映射文件存放位置第二种方式"><a href="#Mapper映射文件存放位置第二种方式" class="headerlink" title="Mapper映射文件存放位置第二种方式"></a>Mapper映射文件存放位置第二种方式</h5><p><img src="https://img-blog.csdnimg.cn/61ed1f053b054eaf81aa205540527490.png" alt="目录结构"></p><ul><li>指定mybatis映射文件的路径</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li> 指定后不用在pom文件中手动指定资源文件夹为resources</li></ul><h4 id="SpringBoot-事务支持"><a href="#SpringBoot-事务支持" class="headerlink" title="SpringBoot 事务支持"></a>SpringBoot 事务支持</h4><p>Spring Boot 使用事务非常简单，底层依然采用的是 Spring 本身提供的事务管理</p><p> ➢ 在入口类中使用注解 @EnableTransactionManagement 开启事务支持</p><p> ➢ 在访问数据库的 Service 方法上添加注解 @Transactional 即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StudentMapper</span> studentMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateStudentById</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-Boot-下的-Spring-MVC"><a href="#Spring-Boot-下的-Spring-MVC" class="headerlink" title="Spring Boot 下的 Spring MVC"></a>Spring Boot 下的 Spring MVC</h4><ul><li>不同的请求方式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">Student</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span><span class="token punctuation">;</span><span class="token comment">//@Controller</span><span class="token annotation punctuation">@RestController</span> <span class="token comment">//相当于   @Controller 加 @ResponseBody, 意味着控制层类中的所有方法返回单都是JSON对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryStudentById"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryStudentById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//@RequestMapping(value = "/queryStudentById2",method = RequestMethod.GET)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryStudentById2"</span><span class="token punctuation">)</span> <span class="token comment">//相当于上句代码</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryStudentById2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Only GET Method"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//@RequestMapping(value = "/insert",method = RequestMethod.POST)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">)</span> <span class="token comment">//相当于上句代码</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Insert Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//@RequestMapping(value = "/delete",method = RequestMethod.DELETE)</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete"</span><span class="token punctuation">)</span> <span class="token comment">//相当于上句代码</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Delete Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//@RequestMapping(value = "/update",method = RequestMethod.PUT)</span>  <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">)</span> <span class="token comment">//相当于上句代码</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Update Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-Boot实现RESTful"><a href="#Spring-Boot实现RESTful" class="headerlink" title="Spring Boot实现RESTful"></a>Spring Boot实现RESTful</h4><ul><li><p>比如我们要访问一个 http 接口：<a href="http://localhost:8080/boot/order?id=1021&amp;status=1">http://localhost:8080/boot/order?id=1021&amp;status=1</a></p></li><li><p>采用 RESTFul 风格则 http 地址为：<a href="http://localhost:8080/boot/order/1021/1">http://localhost:8080/boot/order/1021/1</a></p></li></ul><h5 id="请求冲突的问题"><a href="#请求冲突的问题" class="headerlink" title="请求冲突的问题"></a>请求冲突的问题</h5><p>➢ 改路径 (请求参数的位置换位置)</p><p>➢ 改请求方式 (GET,POST,DELETE,POST)</p><h5 id="RESTful-原则"><a href="#RESTful-原则" class="headerlink" title="RESTful 原则"></a>RESTful 原则</h5><p>➢ 增 post 请求、删 delete 请求、改 put 请求、查 get 请求</p><p>➢ 请求路径不要出现动词</p><ul><li>例如：查询订单接口 /boot/order/1021/1（推荐）</li><li> /boot/queryOrder/1021/1（不推荐） </li></ul><p>➢ 分页、排序等操作，不需要使用斜杠传参数</p><ul><li>例如：订单列表接口 /boot/orders?page=1&amp;sort=desc</li><li> 一般传的参数不是数据库表的字段，可以不采用斜杠</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/Detail/&#123;id&#125;/&#123;age&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">student1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                           <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> retMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span> <span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span> <span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/Detail/&#123;id&#125;/&#123;status&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">student2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> retMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span> <span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"status"</span> <span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/&#123;id&#125;/Detail/&#123;city&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">student3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> city<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> retMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span> <span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span> <span class="token punctuation">,</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"add Student ID"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"update Student ID"</span> <span class="token operator">+</span> id<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Spring-Boot-集成-Redis"><a href="#Spring-Boot-集成-Redis" class="headerlink" title="Spring Boot 集成 Redis"></a>Spring Boot 集成 Redis</h4><ul><li>添加springboot继承redis依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置redis配置信息</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#设置redis配置信息</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">192.168.174.131</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getkey</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getkeyplus</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> valueplus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> valueplus<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动Redis<code>./redis-server ../redis.conf &amp; ./redis-cli -a 123456 -h 192.168.174.131</code></li></ul><h4 id="SpringBoot集成dubbo"><a href="#SpringBoot集成dubbo" class="headerlink" title="SpringBoot集成dubbo"></a>SpringBoot集成dubbo</h4><ul><li>接口工程:存放实体bean和业务接口</li><li>服务提供者: 业务接口的实现类并将服务暴露且注册到注册中心,调用数据持久层<ul><li>添加依赖(dubbo,注册中心,接口工程)</li><li>配置服务提供者核心配置文件</li><li>服务消费者:处理浏览器客户端发送的请求,从注册中心调用服务提供者所提供的服务<ul><li>添加依赖(dubbo,注册中心,接口工程)</li><li>配置服务消费者核心配置文件</li></ul></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/d291ba993c7e424e81722d7c8ce04a94.png" alt="interface+provider"></p><p><img src="https://img-blog.csdnimg.cn/139618e7b3784c82b7115bc4ab6e24e3.png" alt="consumer"></p><h5 id="020-springboot-dubbo-interface"><a href="#020-springboot-dubbo-interface" class="headerlink" title="020-springboot-dubbo-interface"></a>020-springboot-dubbo-interface</h5><p>StudentService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 获取学生总人数     * @return     */</span>    <span class="token class-name">Integer</span> <span class="token function">queryAllStudentCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode.springboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>020-springboot-dubbo-interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="021-springboot-dubbo-provider"><a href="#021-springboot-dubbo-provider" class="headerlink" title="021-springboot-dubbo-provider"></a>021-springboot-dubbo-provider</h5><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--SpringBoot框架web项目起步依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注册中心--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--接口工程--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode.springboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>020-springboot-dubbo-interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StudentServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">//(dubbo的@service)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> <span class="token class-name">StudentService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">queryAllStudentCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1250</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#设置内嵌Tomcat端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span><span class="token comment">#设置上下文根</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token comment">#设置dubbo的配置</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">021-springboot-dubbo-provider</span><span class="token comment">#当前工程是一个服务提供者</span><span class="token attr-name">spring.dubbo.server</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#设置注册中心</span><span class="token attr-name">spring.dubbo.registry</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://192.168.174.131:2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="022-springboot-dubbo-consumer"><a href="#022-springboot-dubbo-consumer" class="headerlink" title="022-springboot-dubbo-consumer"></a>022-springboot-dubbo-consumer</h5><p>pom.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--SpringBoot框架web项目起步依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--Dubbo集成SpringBoot框架起步依赖--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--注册中心--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--接口工程--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.bjpowernode.springboot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>020-springboot-dubbo-interface<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>StudentController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> <span class="token class-name">StudentService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>check <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">StudentService</span> studentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/count"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">Object</span> <span class="token function">studentCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> allStudentCount <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">queryAllStudentCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"学生总人数为:"</span><span class="token operator">+</span>allStudentCount<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#设置内嵌Tomcat端口号</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8080</span><span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/</span><span class="token comment">#设置dubbo配置</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">022-springboot-dubbo-consumer</span><span class="token comment">#指定注册中心</span><span class="token attr-name">spring.dubbo.registry</span><span class="token punctuation">=</span><span class="token attr-value">zookeeper://192.168.174.131:2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动zookeeper服务<code>./zkServer.sh start</code></p><h3 id="SpringBoot创建非web工程-了解"><a href="#SpringBoot创建非web工程-了解" class="headerlink" title="SpringBoot创建非web工程(了解)"></a>SpringBoot创建非web工程(了解)</h3><p>StudentService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>StudentServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Say Hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Application</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 第一种方式</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> <span class="token class-name">StudentService</span> studentService<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> world <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 第二种方式</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ConfigurableApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StudentService</span> studentService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StudentService</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"studentServiceImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sayHello <span class="token operator">=</span> studentService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sayHello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringBoot使用拦截器-了解"><a href="#SpringBoot使用拦截器-了解" class="headerlink" title="SpringBoot使用拦截器(了解)"></a>SpringBoot使用拦截器(了解)</h3><ul><li>定义一个拦截器,实现<code>HandlerInterceptor</code>接口</li><li>创建一个配置类</li></ul><p><img src="https://img-blog.csdnimg.cn/25ed2bd63d2e470980ed2e4263c27280.png" alt="目录结构"></p><p>InterceptorConfig</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//定义此类为配置类(相当于xml文件)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//拦截user下的所有请求</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> addPathPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"/user/**"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//要排除的路径</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> excludePathPatterns <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"user/out"</span><span class="token punctuation">,</span><span class="token string">"/user/error"</span><span class="token punctuation">,</span><span class="token string">"/user/login"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>addPathPatterns<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span>excludePathPatterns<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserInterceptor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------进入拦截器--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/user/error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>User</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>UserController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用户登录的请求</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">Object</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//将用户信息存放到session中</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token string">"login Success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//该请求用户登录后才可以访问</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"center"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span>  <span class="token class-name">Object</span> <span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"See Center Message"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//该请求不登录也可以访问</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/out"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">Object</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"out see anytime"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果用户未登录访问了需要登录才可访问的请求,之后会跳转到该页面</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/error"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">erroe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Boot-中使用-Servlet（了解）"><a href="#Spring-Boot-中使用-Servlet（了解）" class="headerlink" title="Spring Boot 中使用 Servlet（了解）"></a>Spring Boot 中使用 Servlet（了解）</h3><ul><li>创建一个Servlet他要继承HttpServlet</li><li>在web.xml配置文件中使用servlet,servlet-mapping(注解)</li></ul><h4 id="第一种方式-注解"><a href="#第一种方式-注解" class="headerlink" title="第一种方式:注解"></a>第一种方式:注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MySpringBoot Servlet-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.springboot.servlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二种方式-配置类"><a href="#第二种方式-配置类" class="headerlink" title="第二种方式(配置类)"></a>第二种方式(配置类)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"My SpringBoot Servlet -2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">myServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Servlet</span><span class="token punctuation">></span></span> servletServletRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> servletServletRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Boot-中使用-Filter（了解）"><a href="#Spring-Boot-中使用-Filter（了解）" class="headerlink" title="Spring Boot 中使用 Filter（了解）"></a>Spring Boot 中使用 Filter（了解）</h3><h4 id="第一种方式-注解-1"><a href="#第一种方式-注解-1" class="headerlink" title="第一种方式(注解)"></a>第一种方式(注解)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/myfilter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------过滤器---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.springboot.filter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二种方式-注册组件"><a href="#第二种方式-注册组件" class="headerlink" title="第二种方式(注册组件)"></a>第二种方式(注册组件)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">myFilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//注册过滤器</span>        <span class="token class-name">FilterRegistrationBean</span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加过滤路径</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/user/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// **不生效</span>        <span class="token keyword">return</span>  filterRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------filter----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user/detail"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">userDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"/user/detail"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/center"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">center</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"center"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Boot-项目配置字符编码"><a href="#Spring-Boot-项目配置字符编码" class="headerlink" title="Spring Boot 项目配置字符编码"></a>Spring Boot 项目配置字符编码</h3><h4 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">characterEncodingFilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">CharacterEncodingFilter</span> characterEncodingFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        characterEncodingFilter<span class="token punctuation">.</span><span class="token function">setForceEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        characterEncodingFilter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FilterRegistrationBean</span> filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>characterEncodingFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"世界你好 Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//统一设置浏览器 编码格式</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;character=tuf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#关闭sspringboot字符编码支持</span><span class="token attr-name">spring.http.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.springboot.servlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charaset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"世界你好 Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">server.servlet.encoding.enabled</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">server.servlet.encoding.force</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">server.servlet.encoding.charset</span><span class="token punctuation">=</span><span class="token attr-value">utf-8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Spring-Boot-打包与部署"><a href="#Spring-Boot-打包与部署" class="headerlink" title="Spring Boot 打包与部署"></a>Spring Boot 打包与部署</h3><h4 id="Spring-Boot-程序-war-包部署"><a href="#Spring-Boot-程序-war-包部署" class="headerlink" title="Spring Boot 程序 war 包部署"></a>Spring Boot 程序 war 包部署</h4><ul><li>指定打包方式war</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>SpringbootWar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/3088e131b3064c98a8f53cda5b83a58a.png" alt="打包war"></p><ul><li>将打包好的war包放入tomcat-webapps下</li><li>启动tomcat</li></ul><p><img src="https://img-blog.csdnimg.cn/47100783d469444bbab71163fd53c58c.png" alt="运行结果"></p><h4 id="Spring-Boot-程序-jar-包部署"><a href="#Spring-Boot-程序-jar-包部署" class="headerlink" title="Spring Boot 程序 jar 包部署"></a>Spring Boot 程序 jar 包部署</h4><ul><li>修改版本号</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;plugin&gt;   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;   &lt;version&gt;1.4.2.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;plugin&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打包静态资源文件、配置文件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>            **/*.*        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c227220c4bc24192894c44770d0f05dc.png" alt="打包步骤"></p><ul><li>输入命令<code>java -jar springboot.jar</code></li></ul><p><img src="https://img-blog.csdnimg.cn/7004dbf3dfde4d2f8cfb98e7625cd1e4.png" alt="运行结果"></p><hr><h4 id="springboot项目整体打包"><a href="#springboot项目整体打包" class="headerlink" title="springboot项目整体打包"></a>springboot项目整体打包</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 指定该Main Class为全局的唯一入口 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>com.ssm.msmservice.MsmApplication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span><span class="token punctuation">></span></span>ZIP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>repackage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--可以把依赖的包都打包到生成的Jar包中--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringBoot-集成-logback-日志"><a href="#SpringBoot-集成-logback-日志" class="headerlink" title="SpringBoot 集成 logback 日志"></a>SpringBoot 集成 logback 日志</h3><p>logback-spring.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token comment">&lt;!-- 日志级别从低到高分为 TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果 设置为 WARN，则低于 WARN 的信息都不会输出 --></span> <span class="token comment">&lt;!-- scan:当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true --></span> <span class="token comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认 单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。 --></span> <span class="token comment">&lt;!-- debug:当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。通常不打印 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--输出到控制台--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!--此日志 appender 是为开发使用，只配置最底级别，控制台输出的日志级别是大 于或等于此级别的日志信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.ThresholdFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>debug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Pattern</span><span class="token punctuation">></span></span>%date [%-5p] [%thread] %logger&#123;60&#125; [%file : %line] %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Pattern</span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 设置字符集 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>charset</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>charset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span>              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!--&lt;File>/home/log/stdout.log&lt;/File>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>F:/log/stdout.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%date [%-5p] %thread %logger&#123;60&#125; [%file : %line] %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 添加.gz 历史日志会启用压缩 大大缩小日志文件所占空间 --></span>             <span class="token comment">&lt;!--&lt;fileNamePattern>/home/log/stdout.log.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNam ePattern>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>F:/log/stdout.log.%d&#123;yyyy-MM-dd&#125;.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxHistory</span><span class="token punctuation">></span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxHistory</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--  保留 30 天日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.abc.springboot.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEBUG<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CONSOLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">StudentService</span> studentService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/count"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">studentCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询当前学生的总人数!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Integer</span> count <span class="token operator">=</span>  studentService<span class="token punctuation">.</span><span class="token function">queryStudentCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"学生总人数为："</span><span class="token operator">+</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小TIP"><a href="#小TIP" class="headerlink" title="小TIP"></a>小TIP</h3><h4 id="关闭logo"><a href="#关闭logo" class="headerlink" title="关闭logo"></a>关闭logo</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span> springApplication <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>springApplication<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span>OFF<span class="token punctuation">)</span><span class="token punctuation">;</span>springApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改logo"><a href="#修改logo" class="headerlink" title="修改logo"></a>修改logo</h4><ul><li><p>在 src/main/resources 放入 banner.txt 文件，该文件名字不能随意，文件中的内容就是要输出 的 logo ；</p></li><li><p>可以利用网站生成图标： </p><ul><li><a href="https://www.bootschool.net/ascii">https://www.bootschool.net/ascii</a> </li><li><a href="http://patorjk.com/software/taag/">http://patorjk.com/software/taag/</a></li></ul></li><li><p>将生成好的图标文字粘贴到 banner.txt 文件中，然后将关 闭 logo 输出的语句注释，启动看效果</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2022-02-27-springmvc.html"/>
      <url>/2022-02-27-springmvc.html</url>
      
        <content type="html"><![CDATA[<h3 id="hello-springmvc"><a href="#hello-springmvc" class="headerlink" title="hello-springmvc"></a>hello-springmvc</h3><p>接收请求参数，使用的处理器方法的形参</p><ul><li><p>HttpServletRequest</p></li><li><p>HttpServletResponse</p></li><li><p>HttpSession</p></li><li><p>用户提交的数据</p><ul><li>逐个接收<ul><li>处理器方法的形参和请求参数名必须一致，同名的请求参数赋值给同名的形参</li></ul></li><li>对象接收</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/first.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"欢迎使用springmvc做web开发"</span><span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"fun"</span><span class="token punctuation">,</span><span class="token string">"fun执行的是doOther方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/receiveproperty.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"myname"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"myage"</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/receiveobject.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">receiveParam</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  "</span><span class="token operator">+</span>student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"myname"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"myage"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"mystudent"</span><span class="token punctuation">,</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在提交post请求参数时，中文有乱码，需使用过滤器处理乱码问题</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--注册声明过滤器，解决post请求乱码的问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--设置项目中使用的字符编码--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--强制请求对象（HttpServletRequest）使用encoding编码的值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceRequestEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--强制应答对象（HttpServletResponse）使用encoding编码的值--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--           /*:表示强制所有的请求先通过过滤器处理。        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理静态资源的两种方式"><a href="#处理静态资源的两种方式" class="headerlink" title="处理静态资源的两种方式"></a>处理静态资源的两种方式</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context         https://www.springframework.org/schema/context/spring-context.xsd         http://www.springframework.org/schema/mvc          https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--声明组件扫描器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.controller<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--声明springmvc中的视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/view/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--第一种方式--></span>    <span class="token comment">&lt;!--&lt;mvc:annotation-driven/>    &lt;mvc:default-servlet-handler/>--></span>    <span class="token comment">&lt;!--第二种方式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/html/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/html/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/ **<span class="token punctuation">"</span></span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/static/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>druid数据库连接池</title>
      <link href="/2022-02-26-durid-shu-ju-ku-lian-jie-chi.html"/>
      <url>/2022-02-26-durid-shu-ju-ku-lian-jie-chi.html</url>
      
        <content type="html"><![CDATA[<p>applicationContext.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--       把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容       spring知道jdbc.properties文件的位置    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--声明数据源DataSource, 作用是连接数据库的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span>          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--set注入给DruidDataSource提供连接数据库信息 --></span>        <span class="token comment">&lt;!--    使用属性配置文件中的数据，语法 $&#123;key&#125; --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment">&lt;!--setUrl()--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.passwd&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.max&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的        SqlSessionFactory  sqlSessionFactory = new ..    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--set注入，把数据库连接池付给了dataSource属性--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--mybatis主配置文件的位置           configLocation属性是Resource类型，读取配置文件           它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--创建dao对象，使用SqlSession的getMapper（StudentDao.class）        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--指定SqlSessionFactory对象的id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定包名， 包名是dao接口所在的包名。            MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行            一次getMapper()方法，得到每个接口的dao对象。            创建好的dao对象放入到spring的容器中的。 dao对象的默认名称是 接口名首字母小写        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--声明service--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl.StudentServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jdbc.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/springdb?useSSL=false&amp;serverTimezone=UTC</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.passwd</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span class="token attr-name">jdbc.max</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理</title>
      <link href="/2022-02-24-dong-tai-dai-li.html"/>
      <url>/2022-02-24-dong-tai-dai-li.html</url>
      
        <content type="html"><![CDATA[<ul><li>在原有程序不变的情况下通过动态代理增加新的功能(功能增强)</li><li>减少代码的重复</li><li>专注业务逻辑代码</li><li>解耦合，让业务功能和日志，事务非业务功能分离</li></ul><h3 id="jdk动态代理实现案例"><a href="#jdk动态代理实现案例" class="headerlink" title="jdk动态代理实现案例"></a>jdk动态代理实现案例</h3><ul><li>使用JDK中的Proxy，Method，InvocationHanderl创建对象。</li><li>JDK动态代理要求目标类必须实现接口</li></ul><p>SomeService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>SomeServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行业务方法doSome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行业务方法doOther"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ServiceTools</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceTools</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss:SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"非业务方法,方法的执行时间:"</span><span class="token operator">+</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"非业务方法,方法执行完毕后提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyInvocationHandler</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ServiceTools</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过代理对象执行方法时,会调用invoke()</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了MyInvocationHandler中的invoke()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//doSome , doOther</span>        <span class="token class-name">Object</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"doSome"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ServiceTools</span><span class="token punctuation">.</span><span class="token function">doLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//SomeServiceImpl.doOther(), doSome()</span>            <span class="token class-name">ServiceTools</span><span class="token punctuation">.</span><span class="token function">doTrans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyApp</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">MyInvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">SomeService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">SomeServiceImpl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 使用jdk的Proxy创建代理对象</span>        <span class="token class-name">SomeService</span> someService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建InvocationHandler对象</span>        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>someService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用Proxy创建代理</span>        <span class="token class-name">SomeService</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>someService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                someService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过代理执行方法,会调用handler中的invoke()方法</span>        proxy<span class="token punctuation">.</span><span class="token function">doOther</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">执行了<span class="token class-name">MyInvocationHandler</span>中的<span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法执行业务方法doOther<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>执行了<span class="token class-name">MyInvocationHandler</span>中的<span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法非业务方法<span class="token punctuation">,</span>方法的执行时间<span class="token operator">:</span><span class="token number">2022</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">24</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">05</span><span class="token operator">:</span><span class="token number">12</span><span class="token operator">:</span><span class="token number">283</span>执行业务方法doSome非业务方法<span class="token punctuation">,</span>方法执行完毕后提交事务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CGLB动态代理"><a href="#CGLB动态代理" class="headerlink" title="CGLB动态代理"></a>CGLB动态代理</h3><ul><li>第三方工具库，创建代理对象，原理是继承。通过继承目标类，创建子类</li><li>子类就是代理对象，要求目标类不能是final的，方法也不能是final的</li></ul><h3 id="aspectj"><a href="#aspectj" class="headerlink" title="aspectj"></a>aspectj</h3><p>aspectj框架也可实现AOP功能增强,具体可看spring中笔记</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖使用合集</title>
      <link href="/2022-02-23-yi-lai-shi-yong-he-ji.html"/>
      <url>/2022-02-23-yi-lai-shi-yong-he-ji.html</url>
      
        <content type="html"><![CDATA[<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>jdk版本</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单元测试</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>aspectj依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aspects<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mybatis依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql驱动</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>durid数据库连接池</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> mybatis和spring集成依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring事务</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>servlet依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> jsp依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1-b03<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>maven依赖(内置监听器)</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>web.xml<span class="token comment">&lt;!--配置监听器:目的是创建容器对象,创建了容器对象,就能把spring.xml配置文件中的所有对象都创建好。    用户发起请求就可以直接使用对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--注册监听器ContextLoaderListenter--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springmcv依赖</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;    &lt;version&gt;5.2.5.RELEASE&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>servlet依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jackson依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot 父工程依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot web起步依赖 + 图形监控</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot框架测试起步依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>thymeleaf 依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>springboot内线tomcat对jsp的解析依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>手动指定jsp编译的位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/webapp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>targetPath</span><span class="token punctuation">></span></span>META-INF/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>targetPath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>*.*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql驱动</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Mybatis整合SpringBoot框架起步依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dubbo集成SpringBoot框架起步依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>zookeeper注册中心</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot框架非web应用起步依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>springboot框架继承thymeleaf模板起步依赖</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>spring cloud Hoxton.SR1</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;  &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;spring-cloud-dependencies&lt;&#x2F;artifactId&gt;  &lt;version&gt;Hoxton.SR1&lt;&#x2F;version&gt;  &lt;type&gt;pom&lt;&#x2F;type&gt;  &lt;scope&gt;import&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>避免复制粘贴代码</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hutool-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Eureka2.0依赖 eureka-server</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Eureka2.0依赖 eureka-client</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>把src/main/java目录中的xml文件包含到输出结果中。输出到Classes目录中</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--所在的目录--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot项目打包编译插件默认jar包</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>springboot手动指定资源文件夹为resources</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot继承lombok依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>springboot热部署和devtools依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解的使用合集</title>
      <link href="/2022-02-23-zhu-jie-de-shi-yong-he-ji.html"/>
      <url>/2022-02-23-zhu-jie-de-shi-yong-he-ji.html</url>
      
        <content type="html"><![CDATA[<h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><h4 id="Component-、-Respotory-、-Service、-Controller"><a href="#Component-、-Respotory-、-Service、-Controller" class="headerlink" title="@Component 、@Respotory 、@Service、@Controller"></a>@Component 、@Respotory 、@Service、@Controller</h4><ul><li>用来创建对象，等同于<bean>的功能</li><li>属性 value 就是对象的名称，也就是bean的id值</li><li>value的值是唯一的，创建的对象在整个spring容器中就一个</li><li>位置： 在类的上面</li><li>@Component(value = “myStudent”) 等同于 <bean id="someService1" class="com.bjpowernode.ba01"/></li><li><code>@Respotory</code> (用在持久层类的上面) ：放在dao的实现类上面，创建dao对象，dao对象是能访问数据库的。</li><li><code>@Service</code> （用在业务层上面）：放在service的实现类上面，创建service对象，service对象是做业务处理，可以有事务等功能</li><li><code>@Controller</code> (用在控制器上面) ：放在控制器（处理器）类的上面，创建控制器对象，能够接收用户提交的参数，显示请求的处理结果</li><li>在不确定一个类使用在哪个层时，使用@Component注解。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"myStudent"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"myStudent"</span><span class="token punctuation">)</span> <span class="token comment">// value 可以省略</span><span class="token comment">// 不指定对象名称，有spring提供默认名称 （默认为类名的首字母小写）</span><span class="token annotation punctuation">@Component</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>声明组件扫描器(component-scan),组件就是java对象<ul><li>base-package：指定注解在项目中的包名</li><li>工作方式：spring会扫描base-package指定的包，把包中和子包中的所有类，找到类的注解，按照注解的功能创建对象，或给属性赋值</li></ul></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--本包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba01<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--;或,--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba01;com.bjpowernode.ba02;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--指定父包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><ul><li>扫描器，扫描指定的包，扫描@Component注解所在包的报名</li><li>常用在配置类上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"classpath:config.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.ssm.vo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> springConfig<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h4><ul><li>简单类型的属性赋值</li><li>属性：value 是string类型的，表示简单类型的属性值</li><li>位置：<ul><li>在属性定义的上面，无需set方法，推荐使用</li><li>在set方法上面</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"张飞"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">)</span> <span class="token comment">// value 可以省略</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Autowired-Qualifier"><a href="#Autowired-Qualifier" class="headerlink" title="@Autowired @Qualifier"></a>@Autowired @Qualifier</h4><ul><li>引用类型，实现引用类型的赋值</li><li><font color="red">默认使用的是byType自动注入</font></li><li>如果要使用<code>byName</code>方式<ul><li>在属性上面加入@Autowired</li><li>在属性上面加入@Qualifier(value = “bean的id”) ：表示使用指定名称的bean完成赋值</li></ul></li><li>属性：required，是一个boolean类型的，默认是true<ul><li>require=true: 表示引用类型赋值失败，程序报错，并终止执行</li><li>require=false：表示引用类型赋值失败，程序正常执行，引用类型是null</li></ul></li><li>位置：<ul><li>在属性定义上面，无需set方法，推荐使用</li><li>在set方法上面</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 默认：byType  require=true</span><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>require<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span><span class="token comment">// byName</span><span class="token annotation punctuation">@Autowired</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"mySchool"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><ul><li>引用类型</li><li>来自jdk中的注解，spring框架提供了对该注解的支持</li><li><font color="red">默认使用的是byName自动注入</font><ul><li>先使用byName自定注入，如果byName赋值失败，再使用byType</li><li>只使用byName，需要增加一个name属性，name的值是bean的id(名称)</li></ul></li><li>位置：<ul><li>在属性定义上面，无需set方法，推荐使用</li><li>在set方法上面</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span><span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"myschool"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">School</span> school<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="aspectj-spring内置AOP框架"><a href="#aspectj-spring内置AOP框架" class="headerlink" title="aspectj(spring内置AOP框架)"></a>aspectj(spring内置AOP框架)</h3><h4 id="Aspectj"><a href="#Aspectj" class="headerlink" title="@Aspectj"></a>@Aspectj</h4><ul><li>作用：表示当前类是切面类</li><li>切面类：用来给业务方法增加功能的类，在这个类中有切面的功能代码</li><li>位置：在类定义的上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Before"><a href="#Before" class="headerlink" title="@Before"></a>@Before</h4><ul><li><font color="red">前置通知注解</font></li><li>属性value：是切入点表达式，表示切面的功能执行的位置</li><li>在目标方法之前执行</li><li>不会改变和影响方法的执行和执行结果</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"execution(void *..SomeServiceImpl.doSome(String,Integer))"</span> <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore2</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="AfterReturning"><a href="#AfterReturning" class="headerlink" title="@AfterReturning"></a>@AfterReturning</h4><ul><li><font color="red">后置通知注解</font></li><li>在目标方法之后执行</li><li>能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能r</li><li>Object  res = doOther</li><li>可以修改这个返回值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doOther(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"res"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Object</span> res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Around"><a href="#Around" class="headerlink" title="@Around"></a>@Around</h4><ul><li><font color="red">环绕通知注解</font></li><li>在目标方法前后都能增加功能</li><li>控制目标方法是否被调用执行</li><li>修改原来目标方法的执行结果，影响最后的调用结果</li><li>参数：ProceedingJoinPoint 执行目标方法</li><li> 返回值：目标方法的执行结果，可以被修改</li><li>常用作事务管理</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doFirst(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">myAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="@AfterThrowing"></a>@AfterThrowing</h4><ul><li><p><font color="red">异常通知注解</font></p></li><li><p>参数有一个Exception 和 JoinPoint</p></li><li><p> 属性：value 切入点表达式</p></li><li><p> throwing 自定义变量，表示方法抛出的异常对象</p></li><li><p>变量名和方法参数名一样</p></li><li><p>在目标方法抛出异常时执行</p></li><li><p>做异常监控程序</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doSecond(..))"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="After"><a href="#After" class="headerlink" title="@After"></a>@After</h4><ul><li><font color="red">最终通知注解</font></li><li>参数有一个JoinPoint</li><li>属性：value 切入点表达式</li><li>总是会在目标方法之后执行</li><li>一般做资源清除工作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThird(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Pointcut"><a href="#Pointcut" class="headerlink" title="@Pointcut"></a>@Pointcut</h4><ul><li><font color="red">定义管理切入点注解</font></li><li>多个切入点表达式是重复的,可以复用,可以使用@Pointcut</li><li>属性：value 切入点表达式</li><li>当使用@Pointcut定义在一个方法的上面,此时这个方法名称就是切入点表达式,其他通知中,value属性就可以使用这个方法名称,代替切入点表达式</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"mypt()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行最终通知，总是会执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThird(..))"</span> <span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//无需代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h4><p><code>@Transactional</code> 的所有可选属性如下所示：</p><p> ➢ <code>propagation</code>：用于设置事务传播属性。该属性类型为 Propagation 枚举，默认值为Propagation.REQUIRED。</p><p> ➢<code> isolation</code>：用于设置事务的隔离级别。该属性类型为 Isolation 枚举，默认值为 Isolation.DEFAULT。 ➢ readOnly：用于设置该方法对数据库的操作是否是只读的。该属性为 boolean，默认值 为 false。</p><p> ➢<code> timeout</code>：用于设置本操作与数据库连接的超时时限。单位为秒，类型为 int，默认值为 -1，即没有时限。</p><p> ➢<code> rollbackFor</code>：指定需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若只有 一个异常类时，可以不使用数组。 </p><p>➢ <code>rollbackForClassName</code>：指定需要回滚的异常类类名。类型为 String[]，默认值为空数组。 当然，若只有一个异常类时，可以不使用数组。</p><p>➢<code> noRollbackFor</code>：指定不需要回滚的异常类。类型为 Class[]，默认值为空数组。当然，若 只有一个异常类时，可以不使用数组。</p><p> ➢ <code>noRollbackForClassName</code>：指定不需要回滚的异常类类名。类型为 String[]，默认值为空 数组。当然，若只有一个异常类时，可以不使用数组。 </p><p> ➢  需要注意的是，@Transactional 若用在方法上，只能用于 public 方法上。对于其他非 public 方法，如果加上了注解@Transactional，虽然 Spring 不会报错，但不会将指定事务织入到该 方法中。因为 Spring 会忽略掉所有非 public 方法上的@Transaction 注解。 若@Transaction 注解在类上，则表示该类上所有的方法均将在执行时织入事务。</p><ul><li>需声明事务管理器对象</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--使用spring的事务处理--></span><span class="token comment">&lt;!--声明事务管理器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--连接的数据库,指定数据源--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启注解驱动</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  <span class="token comment">&lt;!--开启事务注解驱动,告诉spring使用注解驱动管理事务,创建代理驱动--></span><span class="token comment">&lt;!--  &lt;tx:annotation-driven  transaction-manager = "transactionManager"/>--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>    propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span>    isolation <span class="token operator">=</span> <span class="token class-name">Isolation</span><span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>    readOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    rollbackFor <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token class-name">NotEnoughException</span><span class="token punctuation">.</span><span class="token keyword">class</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 默认传播行为是REQUIRED,默认隔离级别DEFAULT 抛出运行时异常 回滚事务</span><span class="token annotation punctuation">@Transactional</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><ul><li>请求映射，把一个请求地址和一个方法绑定在一起，一个请求指定一个方法处理</li><li>value: 是一个string，表示请求的url地址。value的值必须是唯一的，不能重复。推荐使用以”/“开始</li><li>methd: 表示请求的方式。它的值时枚举类型，常用get和post两种方式。不指定请求方式则没有限制</li><li>produces : 指定编码格式</li><li>位置：在方法和类的上面<ul><li>在类的上面些代表所有请求的公共部分</li></ul></li><li>使用RequestMapping修饰的方法叫做处理器方法或者控制器方法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/some.do"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/some.do"</span><span class="token punctuation">,</span><span class="token string">"/first.do"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/some.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/other.do"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"returnStringData.do"</span><span class="token punctuation">,</span>produces <span class="token operator">=</span> <span class="token string">"text/plain;charset=utf-8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><ul><li>解决请求中参数名和处理器方法的形参名不一样</li><li>value：请求中的参数名称</li><li>在处理器方法的形参定义前面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"rname"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h4><ul><li>主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；</li><li>一般都用POST方式进行提交</li><li>在后端的同一个接收方法里，@RequestBody与@RequestParam()可以同时使用，@RequestBody最多只能有一个，而@RequestParam()可以有多个。</li><li>位置：一般放在controller层的具体请求方法的入参中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Payment</span> payment<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><ul><li>把处理器的方法返回对象转为json后，通过HttpServletResponse输出给浏览器</li><li>位置：方法的定义上面。和其他注解没有顺序关系</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/returnStudentJsonArray.do"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">></span></span> <span class="token function">doStudentJsonObjectArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h4><ul><li>控制器增强(给控制器增加功能–异常处理功能)</li><li>位置:在类的上面</li><li>需在springmvc配置文件声明组件扫描器,指定@ControllerAdvice所在的包名</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GolbalExceptionHandler</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--处理异常--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.handler<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h4><ul><li>形参:Exception 表示 Controller中抛出的异常对象,通过形参可以获取发生的异常信息</li><li>value 表示异常的类型,当发生此异常类型时,有当前方法处理</li><li>不写value即处理其他异常类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">NameException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doNameExceptio</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h3><h4 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h4><ul><li>SpringBoot核心注解,主要用于开启spring自动配置</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h4><ul><li>自定义配置属性前缀</li><li>属性必须有前缀</li><li>将整个文件映射成一个对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Abc</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> websit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">abc.name</span><span class="token punctuation">=</span><span class="token attr-value">abc</span><span class="token attr-name">abc.websit</span><span class="token punctuation">=</span><span class="token attr-value">http:www.abc.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--解决使用@ConfigurationProperties 注解出现警告问题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h4><ul><li>扫描dao接口到spring容器</li><li>位置：doa层接口上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan()"></a>@MapperScan()</h4><ul><li>开启扫描mapper接口的包以及子目录</li><li>位置：spring boot启动入口类上添加</li><li>basePackages ： 指定所需要扫描的包以及子目录，可以省略</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.springboot.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EnableTransactionManagement"><a href="#EnableTransactionManagement" class="headerlink" title="@EnableTransactionManagement"></a>@EnableTransactionManagement</h4><ul><li>开启事务，（可选项，在业务方法上添加@Transactional默认就开启事务了）</li><li>位置：启动类上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableTransactionManagement</span> <span class="token comment">//开启事务 可加可不加</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Transactional-1"><a href="#Transactional-1" class="headerlink" title="@Transactional"></a>@Transactional</h4><ul><li>为业务方法添加事务，开启事务</li><li>位置：Service 方法上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateStudentById</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><ul><li>相当于控制层类上加上@Controller+方法上加@ResponseBody,方法上就不用加@ResponseBody</li><li>位置：控制层类上面</li><li>意味着当前控制层类中所有方法返还的都是JSON对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryStudentById"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryStudentById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> student<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GetMapping"><a href="#GetMapping" class="headerlink" title="@GetMapping"></a>@GetMapping</h4><ul><li>只接收GET请求，如果请求方式不对会报405错误</li><li>该注解通常在查询数据中使用</li><li>相当于 @RequestMapping(value = “/queryStudentById2”,method = RequestMethod.GET)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/queryStudentById2"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryStudentById2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Only GET Method"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h4><ul><li>只接收POST请求，如果请求方式不对会报405错误</li><li>该注解通常在新增数据中使用</li><li>相当于 @RequestMapping(value = “/insert”,method = RequestMethod.POST)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/insert"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Insert Success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DeleteMapping"><a href="#DeleteMapping" class="headerlink" title="@DeleteMapping"></a>@DeleteMapping</h4><ul><li>只接收DELETE请求，如果请求方式不对会报405错误</li><li>相当于 @RequestMapping(value = “/delete”,method = RequestMethod.DELETE)</li><li>该注解通常在删除数据中使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/delete"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Delete Success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PutMapping"><a href="#PutMapping" class="headerlink" title="@PutMapping"></a>@PutMapping</h4><ul><li>只接收PUT请求，如果请求方式不对会报405错误</li><li>相当于 @RequestMapping(value = “/update”,method = RequestMethod.PUT)</li><li>该注解通常在修改数据中使用</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"Update Success"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h4><ul><li>获取 url 中参数的数据</li><li><font color="red">该注解是实现 RESTFul 最主要的一个注解</font></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/student/Detail/&#123;id&#125;/&#123;age&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">student1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                       <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> retMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"id"</span> <span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    retMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span> <span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> retMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h4><ul><li>定义此类为配置类,相当于xml文件</li><li>位置：类的上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h4><ul><li>位置:方法上面,主要用在配置类里</li><li>相当于一个<beans> <bean id="" class=""></beans> 标签</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServletRegistrationBean</span> <span class="token function">myServletRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Servlet</span><span class="token punctuation">></span></span> servletServletRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> servletServletRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WebServlet"><a href="#WebServlet" class="headerlink" title="@WebServlet"></a>@WebServlet</h4><ul><li>servlet请求映射浏览器地址</li><li>位置:类(继承servlet)的上面</li><li>urlPatterns:映射地址</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/myServlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MySpringBoot Servlet-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ServletComponentScan"><a href="#ServletComponentScan" class="headerlink" title="@ServletComponentScan"></a>@ServletComponentScan</h4><ul><li>开启扫描指定包下的servlet类、filter类</li><li>位置:springboot启动类上</li><li>basePackages:指定扫描的包</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ServletComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.bjpowernode.springboot.servlet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="WebFilter"><a href="#WebFilter" class="headerlink" title="@WebFilter"></a>@WebFilter</h4><ul><li>filter过滤器浏览器地址</li><li>位置:类(实现Filter)的上面</li><li>URLPattern:过滤地址</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/myfilter"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><ul><li>导入xml配置，等同于xml文件的resources</li><li>常用在配置类上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">,</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> springConfig<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="properttSource"><a href="#properttSource" class="headerlink" title="@properttSource"></a>@properttSource</h4><ul><li>读取properties属性配置文件</li><li>需指定properties文件的位置</li><li>常用在配置类上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"classpath:config.properties"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token string">"com.ssm.vo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> springConfig<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><hr><h4 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h4><h4 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h4><ul><li>作用是用于传递参数，从而可以与SQL中的的字段名相对应，一般在2=&lt;参数数&lt;=5时使用最佳。</li><li>如果你的<strong>dao层</strong>的方法只需要<strong>一个</strong>参数，那么用不用**@Param**注解都可以</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PaymentDao</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Payment</span> payment<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Payment</span> <span class="token function">getPaymentById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getPaymentById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    SELECT * FROM payment WHERE id=#&#123;id&#125;;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h3><h4 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h4><ul><li>com.alibaba.dubbo.config.annotation.Service;</li><li>位置:服务提供者实现类上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> <span class="token class-name">StudentService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>timeout <span class="token operator">=</span> <span class="token number">15000</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StudentService</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Reference"><a href="#Reference" class="headerlink" title="@Reference"></a>@Reference</h4><ul><li><p>注入的是分布式中的远程服务对象</p></li><li><p>位置:在属性定义上面</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>interfaceClass <span class="token operator">=</span> <span class="token class-name">StudentService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>check <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">StudentService</span> studentService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="EnableDubboConfiguration"><a href="#EnableDubboConfiguration" class="headerlink" title="@EnableDubboConfiguration"></a>@EnableDubboConfiguration</h4><ul><li>开启dubbo配置</li><li>位置:springboot启动类上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDubboConfiguration</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h3><h4 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h4><ul><li>lombok日志注解</li><li>用于获取日志信息</li><li>位置：类的上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentController</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"查询当前学生的总人数!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><ul><li>自动生成get，get，toString，equals等方法</li><li>位置：类的上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nick<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h4><ul><li>实体类全部参数的构造</li><li>位置：实体类的上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Payment</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h4><ul><li>实体类的无参构造</li><li>位置：实体类的上面</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Payment</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><h4 id="EnableEurekaServer"><a href="#EnableEurekaServer" class="headerlink" title="@EnableEurekaServer"></a>@EnableEurekaServer</h4><ul><li>启动Eureka服务注册中心</li><li>位置：springboot启动类上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaMain7001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaMain7001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EnableEurekaClient"><a href="#EnableEurekaClient" class="headerlink" title="@EnableEurekaClient"></a>@EnableEurekaClient</h4><ul><li>启动Eureka客户端注册中心</li><li>位置：springboot启动类上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain8001</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">PaymentMain8001</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring框架</title>
      <link href="/2022-02-22-spring-kuang-jia.html"/>
      <url>/2022-02-22-spring-kuang-jia.html</url>
      
        <content type="html"><![CDATA[<h3 id="IOC-控制反转"><a href="#IOC-控制反转" class="headerlink" title="IOC 控制反转"></a>IOC 控制反转</h3><p>描述：把对象的创建，赋值，管理工作都交给代码之外的容器实现，也就是对象的创建是由其他外部资源完成</p><ul><li>控制: 创建对象,对象的属性赋值,对象之间的关系管理</li><li>反转: 将创建对象的权限交给容器来创建,而不是由开人人员创建.由容器代理开发人员管理对象,给对象赋值</li></ul><blockquote><p>目的是减少对代码的改动,也能实现不同的功能,实现解耦合</p></blockquote><ul><li><code>spring</code>是使用的<code>DI(Dependency Injection)</code>实现了<code>ioc</code>的功能</li><li><code>spring</code>底层创建对象,使用的是反射机制</li><li><code>DI</code>给属性赋值: <ul><li><code>set</code>注入:<code>spring</code>调用类的<code>set</code>方法实现属性的赋值<ul><li>简单类型<code>set</code>注入:&lt;<property name="属性名" value="属性值"></property>&gt;</li><li>引用类型<code>set</code>注入:&lt;<property name="属性名" ref="bean的id"></property>&gt;</li></ul></li><li>构造注入:<code>spring</code>调用有参数的构造方法<ul><li><constructor-arg name="name" value="张三"></constructor-arg> name表示构造方法的形参名</li><li><constructor-arg index="0" value="李四"></constructor-arg> index表示构造方法形参的位置,从0开始</li></ul></li></ul></li></ul><h3 id="hello-Spring"><a href="#hello-Spring" class="headerlink" title="hello Spring"></a>hello Spring</h3><p>SomeService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SomeServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">SomeServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SomeService构造方法执行了!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了SomeServiceImpl的doSome()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--spring是把创建好的对象放入map中,            springMap.put(id,对象)            eg: springMap.put(someService,new someServiceImpl())            一个bean 标签声明一个对象    --></span>    <span class="token comment">&lt;!--  scope="singleton"  一次创建一个对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl.SomeServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- scope="prototype"   一次创建多个对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someService1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.service.impl.SomeServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Test</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用spring容器创建的对夏</span>    <span class="token class-name">String</span> config <span class="token operator">=</span> <span class="token string">"beans.xml"</span><span class="token punctuation">;</span>    <span class="token comment">//ApplicationContext表示spring容器,通过容器获取对象</span>    <span class="token comment">//ClassPathXmlApplicationContext表示从类路径加载spring的配置文件</span>    <span class="token class-name">ApplicationContext</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SomeService</span> someService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">)</span> application<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>set注入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba02.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>海问香<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySchool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySchool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba02.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路村小学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路村庄<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用有参构造</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用name属性构造注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySchool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySchool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba03.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路村小学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路村庄<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用index属性实现构造注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySchool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--省略index--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba03.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span>  <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span>   <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySchool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--创建file构造注入--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myfile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.io.File<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>E:\BaiduNetdiskDownload\Spring\reamme.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>readme.txt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引用类型的自动注入<ul><li><code>byName</code> : java类中引用类型的属性名和spring容器中(配置文件)<bean>的id名称一样,且数据类型一致,这样的容器中的bean,spring能够赋值给引用类型</li><li><code>byType</code>: java类中引用类型的数据类型和spring容器中(配置文件)<bean>的class属性是<font color="red">同源</font>关系,且数据类型一致,这样bean能够赋值给引用类型<ul><li>java类中引用类型的数据类型和bean的class的值是一样的</li><li>java类中引用类型的数据类型和bean的class的值是父子类关系的</li><li>java类中引用类型的数据类型和bean的class的值是接口和实现类关系的</li></ul></li></ul></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--byname--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba04.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--        引用类型 用了byName即可自动注入             引用类型的属性名和spring容器中(配置文件)&lt;bean>的id名称一样,且数据类型一致--></span>        <span class="token comment">&lt;!--        &lt;property name="school" ref="school">&lt;/property>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba04.School<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路村小学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路村庄<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--byType--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba05.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--&lt;bean id="mySchool" class="com.bjpowernode.ba05.School" >        &lt;property name="name" value="路村小学">&lt;/property>        &lt;property name="address" value="路村庄">&lt;/property>    &lt;/bean>--></span>    <span class="token comment">&lt;!--    school的子类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primarySchool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba05.PrimarySchool<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京小学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个配置文件</p><p>spring-school.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySchool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba06.School<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>牛逼小学<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>路村庄<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>spring-student.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba06.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>胡鑫亮<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>28<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>total.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--主配置文件,一般包含其他的配置文件--></span><span class="token comment">&lt;!--    &lt;import resource="classpath:ba06/spring-school.xml">&lt;/import>    &lt;import resource="classpath:ba06/spring-student.xml">&lt;/import>--></span><span class="token comment">&lt;!--或者使用通配符(*)--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:ba06/spring-*.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>import</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>加载test.properties属性配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:test.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>property-placeholder</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h3><ul><li>从动态角度考虑程序运行过程</li><li>AOP底层就是采用动态代理模式实现的。采用了两种代理，<font color="red">JDK动态代理(有接口)</font>和<font color="red">CGLB动态代理(无接口)</font></li><li><code>Aspect</code>:切面，表示增强功能</li><li><code>Pointcut</code>: 切入点,指多个连接点方法的集合,多个方法</li><li><code>Advice</code>:通知,表示切面功能执行的时间</li><li>切面三个关键要素<ul><li>切面的功能代码，切面要干什么</li><li>切面的执行位置，使用Pointcut表示切面执行的位置</li><li>切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后</li></ul></li><li>如何理解面向切面编程<ul><li>在分析项目功能时,找出切面</li><li>合理安排切面的执行时间</li><li>合理安排切面的执行位置,在哪个类,哪个方法增加增强功能</li></ul></li></ul><h4 id="aspectj"><a href="#aspectj" class="headerlink" title="aspectj"></a>aspectj</h4><ul><li>spring中内置的开源专门做aop的框架</li><li>实现方式<ul><li>使用xml的配置文件</li><li>使用注解</li></ul></li><li>execution表达式共四部分</li><li>execution(访问权限 方法返回值 <font color="red">方法声明(参数)</font> 异常类型)</li></ul><p><img src="https://img-blog.csdnimg.cn/ac5d0e251ded4097bf94914d42c3e955.png" alt="常用五种切入点表达式"></p><p>案例演示</p><p>SomeService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>SomeServiceImpl</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">SomeService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法doSome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyAspect 前置通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span><span class="token comment">/**     * 定义方法是实现切面功能     * 要求：     * 1.公共方法 public     * 2.没有返回值 void     * 3.方法名称自定义     * 4.方法可以有参，也可以无参数     *      如果有参数，参数不是自定义的     */</span>    <span class="token comment">/*@Before(value ="execution(public void com.bjpowernode.ba01.SomeServiceImpl.doSome(String,Integer))" )    public void myBefore()&#123;        System.out.println("前置通知;切面功能:在目标方法之前输出执行时间:"+new Date());    &#125;*/</span>    <span class="token comment">/**     * 指定通知方法中的参数： JoinPoint     * 作用：在通知方法中获取方法执行时的信息，例如方法名称，方法实参     * 若切面功能中需要用到方法的信息，就加入JoinPoint     * 必须是第一个位置的参数     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">"execution(void *..SomeServiceImpl.doSome(String,Integer))"</span> <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore2</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法的签名:"</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法名称:"</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数:"</span><span class="token operator">+</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2===前置通知;切面功能:在目标方法之前输出执行时间:"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*@Before(value ="execution(* *..SomeServiceImpl.*(..))" )    public void myBefore3()&#123;        System.out.println("3====前置通知;切面功能:在目标方法之前输出执行时间:"+new Date());    &#125;    @Before(value ="execution(* do*(..))" )    public void myBefore4()&#123;        System.out.println("4====前置通知;切面功能:在目标方法之前输出执行时间:"+new Date());    &#125;*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>applicationContext.xml</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba07.SomeServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode.ba07.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>MyTest01</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest01</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> config<span class="token operator">=</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">ApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SomeService</span> someService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"someService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        someService<span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">方法的签名<span class="token operator">:</span><span class="token keyword">void</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>bjpowernode<span class="token punctuation">.</span>ba01<span class="token punctuation">.</span></span>SomeServiceImpl</span><span class="token punctuation">.</span><span class="token function">doSome</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>方法名称<span class="token operator">:</span>doSome参数<span class="token operator">:</span>lisi参数<span class="token operator">:</span><span class="token number">20</span><span class="token number">2</span><span class="token operator">==</span><span class="token operator">=</span>前置通知<span class="token punctuation">;</span>切面功能<span class="token operator">:</span>在目标方法之前输出执行时间<span class="token operator">:</span><span class="token class-name">Fri</span> <span class="token class-name">Feb</span> <span class="token number">25</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">37</span><span class="token operator">:</span><span class="token number">20</span> CST <span class="token number">2022</span>目标方法doSome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyAspect 后置通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 定义方法是实现切面功能     * 要求：     * 1.公共方法 public     * 2.没有返回值 void     * 3.方法名称自定义     * 4.方法要有参数 推荐 Object res     * 特点：     * 1.在目标方法之后执行     * 2.能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能     * Object res  = doOther     * 3.可以修改这个返回值     */</span>    <span class="token comment">/**     * @AfterReturning:后置通知     * @param res     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doOther(..))"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"res"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterReturning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">,</span><span class="token class-name">Object</span> res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知:方法的定义:"</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知:方法名称:"</span><span class="token operator">+</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知:在目标方法之后执行的,获取的返回值是:"</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">=</span><span class="token string">"Hello Aspectj"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyAspect 环绕通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * - 在目标方法前后都能增加功能     * - 控制目标方法是否被调用执行     * - 修改原来目标方法的执行结果，影响最后的调用结果     *   ProceedingJoinPoint 执行目标方法     *   返回值：目标方法的执行结果，可以被修改     */</span>    <span class="token comment">/**     * 环绕通知     * @param proceedingJoinPoint     * @return     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doFirst(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">myAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> proceedingJoinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> arg <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Object</span> res <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知:在目标方法执行之前,输出时间"</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//等同于method.invoke</span>            res <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"环绕通知,在目标方法之后,提交事务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token string">"Hello Aspectj AOP"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyAspect 异常通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 异常通知     *  1.public     *  2.没有返回值     *  3.方法名称自定义     *  4.参数有一个Exception 和 JoinPoint     *  属性：value 切入点表达式     *        throwing 自定义变量，表示方法抛出的异常对象     *        变量名和方法参数名一样     *   特点：     *   1.在目标方法抛出异常时执行     *   2.做异常监控程序     * @param ex     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doSecond(..))"</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">"ex"</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知,方法发生异常时执行:"</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyAspect 最终通知</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 最终通知     * 1.public     * 2.没有返回值     * 3.方法名称自定义     * 4.JoinPoint     * 属性：value 切入点表达式     * 特点：     * 1.总是会在目标方法之后执行     * 2.一般做资源清除工作     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThird(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行最终通知，总是会执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Pointcut 管理切入点</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 最终通知     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"mypt()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">myAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行最终通知，总是会执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * - 定义管理切入点注解     * - 多个切入点表达式是重复的,可以复用,可以使用@Pointcut     * - 属性：value 切入点表达式     * - 当使用@Pointcut定义在一个方法的上面,此时这个方法名称就是切入点表达式,其他通知中,value属性就可以使用这个方法名称,代替切入点表达式     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThird(..))"</span> <span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//无需代码</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有接口且使用cglb代理</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    如果期望目标类有接口,使用cglb代理 加上            proxy-target-class="true" 即可        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token attr-name">proxy-target-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="spring事务处理"><a href="#spring事务处理" class="headerlink" title="spring事务处理"></a>spring事务处理</h3><ul><li>事务是指一组sql语句的集合，集合中有多条sql语句，这些语句的执行要是一致的，作为一个整体执行。要么同时成功，同时失败。</li><li>spring提供一种处理事务的统一模型，使用统一步骤，方式完成多种不同数据库访问技术的事务处理。</li><li>事务内部提交，回滚事务，使用的是事务管理器对象</li></ul><h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4><p>DEFAULT：采用 DB 默认的事务隔离级别。MySql 的默认为 REPEATABLE_READ； Oracle 默认为 READ_COMMITTED。 </p><p>➢ READ_UNCOMMITTED：读未提交。未解决任何并发问题。</p><p>➢ READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。 </p><p>➢ REPEATABLE_READ：可重复读。解决脏读、不可重复读，存在幻读 </p><p>➢ SERIALIZABLE：串行化。不存在并发问题。</p><h4 id="事务的超时时间"><a href="#事务的超时时间" class="headerlink" title="事务的超时时间"></a>事务的超时时间</h4><p>➢ 表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就回滚。默认-1。</p><h4 id="事务的传播行为"><a href="#事务的传播行为" class="headerlink" title="事务的传播行为"></a>事务的传播行为</h4><ul><li>所谓事务传播行为是指，处于不同事务中的方法在相互调用时，执行期间事务的维护情 况。如，A 事务中的方法 doSome()调用 B 事务中的方法 doOther()，在调用执行期间事务的 维护情况，就称为事务传播行为。事务传播行为是加在方法上的。</li><li><font color="red">PROPAGATION_REQUIRED</font><ul><li>指定的方法必须在事务内执行。若当前存在事务，就加入到当前事务中；若当前没有事 务，则创建一个新事务。这种传播行为是最常见的选择，也是 Spring 默认的事务传播行为</li></ul></li><li><font color="red">PROPAGATION_REQUIRES_NEW </font><ul><li>指定的方法支持当前事务，但若当前没有事务，也可以以非事务方式执行。</li></ul></li><li><font color="red">PROPAGATION_SUPPORTS</font><ul><li>总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。</li></ul></li><li>PROPAGATION_MANDATORY </li><li>PROPAGATION_NESTED </li><li>PROPAGATION_NEVER</li><li>PROPAGATION_NOT_SUPPORTED</li></ul><h4 id="事务提交事务，回滚事务的时机"><a href="#事务提交事务，回滚事务的时机" class="headerlink" title="事务提交事务，回滚事务的时机"></a>事务提交事务，回滚事务的时机</h4><ul><li>当业务方法执行成功时，没有抛出异常，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit</li><li>当业务方法抛出运行时异常或error，spring执行回滚，调用事务管理器的rollback</li><li>当业务方法抛出非运行时异常，主要是受查异常，提交事务<ul><li>受查异常：即写代码时必须处理的异常。例如：IOException，SQLException</li></ul></li></ul><h4 id="注解事务-小项目"><a href="#注解事务-小项目" class="headerlink" title="注解事务(小项目)"></a>注解事务(小项目)</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuyGoodsServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BuyGoodsService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">SaleDao</span> saleDao<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">GoodsDao</span> goodsDao<span class="token punctuation">;</span> <span class="token comment">/*   @Transactional(            propagation = Propagation.REQUIRED,            isolation = Isolation.DEFAULT,            readOnly = false,            rollbackFor = &#123;                    NullPointerException.class,                    NotEnoughException.class            &#125;    )*/</span>  <span class="token annotation punctuation">@Transactional</span>  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> goodsid<span class="token punctuation">,</span> <span class="token class-name">Integer</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buy方法的开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Sale</span> sale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sale<span class="token punctuation">.</span><span class="token function">setGid</span><span class="token punctuation">(</span>goodsid<span class="token punctuation">)</span><span class="token punctuation">;</span>        sale<span class="token punctuation">.</span><span class="token function">setNums</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        saleDao<span class="token punctuation">.</span><span class="token function">insertSale</span><span class="token punctuation">(</span>sale<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Goods</span> goods <span class="token operator">=</span> goodsDao<span class="token punctuation">.</span><span class="token function">selectGoods</span><span class="token punctuation">(</span>goodsid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>goods <span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotEnoughException</span><span class="token punctuation">(</span><span class="token string">"编号是："</span><span class="token operator">+</span>goodsid<span class="token operator">+</span><span class="token string">",商品不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NotEnoughException</span><span class="token punctuation">(</span><span class="token string">"编号是："</span><span class="token operator">+</span>goodsid<span class="token operator">+</span><span class="token string">",商品库存不足"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Goods</span> buyGoods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buyGoods<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>goodsid<span class="token punctuation">)</span><span class="token punctuation">;</span>        buyGoods<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        goodsDao<span class="token punctuation">.</span><span class="token function">updateGoods</span><span class="token punctuation">(</span>buyGoods<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"buy方法的完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSaleDao</span><span class="token punctuation">(</span><span class="token class-name">SaleDao</span> saleDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>saleDao <span class="token operator">=</span> saleDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGoodsDao</span><span class="token punctuation">(</span><span class="token class-name">GoodsDao</span> goodsDao<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>goodsDao <span class="token operator">=</span> goodsDao<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--开启事务注解驱动,告诉spring使用注解驱动管理事务,创建代理驱动--></span><span class="token comment">&lt;!--  &lt;tx:annotation-driven  transaction-manager = "transactionManager"/>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="事务配置文件-大项目"><a href="#事务配置文件-大项目" class="headerlink" title="事务配置文件(大项目)"></a>事务配置文件(大项目)</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--声明式事务处理：和源代码完全分离的--></span><span class="token comment">&lt;!--1.声明事务管理器对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--2.声明业务方法它的事务属性（隔离级别，传播行为，超时时间）          id:自定义名称，表示 &lt;tx:advice> 和 &lt;/tx:advice>之间的配置内容的          transaction-manager:事务管理器对象的id    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--tx:attributes：配置事务属性--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--tx:method：给具体的方法配置事务属性，method可以有多个，分别给不同的方法设置事务属性                name:方法名称，1）完整的方法名称，不带有包和类。                              2）方法可以使用通配符,* 表示任意字符                propagation：传播行为，枚举值                isolation：隔离级别                rollback-for：你指定的异常类名，全限定类名。 发生异常一定回滚            --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>buy<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span> <span class="token attr-name">isolation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DEFAULT<span class="token punctuation">"</span></span>                   <span class="token attr-name">rollback-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.NullPointerException,com.bjpowernode.excep.NotEnoughException<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--使用通配符，指定很多的方法--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRES_NEW<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--指定修改方法--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modify*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--删除方法--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove*<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment">&lt;!--查询方法，query，search，find--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置aop--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--配置切入点表达式：指定哪些包中类，要使用事务            id:切入点表达式的名称，唯一值            expression：切入点表达式，指定哪些类要使用事务，aspectj会创建代理对象            com.bjpowernode.service            com.crm.service            com.service        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>servicePt<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* *..service..*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--配置增强器：关联adivce和pointcut           advice-ref:通知，上面tx:advice哪里的配置           pointcut-ref：切入点表达式的id        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>servicePt<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实用小功能案例</title>
      <link href="/2022-02-22-java-shi-yong-xiao-gong-neng-an-li.html"/>
      <url>/2022-02-22-java-shi-yong-xiao-gong-neng-an-li.html</url>
      
        <content type="html"><![CDATA[<h3 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 生成20-30之间的随机数</span><span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">21</span><span class="token punctuation">;</span><span class="token comment">// Math 类中的 random 方法返回一个 [0.0, 1.0) 区间的 double 值。下面这段代码能得到一个 min 和 max 之间的随机数：</span><span class="token keyword">int</span> randomWithMathRandom <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [3-1)</span><span class="token keyword">int</span> randomWithMathRandom <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token class-name">ZiMu</span> <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGJKLZXCVBNM1234567890"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token class-name">ZiMu</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token class-name">ZiMu</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">+=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Date</span> dNow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> ft <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span> <span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间为: "</span> <span class="token operator">+</span> ft<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dNow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel自动化办公</title>
      <link href="/2022-02-16-excel-zi-dong-hua-ban-gong.html"/>
      <url>/2022-02-16-excel-zi-dong-hua-ban-gong.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token assign-left variable">openpyxl</span><span class="token operator">==</span><span class="token number">3.0</span>.7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxl<span class="token keyword">print</span><span class="token punctuation">(</span>openpyxl<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token comment"># 用openpyxl读取excel表格</span>wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'信息表.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span class="token comment"># 获取工作蒲sheet表名称</span>sheet1 <span class="token operator">=</span> wb<span class="token punctuation">.</span>sheetnames<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sheet表名称:\n"</span><span class="token punctuation">,</span> sheet1<span class="token punctuation">)</span><span class="token comment"># 获取指定sheet对象</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'基本信息'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span><span class="token comment"># 获取活动表(目前活动的表)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">.</span>active<span class="token punctuation">)</span><span class="token comment"># 从表中获取单元格</span>cell <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'A4'</span><span class="token punctuation">]</span>  <span class="token comment"># 创建一个cell对象</span><span class="token comment"># 参数</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span>  <span class="token comment"># value:cell中存储的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>row<span class="token punctuation">)</span>  <span class="token comment"># 行索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>column<span class="token punctuation">)</span>  <span class="token comment"># 列索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>coordinate<span class="token punctuation">)</span>  <span class="token comment"># 坐标</span><span class="token comment"># 用字母指定行列</span><span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">#  遍历一个矩形区域中的所有cell对象</span><span class="token keyword">for</span> cell_row <span class="token keyword">in</span> sheet<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">:</span><span class="token string">'D8'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> cell <span class="token keyword">in</span> cell_row<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>coordinate<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment"># 访问特定行或列的单元格的值,利用worksheet对象的rows和column属性</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> cell <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment"># 获取工作表中最大行和最大列的数量</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------------------'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>max_row<span class="token punctuation">,</span> sheet<span class="token punctuation">.</span>max_column<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxl<span class="token punctuation">,</span> pprint<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'opening workbook...'</span><span class="token punctuation">)</span>wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'人口统计简易表.xlsx'</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'人口统计表'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span><span class="token comment"># countryData将包含计算的每个县的总人口和普查区数目</span>countyData <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Reading rows...'</span><span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> sheet<span class="token punctuation">.</span>max_row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'B'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value    county <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'C'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value    pop <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'D'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value    countyData<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    countyData<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>county<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'tracts'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    countyData<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">[</span>county<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tracts'</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>    countyData<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">[</span>county<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token builtin">int</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Writing results...'</span><span class="token punctuation">)</span>resultFile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'census2022.py'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token comment"># 将countyData数据写入到addData字典中</span>resultFile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'allData = '</span><span class="token operator">+</span>pprint<span class="token punctuation">.</span>pformat<span class="token punctuation">(</span>countyData<span class="token punctuation">)</span><span class="token punctuation">)</span>resultFile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Done'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> os<span class="token keyword">import</span> census2022<span class="token keyword">print</span><span class="token punctuation">(</span>census2022<span class="token punctuation">.</span>allData<span class="token punctuation">[</span><span class="token string">'AL'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'FT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入数据基本操作"><a href="#写入数据基本操作" class="headerlink" title="写入数据基本操作"></a>写入数据基本操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>active<span class="token comment"># 设置sheet名称</span>sheet<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'跟进记录表'</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span><span class="token comment"># 保存</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'第一个工作蒲.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 创建和删除工作表</span>wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'第一个工作蒲.xlsx'</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'销售记录'</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'养殖记录'</span><span class="token punctuation">)</span>  <span class="token comment"># 下标为1的位置</span><span class="token keyword">del</span> wb<span class="token punctuation">[</span><span class="token string">'养殖记录'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>wb<span class="token punctuation">.</span>sheetnames<span class="token punctuation">)</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'第一个工作蒲.xlsx'</span><span class="token punctuation">)</span><span class="token comment"># 写入数据</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'销售记录'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span>sheet<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'world'</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'第一个工作蒲.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定向修改数据"><a href="#定向修改数据" class="headerlink" title="定向修改数据"></a>定向修改数据</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'电子产品价格表.xlsx'</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span>PRICE_UPDATES <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'苹果'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                 <span class="token string">'香蕉'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                 <span class="token string">'橘子'</span><span class="token punctuation">:</span> <span class="token number">5</span>                 <span class="token punctuation">&#125;</span><span class="token keyword">for</span> rowNum <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> sheet<span class="token punctuation">.</span>max_row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    productName <span class="token operator">=</span> sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>rowNum<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value    <span class="token keyword">if</span> productName <span class="token keyword">in</span> PRICE_UPDATES<span class="token punctuation">:</span>        sheet<span class="token punctuation">.</span>cell<span class="token punctuation">(</span>row<span class="token operator">=</span>rowNum<span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> PRICE_UPDATES<span class="token punctuation">[</span>productName<span class="token punctuation">]</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'updateProductsSales.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单元格样式制定"><a href="#单元格样式制定" class="headerlink" title="单元格样式制定"></a>单元格样式制定</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Font<span class="token punctuation">,</span> PatternFill<span class="token punctuation">,</span> Side<span class="token punctuation">,</span> Border<span class="token punctuation">,</span> Alignment<span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>activesheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'字体'</span><span class="token comment"># italic: 斜体 underline: 下划线 b: 加粗 color: RGB值</span>sheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>font <span class="token operator">=</span> Font<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'楷体'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'8470FF'</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span> italic<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> underline<span class="token operator">=</span><span class="token string">'single'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># cell填充色</span>sheet<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fill <span class="token operator">=</span> PatternFill<span class="token punctuation">(</span>patternType<span class="token operator">=</span><span class="token string">'solid'</span><span class="token punctuation">,</span> fgColor<span class="token operator">=</span><span class="token string">'8470FF'</span><span class="token punctuation">)</span><span class="token comment"># 设置边框样式</span>sheet<span class="token punctuation">[</span><span class="token string">'A4'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'效果1'</span>sheet<span class="token punctuation">[</span><span class="token string">'A5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'效果2'</span>s1 <span class="token operator">=</span> Side<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'thin'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'8470FF'</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Side<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'double'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'8470FF'</span><span class="token punctuation">)</span>sheet<span class="token punctuation">[</span><span class="token string">'A4'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>border <span class="token operator">=</span> Border<span class="token punctuation">(</span>top<span class="token operator">=</span>s1<span class="token punctuation">)</span>sheet<span class="token punctuation">[</span><span class="token string">'A5'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>border <span class="token operator">=</span> Border<span class="token punctuation">(</span>top<span class="token operator">=</span>s2<span class="token punctuation">,</span> bottom<span class="token operator">=</span>s1<span class="token punctuation">,</span> left<span class="token operator">=</span>s2<span class="token punctuation">,</span> right<span class="token operator">=</span>s1<span class="token punctuation">)</span>sheet<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'效果1'</span>sheet<span class="token punctuation">[</span><span class="token string">'B2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'效果2'</span>sheet<span class="token punctuation">[</span><span class="token string">'B3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'效果3'</span>B1 <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span>B2 <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'B2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">'center'</span><span class="token punctuation">)</span>B3 <span class="token operator">=</span> sheet<span class="token punctuation">[</span><span class="token string">'B3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>alignment <span class="token operator">=</span> Alignment<span class="token punctuation">(</span>horizontal<span class="token operator">=</span><span class="token string">'general'</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'styles.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> openpyxl<span class="token punctuation">.</span>styles <span class="token keyword">import</span> Alignment<span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'数据筛选表.xlsx'</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span>sheet<span class="token punctuation">.</span>auto_filter<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token string">'A1:D4'</span><span class="token comment"># add_filter_culumn 参数1：指定列 参数2：筛选内容</span>sheet<span class="token punctuation">.</span>auto_filter<span class="token punctuation">.</span>add_filter_column<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'北京'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># add_sort_condition 参数1: 指定区域 参数2：升降序</span>sheet<span class="token punctuation">.</span>auto_filter<span class="token punctuation">.</span>add_sort_condition<span class="token punctuation">(</span>ref<span class="token operator">=</span><span class="token string">'D2:D4'</span><span class="token punctuation">,</span> descending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'数据筛选表.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>activesheet<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>sheet<span class="token punctuation">[</span><span class="token string">'A2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>sheet<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'=SUM(A1:A2)'</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'sum.xlsx'</span><span class="token punctuation">)</span>wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'sum.xlsx'</span><span class="token punctuation">,</span>read_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>active<span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">[</span><span class="token string">'A3'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> openpyxlwb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span><span class="token string">'行和列.xlsx'</span><span class="token punctuation">)</span>sheet <span class="token operator">=</span> wb<span class="token punctuation">[</span><span class="token string">'Sheet1'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>row_dimensions<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sheet<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">)</span><span class="token comment"># 设置行高</span>sheet<span class="token punctuation">.</span>row_dimensions<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">50</span><span class="token comment"># 设置列宽</span>sheet<span class="token punctuation">.</span>column_dimensions<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">80</span><span class="token comment"># 合并</span>sheet<span class="token punctuation">.</span>merge_cells<span class="token punctuation">(</span><span class="token string">'D1:G5'</span><span class="token punctuation">)</span>sheet<span class="token punctuation">[</span><span class="token string">'D1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token comment"># 拆分</span>sheet<span class="token punctuation">.</span>unmerge_cells<span class="token punctuation">(</span><span class="token string">'D1:G5'</span><span class="token punctuation">)</span>wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'行和列.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> office </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open-CV图像处理</title>
      <link href="/2022-01-14-open-cv-tu-xiang-chu-li.html"/>
      <url>/2022-01-14-open-cv-tu-xiang-chu-li.html</url>
      
        <content type="html"><![CDATA[<h3 id="几何变换"><a href="#几何变换" class="headerlink" title="几何变换"></a>几何变换</h3><h4 id="图像缩放"><a href="#图像缩放" class="headerlink" title="图像缩放"></a>图像缩放</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment">#%%</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 绝对尺寸  esc + m</span>rows<span class="token punctuation">,</span>cols <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span>rows<span class="token comment">#%%</span>cols<span class="token comment">#%%</span>res <span class="token operator">=</span> cv<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>cols<span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>res<span class="token punctuation">.</span>shape<span class="token comment">#%%</span>res1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span>fx<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>fy<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>res1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>res1<span class="token punctuation">.</span>shape<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图像平移"><a href="#图像平移" class="headerlink" title="图像平移"></a>图像平移</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% md</span><span class="token comment"># 图像平移</span><span class="token comment">#%%</span>rows<span class="token comment">#%%</span>M <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>res2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>res2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>res2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>res2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图像旋转"><a href="#图像旋转" class="headerlink" title="图像旋转"></a>图像旋转</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>M <span class="token operator">=</span> cv<span class="token punctuation">.</span>getRotationMatrix2D<span class="token punctuation">(</span><span class="token punctuation">(</span>cols<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rows<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment">#%%</span>res3 <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>res3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图像仿射变换"><a href="#图像仿射变换" class="headerlink" title="图像仿射变换"></a>图像仿射变换</h4><p>图像的仿射变换涉及到图像的形状位置角度的变化，是深度学习预处理中常到的功能,仿射变换主要是对图像的缩放，旋转，翻转和平移等操作的组合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 2.1 创建变换矩阵</span>pts1 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pts2 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>M <span class="token operator">=</span> cv<span class="token punctuation">.</span>getAffineTransform<span class="token punctuation">(</span>pts1<span class="token punctuation">,</span>pts2<span class="token punctuation">)</span><span class="token comment"># 2.2 完成仿射变换</span>dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img<span class="token punctuation">,</span>M<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图像的投射变换"><a href="#图像的投射变换" class="headerlink" title="图像的投射变换"></a>图像的投射变换</h4><p>透射变换是视角变化的结果，是指利用透视中心、像点、目标点三点共线的条件，按透视旋转定律使承影面（透视面）绕迹线（透视轴）旋转某一角度，破坏原有的投影光线束，仍能保持承影面上投影几何图形不变的变换。</p><p>它的本质将图像投影到一个新的视平面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 2.1 创建变换矩阵</span>pts1 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">368</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">387</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">389</span><span class="token punctuation">,</span><span class="token number">390</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pts2 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">290</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">310</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>T <span class="token operator">=</span> cv<span class="token punctuation">.</span>getPerspectiveTransform<span class="token punctuation">(</span>pts1<span class="token punctuation">,</span>pts2<span class="token punctuation">)</span><span class="token comment"># 2.2 进行变换</span>dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpPerspective<span class="token punctuation">(</span>img<span class="token punctuation">,</span>T<span class="token punctuation">,</span><span class="token punctuation">(</span>cols<span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="图像的金字塔"><a href="#图像的金字塔" class="headerlink" title="图像的金字塔"></a>图像的金字塔</h4><p>图像金字塔是图像多尺度表达的一种，最主要用于图像的分割，是一种以多分辨率来解释图像的有效但概念简单的结构。</p><p>图像金字塔用于机器视觉和图像压缩，一幅图像的金字塔是一系列以金字塔形状排列的分辨率逐步降低，且来源于同一张原始图的图像集合。其通过梯次向下采样获得，直到达到某个终止条件才停止采样。</p><p>金字塔的底部是待处理图像的高分辨率表示，而顶部是低分辨率的近似，层级越高，图像越小，分辨率越低。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">imgup <span class="token operator">=</span> cv<span class="token punctuation">.</span>pyrUp<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>imgup<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>imgdown <span class="token operator">=</span> cv<span class="token punctuation">.</span>pyrDown<span class="token punctuation">(</span>img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>imgdown<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ol><li><p>图像缩放：对图像进行放大或缩小</p><p><code>cv.resize()</code></p></li><li><p>图像平移：</p><p>指定平移矩阵后，调用<code>cv.warpAffine()</code>平移图像</p></li><li><p>图像旋转：</p><p>调用<code>cv.getRotationMatrix2D</code>获取旋转矩阵，然后调用<code>cv.warpAffine()</code>进行旋转</p></li><li><p>仿射变换：</p><p>调用<code>cv.getAffineTransform</code>将创建变换矩阵，最后该矩阵将传递给<code>cv.warpAffine()</code>进行变换</p></li><li><p>透射变换：</p><p>通过函数<code>cv.getPerspectiveTransform()</code>找到变换矩阵，将<code>cv.warpPerspective()</code>进行投射变换</p></li><li><p>金字塔</p><p>图像金字塔是图像多尺度表达的一种，使用的API：</p><p><code>cv.pyrUp()</code>: 向上采样</p><p><code>cv.pyrDown()</code>: 向下采样</p></li></ol><h3 id="形态学操作"><a href="#形态学操作" class="headerlink" title="形态学操作"></a>形态学操作</h3><h4 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h4><p><img src="https://img-blog.csdnimg.cn/df2470c5480f4cce902391e7206ffd49.png" alt="4,8,D邻接"></p>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>open-CV的初步学习</title>
      <link href="/2022-01-12-open-cv-de-chu-bu-xue-xi.html"/>
      <url>/2022-01-12-open-cv-de-chu-bu-xue-xi.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装指定版本</span>pip <span class="token function">install</span> opencv-python<span class="token operator">==</span><span class="token number">3.4</span>.2.17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试是否安装成功</span><span class="token keyword">import</span> cv2lena  <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span>lena<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 利用SIFT和SURF等进行特征提取</span>pip <span class="token function">install</span> opencv-contrib-python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Open-CV基本操作"><a href="#Open-CV基本操作" class="headerlink" title="Open-CV基本操作"></a>Open-CV基本操作</h3><h4 id="图像的基础操作"><a href="#图像的基础操作" class="headerlink" title="图像的基础操作"></a>图像的基础操作</h4><ul><li>图像的IO操作，读取和保存方法</li><li>在图像上绘制几何图形</li><li>怎么获取图像的属性</li><li>怎么访问图像的像素，进行通道分离，合并等</li><li>怎么实现颜色空间的变换</li><li>图像的算术运算</li></ul><h4 id="1-1-读取图像"><a href="#1-1-读取图像" class="headerlink" title="1.1 读取图像"></a>1.1 读取图像</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">lena  <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>读取方式的标志</p><ul><li><p>cv.IMREAD*COLOR：以彩色模式加载图像，任何图像的透明度都将被忽略。这是默认参数。</p></li><li><p>cv.IMREAD*GRAYSCALE：以灰度模式加载图像</p></li><li><p>cv.IMREAD_UNCHANGED：包括alpha通道的加载图像模式。</p><p><strong>可以使用1、0或者-1来替代上面三个标志</strong></p></li></ul></li><li><p>参考代码</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token comment"># 以灰度图的形式读取图像</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-2-显示图像"><a href="#1-2-显示图像" class="headerlink" title="1.2 显示图像"></a>1.2 显示图像</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li>显示图像的窗口名称，以字符串类型表示</li><li>要加载的图像</li></ul><p><strong>注意：在调用显示图像的API后，要调用cv.waitKey()给图像绘制留下时间，否则窗口会出现无响应情况，并且图像无法显示出来</strong>。</p><ul><li>参考代码</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2lena  <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span>lena<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-保存图像"><a href="#1-3-保存图像" class="headerlink" title="1.3 保存图像"></a>1.3 保存图像</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li>文件名，要保存在哪里</li><li>要保存的图像</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'2.jpg'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-完整代码演示"><a href="#1-4-完整代码演示" class="headerlink" title="1.4 完整代码演示"></a>1.4 完整代码演示</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 1 读取图像</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 2 显示图像</span><span class="token comment"># 2.1 利用opencv展示图像</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token comment"># 2.2 在matplotplotlib中展示图像</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 结束</span><span class="token comment"># cv.destroyAllWindows()</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'匹配结果'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>k <span class="token operator">=</span> cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 3 保存图像</span>cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'2.jpg'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="绘制几何图形"><a href="#绘制几何图形" class="headerlink" title="绘制几何图形"></a>绘制几何图形</h3><h4 id="2-1-绘制直线"><a href="#2-1-绘制直线" class="headerlink" title="2.1 绘制直线"></a>2.1 绘制直线</h4><pre class="line-numbers language-none"><code class="language-none">cv.line(img,start,end,color,thickness)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li>img:要绘制直线的图像</li><li>Start,end: 直线的起点和终点</li><li>color: 线条的颜色</li><li>Thickness: 线条宽度</li></ul><h4 id="2-2-绘制圆形"><a href="#2-2-绘制圆形" class="headerlink" title="2.2 绘制圆形"></a>2.2 绘制圆形</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span>centerpoint<span class="token punctuation">,</span> r<span class="token punctuation">,</span> color<span class="token punctuation">,</span> thickness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li>img:要绘制圆形的图像</li><li>Centerpoint, r: 圆心和半径</li><li>color: 线条的颜色</li><li>Thickness: 线条宽度，为-1时生成闭合图案并填充颜色</li></ul><h4 id="2-3-绘制矩形"><a href="#2-3-绘制矩形" class="headerlink" title="2.3 绘制矩形"></a>2.3 绘制矩形</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span>leftupper<span class="token punctuation">,</span>rightdown<span class="token punctuation">,</span>color<span class="token punctuation">,</span>thickness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li>img:要绘制矩形的图像</li><li>Leftupper, rightdown: 矩形的左上角和右下角坐标</li><li>color: 线条的颜色</li><li>Thickness: 线条宽度</li></ul><h4 id="2-4-向图像中添加文字"><a href="#2-4-向图像中添加文字" class="headerlink" title="2.4 向图像中添加文字"></a>2.4 向图像中添加文字</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span>text<span class="token punctuation">,</span>station<span class="token punctuation">,</span> font<span class="token punctuation">,</span> fontsize<span class="token punctuation">,</span>color<span class="token punctuation">,</span>thickness<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>LINE_AA<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li>img: 图像</li><li>text：要写入的文本数据</li><li>station：文本的放置位置</li><li>font：字体</li><li>Fontsize :字体大小</li></ul><h4 id="2-5-效果演示"><a href="#2-5-效果演示" class="headerlink" title="2.5 效果演示"></a>2.5 效果演示</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># 1 创建一个空白的图像</span>img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment"># 2 绘制图形</span>cv<span class="token punctuation">.</span>line<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">511</span><span class="token punctuation">,</span><span class="token number">511</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>line<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">511</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">511</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span><span class="token number">384</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>font <span class="token operator">=</span> cv<span class="token punctuation">.</span>FONT_HERSHEY_SIMPLEXcv<span class="token punctuation">.</span>putText<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token string">'OpenCV'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>cv<span class="token punctuation">.</span>LINE_AA<span class="token punctuation">)</span><span class="token comment"># 3 图像展示</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'匹配结果'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/64cc9aa678134e3c947b644b6a6aec72.png" alt="效果展示"></p><h3 id="3-获取并修改图像中的像素点"><a href="#3-获取并修改图像中的像素点" class="headerlink" title="3.获取并修改图像中的像素点"></a>3.获取并修改图像中的像素点</h3><p>我们可以通过行和列的坐标值获取该像素点的像素值。对于BGR图像，它返回一个蓝，绿，红值的数组。对于灰度图像，仅返回相应的强度值。使用相同的方法对像素值进行修改。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cvimg <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'messi5.jpg'</span><span class="token punctuation">)</span><span class="token comment"># 获取某个像素点的值</span>px <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token comment"># 仅获取蓝色通道的强度值</span>blue <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 修改某个位置的像素值</span>img<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-获取图像的属性"><a href="#4-获取图像的属性" class="headerlink" title="4 获取图像的属性"></a>4 获取图像的属性</h3><p>图像属性包括行数，列数和通道数，图像数据类型，像素数等。</p><table><thead><tr><th>属性</th><th>API</th></tr></thead><tbody><tr><td>形状</td><td>img.shape</td></tr><tr><td>图像大小</td><td>img.size</td></tr><tr><td>数据类型</td><td>img.dtype</td></tr></tbody></table><h3 id="5-图像通道的拆分与合并"><a href="#5-图像通道的拆分与合并" class="headerlink" title="5 图像通道的拆分与合并"></a>5 图像通道的拆分与合并</h3><p>有时需要在B，G，R通道图像上单独工作。在这种情况下，需要将BGR图像分割为单个通道。或者在其他情况下，可能需要将这些单独的通道合并到BGR图像。你可以通过以下方式完成。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通道拆分</span>b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r <span class="token operator">=</span> cv<span class="token punctuation">.</span>split<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment"># 通道合并</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-色彩空间的改变"><a href="#6-色彩空间的改变" class="headerlink" title="6 色彩空间的改变"></a>6 色彩空间的改变</h3><p>OpenCV中有150多种颜色空间转换方法。最广泛使用的转换方法有两种，BGR↔Gray和BGR↔HSV。</p><p>API：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>input_image，flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数：</p><ul><li>input_image: 进行颜色空间转换的图像</li><li>flag: 转换类型<ul><li>cv.COLOR_BGR2GRAY : BGR↔Gray</li><li>cv.COLOR_BGR2HSV: BGR→HSV</li></ul></li></ul><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment">#%%</span>img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>img<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token comment">#%%</span>img<span class="token punctuation">.</span>shape<span class="token comment">#%%</span>img<span class="token punctuation">.</span>dtype<span class="token comment">#%%</span>img<span class="token punctuation">.</span>size<span class="token comment">#%%</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r <span class="token operator">=</span> cv<span class="token punctuation">.</span>split<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>b<span class="token punctuation">,</span>cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>gray<span class="token punctuation">)</span><span class="token comment">#%%</span>img2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>gray  <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>gray<span class="token punctuation">,</span>cmap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算数操作"><a href="#算数操作" class="headerlink" title="算数操作"></a>算数操作</h3><h4 id="1-图像加法"><a href="#1-图像加法" class="headerlink" title="1.图像加法"></a>1.图像加法</h4><p>代码演示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment">#%%</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.jpg'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>imggray <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'2.jpg'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>imggray<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span>img2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>add<span class="token punctuation">(</span>img<span class="token punctuation">,</span>imggray<span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两种结果对比(Opencv更好一点)</p><p><img src="https://img-blog.csdnimg.cn/1533667874f24412a2c886f858f3e7fa.png" alt="OpenCV"><img src="https://img-blog.csdnimg.cn/f026174e259d43abba3ce2c79365a703.png" alt="Numpy"></p><h4 id="2-图像的混合"><a href="#2-图像的混合" class="headerlink" title="2.图像的混合"></a>2.图像的混合</h4><p>这其实也是加法，但是不同的是两幅图像的权重不同，这就会给人一种混合或者透明的感觉。图像混合的计算公式如下：</p><blockquote><p>g(x) = (1−α)f0(x) + αf1(x)</p></blockquote><p>通过修改 α 的值（0 → 1）,实现不同权重的图像混合</p><p>参考代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>img4 <span class="token operator">=</span> cv<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span>imggray<span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img4<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/9a7b1bc9fd0d4be18ffda46ea54982b9.png" alt="图像混合"></p><blockquote><p>注意：这里都要求两幅图像是相同大小的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 图像处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7程序启动命令合集</title>
      <link href="/2021-12-20-centos7-cheng-xu-qi-dong-ming-ling-he-ji.html"/>
      <url>/2021-12-20-centos7-cheng-xu-qi-dong-ming-ling-he-ji.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./redis-server <span class="token punctuation">..</span>/redis.conf <span class="token operator">&amp;</span>./redis-cli -a <span class="token number">123456</span> -h <span class="token number">192.168</span>.174.131./zkServer.sh start<span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment"># ./nginx -c /usr/java/nginx/conf/nginx.conf</span>./mysqld_safe <span class="token operator">&amp;</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nohup java -jar  /usr/java/jenkins/jenkins.war >/usr/java/jenkins/jenkins.out &amp;</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /root/.jenkins/secrets/initialAdminPassword</span>密码:6ffe5db2ab1e4110ac62a31ee93a6039fdfs_trackerd /etc/fdfs/tracker.conffdfs_storaged /etc/fdfs/storage.conf/usr/java/nginx_fdfs/sbin/nginx -c /usr/java/nginx_fdfs/conf/nginx.confnginx Windows版启动 nginx.exe 关闭:nginx.exe -s stop<span class="token punctuation">[</span>root@localhost java<span class="token punctuation">]</span><span class="token comment"># rabbitmq-server start &amp;</span>systemctl start dockerdocker run -it centos /bin/bashF:<span class="token punctuation">\</span>elasticsearch<span class="token punctuation">\</span>elasticsearch-head-master<span class="token operator">></span>cnpm <span class="token function">install</span>F:<span class="token punctuation">\</span>elasticsearch<span class="token punctuation">\</span>elasticsearch-head-master<span class="token operator">></span>npm run startcanal  ./startup.sh清理浏览器缓存 ctrl <span class="token builtin class-name">shift</span> del下载文件到桌面 sz 文件名上传文件 rz -y<span class="token punctuation">(</span>覆盖<span class="token punctuation">)</span>git@github.com:1600767556/mybatis.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统重装后需要配置的地方</title>
      <link href="/2021-12-20-xi-tong-chong-zhuang-hou-xu-yao-pei-zhi-de-di-fang.html"/>
      <url>/2021-12-20-xi-tong-chong-zhuang-hou-xu-yao-pei-zhi-de-di-fang.html</url>
      
        <content type="html"><![CDATA[<h3 id="需要安装的软件"><a href="#需要安装的软件" class="headerlink" title="需要安装的软件"></a>需要安装的软件</h3><ul><li>google</li><li>7-zip</li><li>MySQL8.0+Navicat</li><li>pycharm</li><li>IDEA破解</li><li>office+visio</li><li>Typora</li><li>vmware16</li><li>搜狗输入法</li><li>TIM</li><li>postman</li><li>更新<code>pip</code>到最新版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>xshell和xftp</li><li>360<ul><li>为了安装xshell和xftp所缺失的dll文件</li></ul></li></ul><h3 id="需要配置的环境变量"><a href="#需要配置的环境变量" class="headerlink" title="需要配置的环境变量"></a>需要配置的环境变量</h3><ul><li>jdk</li><li>git</li><li>node</li><li>Maven</li><li>anaconda</li></ul><p><img src="https://img-blog.csdnimg.cn/34071642a9754bd7a66ac9923eb69267.png" alt="JAVA&amp;MAVEN"></p><p><img src="https://img-blog.csdnimg.cn/5e0deccd8f7a464b8a2072e62752e51f.png" alt="环境变量"></p><h3 id="需要登录的账号"><a href="#需要登录的账号" class="headerlink" title="需要登录的账号"></a>需要登录的账号</h3><ul><li>edge登录</li><li>google登录(用到插件iGG)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析三大类库的基本使用</title>
      <link href="/2021-11-26-shu-ju-fen-xi-san-da-lei-ku-de-ji-ben-shi-yong.html"/>
      <url>/2021-11-26-shu-ju-fen-xi-san-da-lei-ku-de-ji-ben-shi-yong.html</url>
      
        <content type="html"><![CDATA[<h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltarray <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>img_array <span class="token operator">=</span> plt<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./7.jpg'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_array<span class="token punctuation">)</span> <span class="token comment"># 将numpy数组进行可视化展示</span>img_arraymg <span class="token operator">=</span> img_array <span class="token operator">-</span> <span class="token number">100</span> <span class="token comment"># 将每一个数组元素减100</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_arraymg<span class="token punctuation">)</span> <span class="token comment"># 将numpy数组进行可视化展示</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># 一维等差数列数组</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span>step<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 一维等差数列</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span>shape <span class="token comment"># 数组形状</span>arr<span class="token punctuation">.</span>ndim <span class="token comment"># 数组维度</span>arr<span class="token punctuation">.</span>size <span class="token comment"># 数组元素个数</span>arr<span class="token punctuation">.</span>dtype <span class="token comment"># 数组元素类型</span><span class="token builtin">type</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># 数组数据类型</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token string">'int32'</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span>dtypearr<span class="token punctuation">.</span>dtype<span class="token operator">=</span><span class="token string">'uint8'</span>arr<span class="token punctuation">.</span>dtype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引-amp-切片"><a href="#索引-amp-切片" class="headerlink" title="索引&amp;切片"></a>索引&amp;切片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># arr数组前两行</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># arr数组前两列</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># arr数组前两行和前两列的数组</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># arr数组行倒置</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># arr数组列倒置</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#arr数组行列倒置</span>img_array<span class="token punctuation">.</span>shape <span class="token comment"># 图片行列颜色</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 图片倒置</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_array<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 图片裁剪</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="聚合-amp-矩阵"><a href="#聚合-amp-矩阵" class="headerlink" title="聚合&amp;矩阵"></a>聚合&amp;矩阵</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 二维数组->一维数组</span>arr<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 一维数组->多维</span><span class="token comment"># 级联操作 将多个numpy数组进行横向或纵向拼接</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 0:列</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 1:行</span><span class="token comment"># 图片拼接</span>img_2 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>img_array2<span class="token punctuation">,</span>img_array2<span class="token punctuation">,</span>img_array2<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>常用聚合函数 <code>sum，max，min，mean</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 第一列的和</span>arr<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>常用数学函数 <code>sin cos tan </code>,<code>around（a,decimals）</code> a: 数组 decimals：舍入的小数位数，默认为0.如果为负，整数将四舍五入到小数点左侧位置</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>np<span class="token punctuation">.</span>around<span class="token punctuation">(</span><span class="token number">3.8</span><span class="token punctuation">)</span> <span class="token comment"># 四舍五入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>常用统计函数<ul><li>numpy.amin() 和 numpy.amax() ：用于计算数组中的元素沿指定轴的最小值和最大值</li><li>numpy.ptp()： 最大值和最小值的差</li><li>numpy.median()： 计算数组a中元素的中位数</li><li>标准差 std() ：标准差是一组数据平均值分散程度的一种度量<ul><li>公式：std = sqrt(mean((x-x.mean())**2))</li></ul></li><li>方差 var() ：统计中的方差是每个样本本值与平均数之差平方值的平均数，即标准差就是方差的平方根</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>矩阵</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token comment"># 运行结果</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><ul><li><code>Series</code>是一种类似于一维数组的对象,由两部分组成<ul><li><code>values</code>:一维数组</li><li><code>index</code>:相关的数据索引标签</li></ul></li><li><code>Series</code>的创建<ul><li>由列表或<code>numpy</code>数组创建</li><li>由字典创建</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">from</span> pandas <span class="token keyword">import</span> Seriess <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npSeries<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%% 用来指定显示缩影</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ss<span class="token punctuation">.</span>dtype<span class="token comment">#%% 为什么需要有显示索引</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'语文'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">'数学'</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">,</span>    <span class="token string">'理综'</span><span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>s<span class="token comment">#%%</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span>语文s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>sizes<span class="token punctuation">.</span>indexs<span class="token punctuation">.</span>valuess<span class="token punctuation">.</span>dtype<span class="token comment">#%%</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 显示前n个数据</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 显示后n个元素</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>notnull<span class="token comment">#%%</span><span class="token comment"># Series的算术运算--法则:索引一致的元素进行运算,否则补空</span>s1  <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2  <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s <span class="token operator">=</span> s1<span class="token operator">+</span>s2s<span class="token comment">#%%</span>s<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DataFram"><a href="#DataFram" class="headerlink" title="DataFram"></a>DataFram</h4><ul><li><code>DataFrame</code>是一个表格型的数据结构,由按一定顺序排列的多列数据组成.既有行索引,也有列索引<ul><li>行索引:<code>index</code></li><li>列索引:<code>columns</code></li><li>值:<code>values</code></li></ul></li><li><code>DataFram</code>的创建<ul><li><code>ndarray</code>创建</li><li>字典创建</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFramedf <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'zhangsna'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'salary'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>valuesdf<span class="token punctuation">.</span>columnsdf<span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>shapedf<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'张三'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'李四'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token string">'理综'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引-amp-切片-1"><a href="#索引-amp-切片-1" class="headerlink" title="索引&amp;切片"></a>索引&amp;切片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFramedf <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'zhangsna'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'salary'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>valuesdf<span class="token punctuation">.</span>columnsdf<span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>shapedf<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'张三'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'李四'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token string">'理综'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 取单列,如果df有显示的索引,通过索引机制去取行或列的时候只能通过显示索引</span>df<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token comment"># 强行使用 行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 取多列</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># - iloc: 隐式索引取行</span><span class="token comment"># - loc: 显式索引取行</span><span class="token comment"># 取单行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 取多行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 0行3列 单个元素</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token comment"># 多个元素</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 切行</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># 切列</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul><li>同Series</li></ul><h4 id="时间数据类型转换"><a href="#时间数据类型转换" class="headerlink" title="时间数据类型转换"></a>时间数据类型转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'time'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'2020-10-01'</span><span class="token punctuation">,</span><span class="token string">'2021-11-11'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'temp'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token comment">#%% 将time列的数据类型转换成时间序列类型</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dfdf<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token comment">#%% 将time列作为源数据的行索引</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> tushare <span class="token keyword">as</span> ts<span class="token comment">#%% 获取某只股票的历史行情数据</span>df  <span class="token operator">=</span>ts<span class="token punctuation">.</span>get_k_data<span class="token punctuation">(</span>code<span class="token operator">=</span><span class="token string">'600519'</span><span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./maotai.csv'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./maotai.csv'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 删除df指定列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token string">'Unnamed: 0'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 查看每一列的数据类型</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将time列转为时间数据类型</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 将date列作为源数据的行索引</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 输出该股票所有收盘比开盘上涨百分之三以上的日期</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0.06</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token comment">#%% 输出该股票所有开盘比前日收益跌幅超过2%的日期</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">0.02</span><span class="token comment"># 取出True对应的行数据</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">0.02</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token comment">#%% 取出每个月的第一个交易日的第一行数据</span>new_df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'2010-01'</span><span class="token punctuation">:</span><span class="token string">'2020-02'</span><span class="token punctuation">]</span>df_monthly <span class="token operator">=</span> new_df<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 买入股票花费的金额</span>cost <span class="token operator">=</span> df_monthly<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>cost<span class="token comment">#%% 卖出股票到手的钱</span><span class="token comment"># 特殊情况 : 2020年买入的股票卖不出去 得切除最后一年的数据</span>df_yearly <span class="token operator">=</span> new_df<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>resv <span class="token operator">=</span> df_yearly<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1200</span>resv<span class="token comment">#%% 使用昨天的收盘价作为剩余股票的单价</span>last_month <span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>new_df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>last_month<span class="token comment">#%% 计算总收益</span>resv<span class="token operator">+</span>last_month<span class="token operator">-</span>cost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 双均线策略制定</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> tushare <span class="token keyword">as</span> ts<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./maotai.csv'</span><span class="token punctuation">)</span>df<span class="token comment">#%% 删除df指定列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token string">'Unnamed: 0'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%% 5日均线和30日均线</span>ma5 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>ma30 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>ma30<span class="token comment">#%%</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ma5<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ma30<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%% 分析输出所有的金叉日期和死叉日期</span>ma5 <span class="token operator">=</span> ma5<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span>ma30 <span class="token operator">=</span> ma30<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span>df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#%%</span>s1 <span class="token operator">=</span> ma5<span class="token operator">&lt;</span>ma30s2 <span class="token operator">=</span> ma5<span class="token operator">></span>ma30df<span class="token comment"># df=df.reset_index()</span><span class="token comment">#%%</span>death_ex <span class="token operator">=</span> s1 <span class="token operator">&amp;</span> s2<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 判定死叉条件</span>death_date <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>death_ex<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token comment"># 死叉对应行数据时间</span><span class="token comment">#%%</span>golden_ex <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>s1 <span class="token operator">|</span> s2<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 判定金叉条件</span>golden_date <span class="token operator">=</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>golden_ex<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token comment"># 金叉时间</span>golden_date<span class="token comment">#%%</span>s1 <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token operator">=</span>golden_date<span class="token punctuation">)</span> <span class="token comment"># 1作为金叉的标识</span>s2 <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token operator">=</span>death_date<span class="token punctuation">)</span> <span class="token comment"># 0作为金叉的标识</span>s  <span class="token operator">=</span>s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 金叉和死叉对应的时间</span>s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token string">'2010'</span><span class="token punctuation">:</span><span class="token string">'2020'</span><span class="token punctuation">]</span>s<span class="token comment">#%%</span>first_money <span class="token operator">=</span> <span class="token number">100000</span> <span class="token comment"># 本金不变</span>money <span class="token operator">=</span> first_money <span class="token comment"># 买卖操作可变的</span>hold <span class="token operator">=</span>  <span class="token number">0</span> <span class="token comment"># 持有股票的数量(100股=1手)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 金叉时间</span>        time <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        p <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>time<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span> <span class="token comment"># 股票单价</span>        hand_count <span class="token operator">=</span> money <span class="token operator">//</span> <span class="token punctuation">(</span>p<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 最多买多少手股票</span>        hold <span class="token operator">=</span> hand_count <span class="token operator">*</span> <span class="token number">100</span>        money <span class="token operator">-=</span><span class="token punctuation">(</span>hold<span class="token operator">*</span>p<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        death_time <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment"># 死叉时间</span>        p_death <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>death_time<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span> <span class="token comment"># 卖股票的单价</span>        money<span class="token operator">+=</span> <span class="token punctuation">(</span>p_death<span class="token operator">*</span>hold<span class="token punctuation">)</span> <span class="token comment"># 卖出股票的收入</span>        hold <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 判定最后一天是金叉还是死叉</span>last_monry <span class="token operator">=</span> hold<span class="token operator">*</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 剩余股票的价值</span><span class="token comment"># 总收益</span>money<span class="token operator">+</span>last_monry<span class="token operator">-</span>first_money<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于pandas的数据清洗"><a href="#基于pandas的数据清洗" class="headerlink" title="基于pandas的数据清洗"></a>基于pandas的数据清洗</h3><ul><li>原始数据中存在缺失值(空值)</li><li>重复值</li><li>异常值</li></ul><h4 id="处理丢失数据-空值"><a href="#处理丢失数据-空值" class="headerlink" title="处理丢失数据(空值)"></a>处理丢失数据(空值)</h4><ul><li>在数据分析中需要使用<strong>浮点型的空</strong>而不是对象类型的空 <ul><li><code>NAN</code>可以参与运算</li><li><code>None</code>不可以参与运算</li></ul></li><li>在pandas中遇到None形式的空值则pandas会将其强转成NAN的形式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 基于pandas的数据清洗</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token builtin">type</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token punctuation">,</span>Seriesdf <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nandf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>df<span class="token comment">#%% 方式一:对空值进行过滤(删除空所在的行数据)</span><span class="token comment"># isnull notnull any(检测行或列中是否有True) all</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 将上部的布尔值作为原数据的行索引</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># true对应的行数据就是存在缺失值的行数据</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token comment"># 即将要删除的行索引</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 将缺失行进行删除</span><span class="token comment">#%% all 用来检测false 有false就false</span>df<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#%% 方式二--dropna:直接将缺失的行或列进行删除</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%% 对缺失值进行覆盖</span><span class="token comment"># 使用水平和竖直方向的向前向后填充去填充空值</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理重复数据和异常数据"><a href="#处理重复数据和异常数据" class="headerlink" title="处理重复数据和异常数据"></a>处理重复数据和异常数据</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 处理重复数据</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span> <span class="token comment"># keep = False last</span><span class="token comment">#%% 处理异常数据</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment"># 判定异常条件</span>twice_std <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">></span>twice_stddf<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">></span>twice_std<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataFrame的级联和合并操作"><a href="#DataFrame的级联和合并操作" class="headerlink" title="DataFrame的级联和合并操作"></a>DataFrame的级联和合并操作</h3><ul><li>级联(数据拼接)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% DataFram的级联和合并操作</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token comment">#%%</span>df1 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1df2<span class="token comment">#%%</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%% 不匹配级联 外连接(outer):补NAN(默认模式) 保证数据的完整性 内连接:只连接匹配的项</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>join<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>合并(数据合并)</li><li>merge与concat的区别在于,merge需要依据某一共同列来合并</li><li>使用pd.merge()合并时,会自动根据两者相同column名称的那一列,作为key来进行合并</li><li>注意每一列元素的顺序不要求一致</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 合并</span>df1  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'employee'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'lisa'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token string">'group'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'Accounting'</span><span class="token punctuation">,</span><span class="token string">'Engineering'</span><span class="token punctuation">,</span><span class="token string">'Engineering'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df1<span class="token comment">#%%</span>df2  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'employee'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'lisa'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'Bob'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token string">'hire_date'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2<span class="token comment">#%%</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df2<span class="token punctuation">,</span>df1<span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'employee'</span> <span class="token punctuation">)</span> <span class="token comment"># ctrl+p 看参数按情况传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pandas高级操作"><a href="#pandas高级操作" class="headerlink" title="pandas高级操作"></a>pandas高级操作</h3><h4 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 替换操作</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">'Two'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">74</span><span class="token punctuation">:</span><span class="token string">'one'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">'five ten'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h4><ul><li>创建一个映射关系表,把<code>values</code>元素的和一个特定的标签或者字符串绑定(给一个元素提供不同的表现形式)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'salary'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%%</span>dic  <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'张三'</span><span class="token punctuation">:</span><span class="token string">'ssm'</span><span class="token punctuation">,</span>    <span class="token string">'李四'</span><span class="token punctuation">:</span><span class="token string">'shaoshao'</span><span class="token punctuation">&#125;</span>df<span class="token punctuation">[</span><span class="token string">'e_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%% 运算工具(求税后薪资)</span><span class="token keyword">def</span> <span class="token function">salary_after</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token operator">-</span> <span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span>df<span class="token punctuation">[</span><span class="token string">'after_sal'</span><span class="token punctuation">]</span> <span class="token operator">=</span>  df<span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>salary_after<span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序实现的随机抽样"><a href="#排序实现的随机抽样" class="headerlink" title="排序实现的随机抽样"></a>排序实现的随机抽样</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 排序实现的随机抽样</span>df  <span class="token operator">=</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%% 将原始数据打乱</span>df<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 乱序的随机序列</span>df<span class="token punctuation">.</span>take<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'item'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'banan'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'price'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'weight'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token comment">#%% 查看详细的分组情况</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token comment">#%% 计算每一种水果的平均价格</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 将水果根据颜色的平均重量汇总到源数据</span>dic <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'mean_w'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高级数据聚合-transform-apply-自定义"><a href="#高级数据聚合-transform-apply-自定义" class="headerlink" title="高级数据聚合(transform apply) 自定义"></a>高级数据聚合(transform apply) 自定义</h4><ul><li>transform apply 也可传入一个<code>lambda</code>表达式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 高级数据聚合(transform apply) 自定义</span><span class="token keyword">def</span> <span class="token function">my_mean</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    m_sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        m_sum <span class="token operator">+=</span> i    <span class="token keyword">return</span> m_sum <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>my_mean<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>my_mean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><ul><li>透视表是一种对数据动态排布并且分类汇总的表格格式</li><li><code>pivot_table</code> 四个重要参数<code>index,values,columns,aggfunc</code><ul><li><code>index</code>:分类汇总的分类条件</li><li><code>values</code>:对计算的数据进行筛选</li><li><code>aggfunc</code>:设置对数据聚合时进行的函数操作,默认<code>aggfunc = &#39;mean&#39;</code></li><li><code>columns</code>:设置列层次字段</li><li><code>fill_value</code>: None-&gt;0</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'对手'</span><span class="token punctuation">,</span><span class="token string">'主客场'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'得分'</span><span class="token punctuation">,</span><span class="token string">'计分板'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'对手'</span><span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h3><ul><li>计算分组的特殊透视图,对数据进行汇总</li><li>`pd.corsstab(index,columns)<ul><li><code>index</code>:分组数据,交叉表的行索引</li><li><code>columns</code>:交叉表的列索引</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>df<span class="token punctuation">.</span>smoke<span class="token punctuation">,</span>df<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token comment"># age sex 表中的索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2012美国大选献金数据分析"><a href="#2012美国大选献金数据分析" class="headerlink" title="2012美国大选献金数据分析"></a>2012美国大选献金数据分析</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 导入包</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span><span class="token comment"># 读取数据</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/2012_Federal_Election_Commission_Database.csv'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 对新数据进行纵览,查看是否存在缺失数据</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 用统计学指标快速描述属性的摘要</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 空值处理 -> 将其填充为NOT PROVIDE</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">'NOT PROVIDE'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 异常值处理 将捐赠金额&lt;=0的数据删除</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#df.info()</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 异常值处理 将捐赠金额&lt;=0的数据删除</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 用统计学指标快速描述属性的摘要</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 空值处理 -> 将其填充为NOT PROVIDE</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">'NOT PROVIDE'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 异常值处理 将捐赠金额&lt;=0的数据删除</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment">#通过搜索引擎等途径，获取到每个总统候选人的所属党派，建立字典parties，候选人名字作为键，所属党派作为对应的值</span>parties <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Bachmann, Michelle'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Cain, Herman'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Gingrich, Newt'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Huntsman, Jon'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Johnson, Gary Earl'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'McCotter, Thaddeus G'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Obama, Barack'</span><span class="token punctuation">:</span> <span class="token string">'Democrat'</span><span class="token punctuation">,</span>           <span class="token string">'Paul, Ron'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Pawlenty, Timothy'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Perry, Rick'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">"Roemer, Charles E. 'Buddy' III"</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Romney, Mitt'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Santorum, Rick'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">&#125;</span><span class="token comment"># 新建一列为各个候选人所在党派的party</span>df<span class="token punctuation">[</span><span class="token string">'party'</span><span class="token punctuation">]</span>  <span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'cand_nm'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>parties<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看party这一列有哪些不同的元素</span>df<span class="token punctuation">[</span><span class="token string">'party'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">[</span><span class="token string">'party'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看各党派收到的政治现金总数contb_receipt_amt</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'party'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看每天各个党派收到的政治献金总数contb_receipt_amt</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_dt'</span><span class="token punctuation">,</span><span class="token string">'party'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>months <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'JAN'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'FEB'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'MAR'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'APR'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'MAY'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'JUN'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'JUL'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'AUG'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'SEP'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'OCT'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'NOV'</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'DEC'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token comment">#%%</span><span class="token comment"># 将表中的日期改为'yyyy-mm-dd'</span><span class="token keyword">def</span> <span class="token function">transformDate</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    day<span class="token punctuation">,</span>month<span class="token punctuation">,</span>year <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>    month <span class="token operator">=</span> months<span class="token punctuation">[</span>month<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">'20'</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>daydf<span class="token punctuation">[</span><span class="token string">'contb_receipt_dt'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'contb_receipt_dt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>transformDate<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看老兵(捐献者的职业) DISABLED VETERAN 主要支持谁 捐钱最多</span>df<span class="token punctuation">[</span><span class="token string">'contbr_occupation'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'DISABLED VETERAN'</span>df_old <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contbr_occupation'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'DISABLED VETERAN'</span><span class="token punctuation">]</span><span class="token comment"># 根据候选人组分,对捐赠金额求和</span>df_old<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'cand_nm'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="matplotlib绘图"><a href="#matplotlib绘图" class="headerlink" title="matplotlib绘图"></a>matplotlib绘图</h3><h4 id="线形图"><a href="#线形图" class="headerlink" title="线形图"></a>线形图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  matplotlib 绘图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#%% 绘制线形图</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">3</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%% 设置绘制坐标的比例</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#%% 设置图例</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'x,y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'x+1,y-2'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># param : ncol=2</span><span class="token comment">#%% 设置轴的标识</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'temp'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'dist and temp'</span><span class="token punctuation">)</span><span class="token comment">#%% 图例保存</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'x,y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'123.png'</span><span class="token punctuation">)</span><span class="token comment">#%% 其他样式风格</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 柱状图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 直方图</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>data<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 饼图 labeldistance 距圆心的距离  autopct 所占的比例</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>labeldistance<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>shadow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>explode<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>autopct<span class="token operator">=</span><span class="token string">'%0.6f%%'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 散点图</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter基本操作</title>
      <link href="/2021-11-26-jupyter-ji-ben-cao-zuo.html"/>
      <url>/2021-11-26-jupyter-ji-ben-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>启动: 在终端中录入<code>jupyter notebook</code>,回车即可</li><li>快捷键:<ul><li>添加<code>cell</code>:<code>a</code>或者<code>b</code></li><li>删除:<code>x</code></li><li>修改<code>cell</code>模式:<ul><li>m:<code>Markdown</code>模式</li><li>y :<code>code</code>模式</li></ul></li><li>执行<code>cell</code>: <code>shift+enter</code></li><li><code>tab</code>: 自动补全</li><li>打开帮助文档:<code>shift+tab</code></li></ul></li><li>在idea中使用 jupyter<ul><li><code>pip install jupyter notebook</code></li><li>ctrl + enter : 运行cell</li><li>shift + enter : 新建cell</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pycharm </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github搜索语法</title>
      <link href="/2021-11-25-github-sou-suo-yu-fa.html"/>
      <url>/2021-11-25-github-sou-suo-yu-fa.html</url>
      
        <content type="html"><![CDATA[<p> 可以使⽤<a href="https://github.com/">搜索</a>页面或<a href="https://github.com/search">高级搜索</a>页面来搜索GitHub </p><table><thead><tr><th>Query</th><th>Examples</th></tr></thead><tbody><tr><td>&gt;n</td><td>cats stars:&gt;100 匹配关键字“cats”且stars大于100的仓库</td></tr><tr><td>&lt;n</td><td>cats stars:&gt;100 匹配关键字“cats”且stars小于100的仓库</td></tr><tr><td>&gt;=n</td><td>cats stars:&gt;=100 匹配关键字“cats”且stars大于等于100的仓库</td></tr><tr><td>&lt;=n</td><td>cats stars:&lt;=100 匹配关键字“cats”且stars小于等于100的仓库</td></tr><tr><td>n..*</td><td>cats stars:100..* 匹配关键字“cats”且stars大于等于100的仓库</td></tr><tr><td>*..n</td><td>cats stars:*..100 匹配关键字“cats”且stars小于等于100的仓库</td></tr><tr><td>n..n</td><td>cats stars:10..50 匹配关键字“cats”且stars大于10小于50的仓库</td></tr></tbody></table><h3 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li> 只能搜索⼩于384 KB的⽂件。</li><li> 只能搜索少于500,000个⽂件的存储库。</li><li> 登录的⽤户可以搜索所有公共存储库 。</li><li>除<code>filename</code>搜索外，搜索源代码时，必须包含一个搜索词。例如：搜索<code>language:java</code>无效，而是这样：<code>amazing language:java</code></li><li> 搜索结果最多可以显示来⾃同⼀⽂件的两个⽚段，但⽂件中可能会有更多结果。  </li><li> 不能将以下通配符用作搜索查询的一部分<code>. , : ; / \  &#39; &quot; = * ! ? # $ &amp; + ^ | ~ &lt; &gt; ( ) &#123; &#125; [ ]</code>,搜索将忽略这些符号。</li></ul><h4 id="日期条件"><a href="#日期条件" class="headerlink" title="日期条件"></a>日期条件</h4><p><code>cats pushed:&lt;2012-07-05</code> 搜索在2012年07⽉05⽇前push代码，且cats作为关键字</p><p><code>cats pushed:2016-04-30..2016-07-04</code>⽇期区间</p><p><code>cats created:&gt;=2017-04-01</code>创建时间</p><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>AND、OR、NOT</p><h4 id="排除运算"><a href="#排除运算" class="headerlink" title="排除运算"></a>排除运算</h4><p><code>cats pushed:&lt;2012-07-05 -language:java </code>搜索在2012年07⽉05⽇前push代码，且cats作为关键字，排除 <code>java </code>语⾔仓库。</p><h4 id="包含搜索"><a href="#包含搜索" class="headerlink" title="包含搜索"></a>包含搜索</h4><p><code>cats in:file</code> 搜索⽂件中包含cats的代码</p><p><code>cats in:path</code> 搜索路径中包含cats的代码</p><p><code>cats in:path,file </code>搜索路径、⽂件中包含cats的代码</p><p><code>console path:app/public language:javascript</code> 搜索关键字<code>console</code>，且语⾔为javascript，在app/public下的代码</p><h4 id="主体搜索"><a href="#主体搜索" class="headerlink" title="主体搜索"></a>主体搜索</h4><p><code>user:USERNAME</code> ⽤户名搜索</p><p><code>org: ORGNAME</code> 组织搜索</p><p><code>repo:USERNAME/REPOSITORY</code> 指定仓库搜索</p><h4 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h4><p><code>size&gt;10000</code>搜索大小大于1kb的文件</p><h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4><p><code>filename:config.php language:php</code> 搜索文件名为config.php,且语言为php的代码</p><h4 id="扩展名"><a href="#扩展名" class="headerlink" title="扩展名"></a>扩展名</h4><p><code>extension:EXTENSION </code><strong>指定扩展名</strong></p><h3 id="常见用法示例"><a href="#常见用法示例" class="headerlink" title="常见用法示例"></a>常见用法示例</h3><p><code> in:name mini-app</code> #仓库标题搜索含有关键字”mini-app”</p><p><code> in:descripton web</code> #仓库描述搜索含有关键字”web” </p><p><code>in:readme node #README</code>文件搜素含有关键字”node” </p><p>`org:github`` #匹配github名下的仓库</p><p><code> stars:&gt;3000</code> #stars数量大于3000的搜索仓库</p><p><code> stars:1000..3000</code> #stars数量大于1000小于3000的仓库</p><p><code> forks:&gt;1000</code> #forks数量大于1000的搜索关键字</p><p><code>forks:1000..3000</code>#forks数量大于1000小于3000的搜索仓库</p><p><code> size:&gt;=5000</code> #指定仓库大于5000k(5M)的搜索仓库</p><p><code> pushed:&gt;2019-02-12</code> #发布时间大于2019-02-12的仓库</p><p><code> created:&gt;2019-02-12</code> #创建时间大于2019-02-12的仓库</p><p><code> mirror:true(false)</code> #是否是镜像仓库 archived:true(false) #是否是废弃的仓库</p><p><code> user:jack</code> #用户名为”jack”的仓库</p><p><code> license:apache-2.0</code> #仓库的 LICENSE为”apache-2.0”</p><p><code> language:java</code> #使用”java”语言的仓库</p><p><code> user:jack in:name web</code> #组合搜索,用户名为”jack”,且标题含有”web”的</p><p><code> topic:jekyll</code> #匹配topic中含有关键字”jekyll”的仓库</p><p><code> topic:5</code> #匹配拥有5个topic的仓库</p><p><code> topic:&gt;3</code> #匹配拥有3个以上topic的仓库</p><p><code> is:public</code> #公开的仓库</p><p><code> is:private</code> #匹配有权限的私有仓库 </p><hr><p>案例演示：</p><p><code>in:name spring cloud stars:&gt;3000 pushed:&gt;2021-10-01</code></p><p><code>in:description 植物大战僵尸 stars:&gt;100 language：java</code></p><p><code>in:readme 植物大战僵尸 stars:&gt;100 created:&gt;2019</code></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python一些类库的基本操作</title>
      <link href="/2021-11-24-python-yi-xie-lei-ku-de-ji-ben-cao-zuo.html"/>
      <url>/2021-11-24-python-yi-xie-lei-ku-de-ji-ben-cao-zuo.html</url>
      
        <content type="html"><![CDATA[<h3 id="Xwlt"><a href="#Xwlt" class="headerlink" title="Xwlt"></a>Xwlt</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xlwtworkbook <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>worksheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'sheet1'</span><span class="token punctuation">)</span>worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'student.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sqlite"><a href="#Sqlite" class="headerlink" title="Sqlite"></a>Sqlite</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sqlite3conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'test.db'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    insert into company (id,name,age,address,salary)    values (1,'张三',22,'山西',8000)'''</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    select * from company'''</span>cursor <span class="token operator">=</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'address='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># conn.commit()</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token keyword">import</span> timeapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello world!'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/1/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 字典,列表等其他类型也可</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>var <span class="token operator">=</span> a<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/welcome/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello %s'</span> <span class="token operator">%</span> name<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/welcome/&lt;int:id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">welcome2</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello id: %d'</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WordCloud"><a href="#WordCloud" class="headerlink" title="WordCloud"></a>WordCloud</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba  <span class="token comment"># 分词</span><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt  <span class="token comment"># 绘图可视化</span><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud  <span class="token comment"># 词云</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token comment"># 图片处理</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 矩阵运算</span><span class="token keyword">import</span> sqlite3  <span class="token comment"># 数据库</span>conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'test.db'</span><span class="token punctuation">)</span>cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'select name,address from company'</span>data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>    text <span class="token operator">=</span> text <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>cut <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cut<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'639cad061d950a7b7700d56c07d162d9f3d3c9f2.jpg'</span><span class="token punctuation">)</span>img_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>  <span class="token comment"># 图片->数组</span>wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>               mask<span class="token operator">=</span>img_array<span class="token punctuation">,</span>               font_path<span class="token operator">=</span><span class="token string">'CENTURY.TTF'</span><span class="token punctuation">)</span>wc<span class="token punctuation">.</span>generate_from_text<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token comment"># 绘制图片</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span> <span class="token comment">#是否显示坐标轴</span><span class="token comment"># plt.show()</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'word.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫之分布式爬虫</title>
      <link href="/2021-11-24-python-pa-chong-zhi-fen-bu-shi-pa-chong.html"/>
      <url>/2021-11-24-python-pa-chong-zhi-fen-bu-shi-pa-chong.html</url>
      
        <content type="html"><![CDATA[<ul><li>搭建分布式机群,让其对一组资源进行分布式联合爬取</li><li>提升爬取效率</li><li>实现分布式:<ul><li>pip install scrapy-redis</li></ul></li><li>scrapy-redis 组件的作用:<ul><li>给原生的scrapy框架提供可以被共享的管道和调度器</li></ul></li></ul><hr><h3 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h3><p>实现步骤:</p><ul><li><p><code>scrapy startproject firstdemo</code></p></li><li><p><code>scrapy genspider -t crawl xxx [www.xxx.com</code>](<a href="http://www.xxx.com/">http://www.xxx.com/</a>)</p></li><li><p>修改当前爬虫文件</p><ul><li>导包 : <code>from scrapy_redis.spiders import RedisCrawlSpider</code></li><li>将<code>start_urls</code>和<code>allowed_domains</code>进行注释 </li><li>添加新属性: <code>redis_key = &#39;sun&#39; </code>可以被共享的调度器的名称</li><li>编写数据解析相关操作</li><li>将当前爬虫类的父类修改成<code>RedisCrawlSpider</code></li></ul></li><li><p>修改配置文件<code>settings</code></p></li><li><p>指定使用可以被共享的管道</p><ul><li><code>ITEM_PIPELINES = &#123;    &#39;scrapy_redis.pipelines.RedisPipeline&#39;: 400&#125;</code></li></ul></li><li><p>指定调度器</p><ul><li>增加一个去重容器类的配置,使用<code>redis</code>的<code>set</code>集合来存储请求的指纹数据,从而实现请求去重的持久化 <code>DUPEFILTER_CLASS = &#39;scrapy_redis.dupefilter.RFPDupeFilter&#39;</code></li><li>使用<code>scrapy_redis</code>组件 自己的调度器<code> SCHEDULER = &#39;scrapy_redis.scheduler.Scheduler&#39;</code></li><li>配置调度器是否要持久化,也就是当爬虫结束,是否要清空<code>Redis</code>中请求队列和去重指纹<code>set</code>(人话:爬虫一般机器宕机了,重启后是否继续爬虫还是从0开始) <code>SCHEDULER_PERSIST = True</code></li></ul></li><li><p>指定<code>redis</code>服务器</p><ul><li><code>REDIS_HOST = &#39;127.0.0.1&#39;</code></li><li><code>REDIS_PORT = 6379</code></li></ul></li><li><p><code>redis</code>相关操作配置</p><ul><li><p>linux或mac:</p><ul><li><code>redis.conf</code></li></ul></li><li><p>windows:<code>redis.windows.conf</code></p><ul><li>将<code>bind 127.0.0.1</code> 删除</li><li>关闭保护模式 <code>protected-mode yes</code> 改为 <code>no</code></li></ul></li><li><p>结合配置文件开启redis服务</p><ul><li><code>redis-server redis.windows.conf</code></li></ul></li><li><p>启动客户端</p><ul><li><code>redis-cli</code></li></ul></li></ul></li><li><p>执行工程</p><ul><li><code>scrapy runspider xxx.py</code></li><li>向调度器队列(redis)中放入一个起始url<ul><li><code>lpush xxx www.xx.com</code></li></ul></li><li>查看队列中所有的内容和数量:<ul><li><code>lrange xx:items 0 -1</code></li><li><code>llen xx:items</code></li></ul></li></ul></li><li><p>最终爬取到的数据存储在了<code>redis</code>的<code>proName:items</code>这个数据结构中</p></li></ul><hr><p>代码实现</p><p><code>sun2.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> scrapy_redis<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> RedisCrawlSpider<span class="token keyword">from</span> sun2Pro<span class="token punctuation">.</span>items <span class="token keyword">import</span> Sun2ProItem<span class="token keyword">class</span> <span class="token class-name">Sun2Spider</span><span class="token punctuation">(</span>RedisCrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'sun2'</span>    redis_key <span class="token operator">=</span> <span class="token string">'sun'</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id=2&amp;page=\d+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[3]/ul[2]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            new_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            new_title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[3]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> Sun2ProItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_title            item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_num            <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">Sun2ProItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_num <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span><span class="token comment"># 指定管道</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'scrapy_redis.pipelines.RedisPipeline'</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token comment"># 指定调度器</span><span class="token comment"># 增加一个去重容器类的配置,使用redis的set集合来存储请求的指纹数据,从而实现请求去重的持久化</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">'scrapy_redis.dupefilter.RFPDupeFilter'</span><span class="token comment"># 使用scrapy_redis组件 自己的调度器</span>SCHEDULER <span class="token operator">=</span> <span class="token string">'scrapy_redis.scheduler.Scheduler'</span><span class="token comment"># 配置调度器是否要持久化,也就是当爬虫结束,是否要清空Redis中请求队列和去重指纹set(人话:爬虫一般机器宕机了,重启后是否继续爬虫还是从0开始)</span>SCHEDULER_PERSIST <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 指定redis</span>REDIS_HOST <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增量式爬虫"><a href="#增量式爬虫" class="headerlink" title="增量式爬虫"></a>增量式爬虫</h3><ul><li>监测网站数据更新情况,只会爬取网站最新出来的数据</li><li><strong>核心</strong>:监测页面url之前是否请求过<ul><li>将爬取过的url存储到<code>redis</code>的<code>set</code>数据结构中</li></ul></li><li>查看所有的 <code>urls</code> : <code>semebers urls</code></li></ul><hr><p>案例演示</p><p><code>movie.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> redis <span class="token keyword">import</span> Redis<span class="token keyword">from</span> moviePro<span class="token punctuation">.</span>items <span class="token keyword">import</span> MovieproItem<span class="token keyword">class</span> <span class="token class-name">MovieSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'movie'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.male37.live/index.php/vod/type/id/2/page/2.html'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment"># Rule(LinkExtractor(allow=r'/id/3/page/\d+/\.html'), callback='parse_item', follow=True),</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id/\d+/page/\d+\.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    conn <span class="token operator">=</span> Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[1]/div/div[1]/div/div/div[2]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            detail_url <span class="token operator">=</span> <span class="token string">'http://www.male37.live'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            ex <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'urls'</span><span class="token punctuation">,</span> detail_url<span class="token punctuation">)</span>            <span class="token keyword">if</span> ex <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该url没有被爬取过,可以进行数据爬取!'</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据还没更新,暂无新数据可爬取!'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> MovieproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">'/html/body/div[1]/div/div[1]/div[1]/div/div/div/div[2]/h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'--------------'</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">'/html/body/div[1]/div/div[1]/div[1]/div/div/div/div[2]/p[5]/span[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MovieproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    desc <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MovieproPipeline</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> spider<span class="token punctuation">.</span>conn    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'desc'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>lpush<span class="token punctuation">(</span><span class="token string">'movieData'</span><span class="token punctuation">,</span> dic<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">REDIS_HOST <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'moviePro.pipelines.MovieproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫之scrapy框架学习</title>
      <link href="/2021-11-20-scrapy-kuang-jia-xue-xi.html"/>
      <url>/2021-11-20-scrapy-kuang-jia-xue-xi.html</url>
      
        <content type="html"><![CDATA[<h3 id="scrapy安装步骤"><a href="#scrapy安装步骤" class="headerlink" title="scrapy安装步骤"></a>scrapy安装步骤</h3><ul><li>pip install wheel</li><li>下载twisted : 地址:<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a> (选择对应的版本)</li><li>安装twisted : pip install aiohttp-3.8.1-cp38-cp38-win_amd64.whl</li><li>pip install pywin32</li><li>pip install scrapy</li><li>测试终端输入: scrapy</li><li>创建工程 终端输入: scrapy startproject firstdemo</li><li>在sprders目录 终端输入:scrapy genspider first <a href="http://www.xxx.com/">www.xxx.com</a></li><li>执行工程 : scrapy crawl first (spiderName)  –nolong  (不输出日志)</li><li>ROBOTSTXT_OBEY = False</li><li>配置文件<code>settings.py</code>中加上 LOG_ERROR = ‘ERROR’</li><li>USER_AGENT: ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36’</li></ul><h3 id="scrapy持久化存储"><a href="#scrapy持久化存储" class="headerlink" title="scrapy持久化存储"></a>scrapy持久化存储</h3><h4 id="基于终端指令"><a href="#基于终端指令" class="headerlink" title="基于终端指令"></a>基于终端指令</h4><ul><li>持久化存储对应的终端指令只能为：(‘json’, ‘jsonlines’, ‘jl’, ‘csv’, ‘xml’, ‘marshal’, ‘pickle’)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">FirstSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 爬虫文件名称</span>    name <span class="token operator">=</span> <span class="token string">'qiubai'</span>    <span class="token comment"># 允许的域名</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    <span class="token comment"># 起始url列表:存放的url会被scrapy自动进行请求的发送</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            <span class="token comment"># extract: 将Selector对象中data参数存储的字符串提取出来</span>            <span class="token comment"># author = div.xpath('./div[1]/a[2]/h2/text()')[0].extract() 作用一样 必须是一个列元素</span>            author <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'author'</span><span class="token punctuation">:</span> author<span class="token punctuation">,</span>                <span class="token string">'content'</span><span class="token punctuation">:</span> content            <span class="token punctuation">&#125;</span>            all_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">return</span> all_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于管道"><a href="#基于管道" class="headerlink" title="基于管道"></a>基于管道</h4><ul><li>编码流程<ul><li>数据解析</li><li>在<code>item</code>类中定义相关的属性</li><li>将解析的数据封装到<code>item</code>类型的对象</li><li>在<code>item</code>类型的对象提交给管道进行持久化存储的操作</li><li>在管道类的<code>process_item</code>中要将其受到的<code>item</code>对象存储的数据进行持久化存储操作</li><li>在配置文件中开启管道</li></ul></li><li><font color="red">管道文件中一个管道类对应一组数据存储到一个平台或者载体中</font></li><li><font color="red">爬虫文件提交的item只会给管道文件中第一个被执行的管道类接受</font></li><li><font color="red">process_item中的return item表示将item传递给下一个即将被执行的管道类</font></li></ul><p><code>qiubai.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>        <span class="token comment"># extract: 将Selector对象中data参数存储的字符串提取出来</span>        author <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        item <span class="token operator">=</span> QiubaiproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span> <span class="token operator">=</span> author        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item  <span class="token comment"># 将item提交给管道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 存储到本地</span><span class="token keyword">class</span> <span class="token class-name">QiubaiproPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># 重写父类的方法,该方法只在爬虫时调用一次</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./qiubai.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 接受爬虫过来的item对象,处理item类型的对象,每接收一个item对象调用一次</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        author <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>author <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token comment"># 重写父类的方法,该方法只在爬虫结束调用一次</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束爬虫!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 存储到数据库</span><span class="token comment"># 管道文件中一个管道类对应一组数据存储到一个平台或者载体中</span><span class="token keyword">class</span> <span class="token class-name">mysqlPileLine</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> <span class="token boolean">None</span>    cursor <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'hxl158120'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'qiubai'</span><span class="token punctuation">,</span>                                    charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'insert into qiubai values("%s","%s")'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QiubaiproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 300 优先级 数值越小 优先级越高</span>    <span class="token string">'qiubaiPro.pipelines.QiubaiproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    <span class="token string">'qiubaiPro.pipelines.mysqlPileLine'</span><span class="token punctuation">:</span> <span class="token number">301</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基于Spider的全站数据爬取彼岸网图片名称和图片并进行本地存储</li></ul><p><code>meinv.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> meinvPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> MeinvproItem<span class="token keyword">class</span> <span class="token class-name">MeinvSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'meinv'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://pic.netbian.com/4kmeinv/index.html'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">'https://pic.netbian.com/4kmeinv/index_%d.html'</span>    page_num <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            img_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/b/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 若有图片懒加载 使用伪属性</span>            img_src <span class="token operator">=</span> <span class="token string">'https://pic.netbian.com/'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> img_src<span class="token punctuation">)</span>            item <span class="token operator">=</span> MeinvproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'img_src'</span><span class="token punctuation">]</span> <span class="token operator">=</span> img_src            <span class="token keyword">yield</span> item        <span class="token keyword">if</span> self<span class="token punctuation">.</span>page_num <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">%</span> self<span class="token punctuation">.</span>page_num<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MeinvproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    img_src <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>images <span class="token keyword">import</span> ImagesPipeline<span class="token keyword">import</span> scrapy<span class="token comment"># class MeinvproPipeline:</span><span class="token comment">#     def process_item(self, item, spider):</span><span class="token comment">#         return item</span><span class="token keyword">class</span> <span class="token class-name">imgsPileLine</span><span class="token punctuation">(</span>ImagesPipeline<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 根据图片地址进行图片数据请求</span>    <span class="token keyword">def</span> <span class="token function">get_media_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'img_src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 指定图片存储路径</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img_Name <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> img_Name    <span class="token keyword">def</span> <span class="token function">item_completed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> results<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定图片存储目录</span>IMAGES_STORE <span class="token operator">=</span> <span class="token string">'./imgs'</span><span class="token comment"># 更换管道</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'meinvPro.pipelines.imgsPileLine'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五大核心组件"><a href="#五大核心组件" class="headerlink" title="五大核心组件"></a>五大核心组件</h3><ul><li>引擎(Scrapy)<ul><li>用来处理整个系统的数据流处理,触发事务(框架核心)。</li></ul></li><li>调度器(Scheduler)<ul><li>用来接收引擎发过来的请求,压入队列中,并在引擎再次请求的时候返回,可以想象成一个URL(抓取网页的网址或者说是链接)的优先队列,由他来决定下一个要抓取的网址是什么,同时去除重复的网址。</li></ul></li><li>下载器(Downloader)<ul><li>用于下载网页的内容,并将网页内容返回给蜘蛛(Scrapy下载是建立在twisted这个高效的异步模型上的)。</li></ul></li><li>爬虫(Spiders)<ul><li>爬虫主要是干活的,用于从特定的网页中提取自己需要的信息,即所谓的实体(item).用户也可以从中取出链接,让Scrapy继续抓取下一个页面。</li></ul></li><li>项目管道(Pipeline)<ul><li>负责处理爬虫从网页中抽取的实体,主要的功能是持久化实体、验证实体的有效性,清楚不需要的信息,当页面被爬虫解析后,将被发送到项目管道,并经过几个特定的次序处理数据。</li></ul></li></ul><h3 id="请求传参"><a href="#请求传参" class="headerlink" title="请求传参"></a>请求传参</h3><ul><li>使用场景：爬取解析的数据不在同一张页面中（详情页）。</li></ul><p><code>meta=&#123;&#39;item&#39;:item&#125;</code></p><p>案例演示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> bossPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> BossproItem<span class="token keyword">class</span> <span class="token class-name">BossSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'boss'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://jh.58.com/job/?param6693=8|10&amp;PGTID=0d100000-0021-349d-98e8-58c336a9edba&amp;ClickID=2'</span><span class="token punctuation">]</span>    <span class="token comment"># 回调函数接收item</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        job_desc <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[3]/div[2]/div[1]/div[1]/div[1]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        job_desc <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>job_desc<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>job_desc<span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'job_desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_desc        <span class="token keyword">yield</span> item    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="list_con"]/li'</span><span class="token punctuation">)</span>        <span class="token comment"># print(li_list)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            item <span class="token operator">=</span> BossproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            job_address <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/a/span[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            job_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/a/span[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'job_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> jo b_name            <span class="token keyword">print</span><span class="token punctuation">(</span>job_address<span class="token punctuation">,</span>job_name<span class="token punctuation">)</span>            detail_url <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 请求传参：meta = &#123;&#125;，可以将meta字典传递给请求对应的回调函数</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'item'</span><span class="token punctuation">:</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li>位于引擎和下载器之间</li><li>用于拦截到整个工程中所有请求和响应</li><li>拦截请求<ul><li>UA伪装</li><li>代理IP</li></ul></li><li>拦截相应<ul><li>篡改响应数据(响应对象)</li></ul></li></ul><p>案例演示 (ip更换失败)</p><p><code>middle.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MiddleSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'middle'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.baidu.com/s?wd=ip'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ip.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>middlewares.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MiddleproDownloaderMiddleware</span><span class="token punctuation">:</span>    <span class="token comment"># UA伪装</span>    user_agent_list<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>    <span class="token punctuation">]</span>    <span class="token comment"># 代理池</span>    PROXY_http <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'153.180.102.104:80'</span><span class="token punctuation">,</span>        <span class="token string">'195.208.131.189:56055'</span>    <span class="token punctuation">]</span>    PROXY_https <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'120.83.49.90.9000'</span><span class="token punctuation">,</span>        <span class="token string">'95.189.112.214:35508'</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'User-Agent'</span><span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_agent_list<span class="token punctuation">)</span><span class="token comment"># 方便测试</span>        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://121.232.148.116:9000'</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 代理</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'http'</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>PROXY_http<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'https://'</span><span class="token operator">+</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>PROXY_https<span class="token punctuation">)</span>        <span class="token keyword">return</span> request <span class="token comment"># 将修正后的请求对象进行重新发送</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 开启</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'middlePro.middlewares.MiddleproDownloaderMiddleware'</span><span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>爬取网易各大板块文章标题和内容并本地存储</li></ul><p><code>wangyi.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> wangyiPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> WangyiproItem<span class="token keyword">class</span> <span class="token class-name">WangyiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'wangyi'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://news.163.com/'</span><span class="token punctuation">]</span>    models_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储板块对应详情页对应的url</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'E:\PyCharm\pachong\com\ssm\seleniumTest\chromedriver.exe'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="index2016_wrap"]/div[1]/div[2]/div[2]/div[2]/div[2]/div/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li_list<span class="token punctuation">)</span>        alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> alist<span class="token punctuation">:</span>            model_url <span class="token operator">=</span> li_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>models_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model_url<span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>models_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_model<span class="token punctuation">)</span>    <span class="token comment"># 解析每个板块页面中对应新闻的标题和新闻详情页的url</span>    <span class="token keyword">def</span> <span class="token function">parse_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div/div[3]/div[4]/div[1]/div[1]/div/ul/li/div/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div[1]/h3/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>            new_detail_url <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div[1]/h3/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> WangyiproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title            <span class="token comment"># 对新闻详情页的url发起请求</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>new_detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'item'</span><span class="token punctuation">:</span> item<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="content"]/div[2]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'content'</span><span class="token punctuation">:</span> content        <span class="token punctuation">&#125;</span>        all_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        <span class="token keyword">yield</span> item        <span class="token keyword">return</span> all_data    <span class="token keyword">def</span> <span class="token function">closed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">WangyiproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>middlewares.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponse<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">class</span> <span class="token class-name">WangyiproDownloaderMiddleware</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        bro <span class="token operator">=</span> spider<span class="token punctuation">.</span>bro  <span class="token comment"># 获取浏览器对象</span>        <span class="token comment"># url -> request -> response</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url <span class="token keyword">in</span> spider<span class="token punctuation">.</span>models_urls<span class="token punctuation">:</span>            bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            page_text <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source            <span class="token comment"># 五大板块对应的响应对象 针对定位到的这些response进行篡改,实例化一个新的响应对象 ,替代原来的响应对象</span>            new_response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> body<span class="token operator">=</span>page_text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>            <span class="token keyword">return</span> new_response        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 其他请求对应的响应对象</span>            <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WangyiproPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span>LOG_ERROR <span class="token operator">=</span> <span class="token string">'ERROR'</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'wangyiPro.middlewares.WangyiproDownloaderMiddleware'</span><span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'wangyiPro.pipelines.WangyiproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CrawlSpider类"><a href="#CrawlSpider类" class="headerlink" title="CrawlSpider类"></a>CrawlSpider类</h3><ul><li>全站数据爬取的方式<ul><li>基于spider: 手动请求</li><li>基于CrawlSpider</li></ul></li><li>CrawlSpider的使用<ul><li>创建工程</li><li>cd xxx</li><li>scrapy genspider -t crawl  xxx <a href="http://www.xxx.com/">www.xxx.com</a></li></ul></li><li>链接提取器:<ul><li>根据指定规则(allow)进行指定链接提取</li></ul></li><li>规则解析器:<ul><li>将链接提取提取到的链接进行指定规则 (callback) 的解析操作</li></ul></li></ul><hr><p>案例演示</p><ul><li>爬取sun网站中的编号,新闻标题,新闻内容,标号</li></ul><p><code>sun.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> sunPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> SunproItem<span class="token punctuation">,</span>DetailItem<span class="token keyword">class</span> <span class="token class-name">SunSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'sun'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://wz.sun0769.com/political/index/politicsNewest?id=2&amp;page=2'</span><span class="token punctuation">]</span>    link <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id=2&amp;page=\d+'</span><span class="token punctuation">)</span>    <span class="token comment"># link_detail = 'https://wz.sun0769.com/political/politics/index?' + LinkExtractor(allow=r'id=\d+')</span>    link_detail <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id=\d+'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>link_detail<span class="token punctuation">)</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment"># LinkExtractor 链接提取器</span>        <span class="token comment"># allows = (正则) 根据指定规则进行链接提取</span>        <span class="token comment"># follow=True : 将链接提取器继续作用到链接提取器提取到的链接所对应的页面中</span>        <span class="token comment"># 规则解析器 : 将链接提取提取到的链接进行指定规则 (callback) 的解析操作</span>        Rule<span class="token punctuation">(</span>link<span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">(</span>link_detail<span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_detail'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment"># 解析新闻编号、标题</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[3]/ul[2]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            new_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            new_title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[3]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> SunproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_title            item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_num            <span class="token keyword">yield</span> item    <span class="token comment"># 解析新闻内容、编号</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_id <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[2]/div[2]/div[1]/span[4]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[2]/div[2]/div[2]/pre/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>new_content<span class="token punctuation">)</span>        item <span class="token operator">=</span> DetailItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'new_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_id        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_content        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SunproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_num <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DetailItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_id <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SunproPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 判定item类型</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'DetailItem'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'new_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span>LOG_ERROR <span class="token operator">=</span> <span class="token string">'ERROR'</span>DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'sunPro.pipelines.SunproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫之selenium学习</title>
      <link href="/2021-11-19-python-pa-chong-zhong-zhi-selenium-xue-xi.html"/>
      <url>/2021-11-19-python-pa-chong-zhong-zhi-selenium-xue-xi.html</url>
      
        <content type="html"><![CDATA[<h3 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h3><ul><li><code>selenium</code>可以便捷的获取网站中的动态加在的数据</li><li><code>selenium</code>可以便捷的实现模拟登陆</li><li><code>selenium</code>是基于浏览器自动化的一个模块</li></ul><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> selenium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看google浏览器版本号</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在浏览器中输入</span>chrome://version/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>选择合适的版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://chromedriver.storage.googleapis.com/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将下载好的<code>chromedriver.exe</code>放入开发目录中即可</li><li>运行测试</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="案例演示1-："><a href="#案例演示1-：" class="headerlink" title="案例演示1.："></a>案例演示1.：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://scxk.nmpa.gov.cn:81/xk/'</span><span class="token punctuation">)</span><span class="token comment"># 获取浏览器当前页面的页面源码数据</span>page_text <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_sourcetree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="gzlist"]/li'</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>    name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./dl/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例演示2-："><a href="#案例演示2-：" class="headerlink" title="案例演示2.："></a>案例演示2.：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bybro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://lol.qq.com/main.shtml'</span><span class="token punctuation">)</span><span class="token comment"># 获取浏览器当前页面的页面源码数据</span>bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>search_btn<span class="token operator">=</span>bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'J_headSearchBtn'</span><span class="token punctuation">)</span><span class="token comment"># search_btn = bro.find_element_by_id('J_headSearchBtn')</span>search_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>search_input <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J_hoverSearchInput'</span><span class="token punctuation">)</span>search_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'无限火力'</span><span class="token punctuation">)</span>btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J_hoverSearchBtn'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.4399.com'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例演示3"><a href="#案例演示3" class="headerlink" title="案例演示3.:"></a>案例演示3.:</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span><span class="token punctuation">)</span><span class="token comment"># 如果定位的标签在iframe标签中，需如下操作</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span>  <span class="token comment"># 切换浏览器标签的作用域</span>div <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'draggable'</span><span class="token punctuation">)</span><span class="token comment"># 动作链</span>action <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>bro<span class="token punctuation">)</span><span class="token comment"># 点击长按指定的标签</span>action<span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># (x,y) x: 水平 y： 竖直</span>    action<span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># 释放动作链</span>action<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="qq空间自动登录签到"><a href="#qq空间自动登录签到" class="headerlink" title="qq空间自动登录签到"></a>qq空间自动登录签到</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://qzone.qq.com/'</span><span class="token punctuation">)</span><span class="token comment"># 如果定位的标签在iframe标签中，需如下操作</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'login_frame'</span><span class="token punctuation">)</span>  <span class="token comment"># 切换浏览器标签的作用域</span>a_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'switcher_plogin'</span><span class="token punctuation">)</span>a_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>username_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">)</span>password_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>username_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>password_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'login_button'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>qiandao <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'checkin_button'</span><span class="token punctuation">)</span>qiandao<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'checkin_likeTipsFrame'</span><span class="token punctuation">)</span>qiandao_img <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'detail-box'</span><span class="token punctuation">)</span>qiandao_img<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>fabu <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'btn-submit'</span><span class="token punctuation">)</span>fabu<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证码识别并自动登录"><a href="#验证码识别并自动登录" class="headerlink" title="验证码识别并自动登录"></a>验证码识别并自动登录</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 验证码模拟登陆</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">import</span> chaojiying<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://changyan.kuaizhan.com/"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># tanchuangguanbi = bro.find_element(By.CLASS_NAME, ' icon-raw-error ')</span>    tanchuangguanbi <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'icon-raw-error '</span><span class="token punctuation">)</span>    tanchuangguanbi<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'c-button'</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">'aa.png'</span><span class="token punctuation">)</span>    code_img_ele <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="vcode-img"]'</span><span class="token punctuation">)</span>    <span class="token comment"># 获取验证码</span>    <span class="token comment"># 验证码左上角坐标x，y</span>    location <span class="token operator">=</span> code_img_ele<span class="token punctuation">.</span>location    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'location: '</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>    <span class="token comment"># 验证码对应的长宽</span>    size <span class="token operator">=</span> code_img_ele<span class="token punctuation">.</span>size    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    rangle <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token builtin">int</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rangle<span class="token punctuation">)</span>    i <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./aa.png'</span><span class="token punctuation">)</span>    code_img_name <span class="token operator">=</span> <span class="token string">'./code.png'</span>    frame <span class="token operator">=</span> i<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>rangle<span class="token punctuation">)</span>    frame<span class="token punctuation">.</span>save<span class="token punctuation">(</span>code_img_name<span class="token punctuation">)</span>    <span class="token comment"># 解析验证码</span>    chaojiying <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'19858165529'</span><span class="token punctuation">,</span> <span class="token string">'hxl158120'</span><span class="token punctuation">,</span> <span class="token string">'925040'</span><span class="token punctuation">)</span>  <span class="token comment"># 用户中心>>软件ID 生成一个替换 96001</span>    im <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span>    code <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">1004</span><span class="token punctuation">)</span>    code_img <span class="token operator">=</span> code<span class="token punctuation">[</span><span class="token string">'pic_str'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code_img<span class="token punctuation">)</span>  <span class="token comment"># 1902 验证码类型  官方网站>>价格体系 3.4+版 print 后要加()</span>    username_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'normal_login_name'</span><span class="token punctuation">)</span>    username_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'19858165529'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    password_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'normal_login_password'</span><span class="token punctuation">)</span>    password_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'hxl158120'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'normal_login_vcode'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment"># fullXpath 相对路径定位不到</span>    Verification_code <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">'/html/body/div/div/div[4]/div[2]/div[2]/form/div[3]/div/div/div/div/div[1]/input'</span><span class="token punctuation">)</span>    Verification_code<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>code_img<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    Login_btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'login-form-button'</span><span class="token punctuation">)</span>    Login_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Google-无头浏览器"><a href="#Google-无头浏览器" class="headerlink" title="Google 无头浏览器"></a>Google 无头浏览器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 无可视化界面</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>service <span class="token keyword">import</span> Service<span class="token comment"># 规避selenium检测</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions<span class="token comment"># 实现无可视化界面的操作</span>chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span><span class="token comment"># 实现规避检测</span>option <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Service<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>service<span class="token operator">=</span>s<span class="token punctuation">)</span><span class="token comment"># bro = webdriver.Chrome(executable_path='./chromedriver',options=chrome_options)</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">,</span> options<span class="token operator">=</span>option<span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://qzone.qq.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bro<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫模拟登陆和异步爬虫</title>
      <link href="/2021-11-17-python-pa-chong-mo-ni-deng-lu-he-yi-bu-pa-chong.html"/>
      <url>/2021-11-17-python-pa-chong-mo-ni-deng-lu-he-yi-bu-pa-chong.html</url>
      
        <content type="html"><![CDATA[<h3 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h3><ul><li>使用<strong>超级鹰</strong>平台识别验证码的编码流程:<ul><li>将验证码图片进行本地下载</li><li>调用平台提供的示例代码进行图片数据识别</li></ul></li></ul><p>有<strong>验证码</strong>,验证码可以读取到但测试未成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 验证码</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">import</span> chaojiying<span class="token comment"># 封装识别验证码函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    code_img_src <span class="token operator">=</span> <span class="token string">'https://so.gushiwen.cn/'</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="imgCode"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code_img_src<span class="token punctuation">)</span>    code_img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>code_img_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>code_img_data<span class="token punctuation">)</span>    chaojiying <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'19858165529'</span><span class="token punctuation">,</span> <span class="token string">'hxl158120'</span><span class="token punctuation">,</span> <span class="token string">'925040'</span><span class="token punctuation">)</span>  <span class="token comment"># 用户中心>>软件ID 生成一个替换 96001</span>    im <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span>    code <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">1004</span><span class="token punctuation">)</span>    code_img <span class="token operator">=</span> code<span class="token punctuation">[</span><span class="token string">'pic_str'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code_img<span class="token punctuation">)</span>  <span class="token comment"># 1902 验证码类型  官方网站>>价格体系 3.4+版 print 后要加()</span>    <span class="token comment"># 模拟登陆</span>    login_url <span class="token operator">=</span> <span class="token string">"https://so.gushiwen.cn/user/login.aspx?"</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'from'</span><span class="token punctuation">:</span> <span class="token string">'http://so.gushiwen.cn/user/collect.aspx'</span><span class="token punctuation">,</span>        <span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'code'</span><span class="token punctuation">:</span> code_img<span class="token punctuation">,</span>        <span class="token string">'denglu'</span><span class="token punctuation">:</span> <span class="token string">'登录'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    login_page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'changyan.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>login_page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>cookie</code> : 用来让服务端记录客户端的相关状态</li><li>自动处理: <ul><li><code>cookie</code>来源于模拟登陆请求后,由服务端创建</li><li><code>session</code>会话对象:<ul><li>进行请求的发送</li><li>如果请求中产生了<code>cookie</code>,则由<code>cookie</code>会被自动存储/携带在<code>session</code>对象中</li></ul></li></ul></li></ul><p>无<strong>验证码</strong>,模拟登陆并获取用户数据 测试成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 模拟登陆无验证码</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"https://work.shopeebao1688.com/login.html"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    login_url <span class="token operator">=</span> <span class="token string">"https://work.shopeebao1688.com/index/Login/doLogin?username=13668567749&amp;password=yangbiao2021"</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    login_page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    detail_url <span class="token operator">=</span> <span class="token string">"https://work.shopeebao1688.com/main"</span>    <span class="token comment"># 使用携带cookie 的session 进行get请求的发送</span>    detail_page_text <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'xiabao.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>detail_page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><ul><li><p>带路服务器</p></li><li><p>代理的作用:</p><ul><li>突破自身访问限制</li><li>隐藏自身真实IP</li></ul></li><li><p>代理相关网站</p><ul><li>快代理</li></ul></li><li><p>代理<code>ip</code>类型</p><ul><li><code>http</code>:应用到http协议对应的url中</li><li><code>https</code>:应用到http协议对应的url中 </li></ul></li><li><p>代理<code>ip</code>的匿名度</p><ul><li>透明：服务器知道该次请求使用了代理，也知道请求对应的真实ip</li><li>匿名：知道使用了代理，但不知道真实ip</li><li>高匿：不知道使用了代理，跟不知道真实的ip</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 代理服务器  未成功（可能是没找到https的服务器）</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=UTF-8&amp;wd=ip"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span><span class="token punctuation">&#125;</span>page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"HTTP"</span><span class="token punctuation">:</span> <span class="token string">'39.99.149.148'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ip2.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步爬虫之线程池"><a href="#异步爬虫之线程池" class="headerlink" title="异步爬虫之线程池"></a>异步爬虫之线程池</h3><ul><li>线程池处理的是阻塞且耗时的操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 爬取梨视频</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_10"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 所有视频的连接</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        detail_url <span class="token operator">=</span> <span class="token string">'https://www.pearvideo.com/'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        href <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.mp4'</span>        video_id <span class="token operator">=</span> detail_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>            <span class="token punctuation">,</span> <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.pearvideo.com/'</span> <span class="token operator">+</span> href        <span class="token punctuation">&#125;</span>        video_href <span class="token operator">=</span> <span class="token string">'https://www.pearvideo.com/videoStatus.jsp?contId='</span> <span class="token operator">+</span> video_id        video_url <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>video_href<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        video <span class="token operator">=</span> video_url<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>        video <span class="token operator">=</span> video<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>video<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'cont-%s'</span> <span class="token operator">%</span> video_id<span class="token punctuation">)</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>            <span class="token string">'url'</span><span class="token punctuation">:</span> video        <span class="token punctuation">&#125;</span>        urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_video_data</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'正在下载。。。'</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'下载成功'</span><span class="token punctuation">)</span>    <span class="token comment"># 使用线程池对视频数据进行请求</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>get_video_data<span class="token punctuation">,</span> urls<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单线程-异步协程"><a href="#单线程-异步协程" class="headerlink" title="单线程+异步协程"></a>单线程+异步协程</h3><ul><li><code>event_loop</code>:事件循环,相当于一个无限循环,我们可以把一些函数注册到这个事件循环上,当满足某些条件时,函数就会被执行</li><li><code>coroutine</code>: 协程对象,可以把协程对象注册到事件循环中,它会被事件循环调用.可以使用<code>async</code>关键字定义一个方法,这个方法在调用时不会执行,而是返回一个协程对象</li><li><code>task</code>:任务,它是对协程对象的一个封装,包含了任务的各个状态</li><li><code>future</code>: 代表将来执行或还没有执行的任务,实际上和<code>task</code>没有本质区别</li><li><code>async</code>: 定义一个协程</li><li><code>await</code>: 用来挂起阻塞方法的执行</li></ul><h4 id="协程基础案例演示"><a href="#协程基础案例演示" class="headerlink" title="协程基础案例演示"></a>协程基础案例演示</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在请求的url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请求成功"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token comment"># async 修饰的函数,调用之后返回的是一个协程对象</span>c <span class="token operator">=</span> request<span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># # 创建事件循环对象</span><span class="token comment"># loop = asyncio.get_event_loop()</span><span class="token comment"># # 将协程对象注册到loop中,然后启动loop</span><span class="token comment"># loop.run_until_complete(c)</span><span class="token comment"># task使用</span><span class="token comment">#loop = asyncio.get_event_loop()</span><span class="token comment"># 基于loop创建一个task对象</span><span class="token comment"># task = loop.create_task(c)</span><span class="token comment">#</span><span class="token comment"># print(task)</span><span class="token comment"># loop.run_until_complete(task)</span><span class="token comment"># print(task)</span><span class="token comment"># future的使用</span><span class="token comment"># loop = asyncio.get_event_loop()</span><span class="token comment"># task = asyncio.ensure_future(c)</span><span class="token comment"># print(task)</span><span class="token comment"># loop.run_until_complete(task)</span><span class="token comment"># print(task)</span><span class="token keyword">def</span> <span class="token function">callback_func</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 绑定回调</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>task<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>callback_func<span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多任务异步协程"><a href="#多任务异步协程" class="headerlink" title="多任务异步协程"></a>多任务异步协程</h4><ul><li>基础案例演示</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token comment"># time.sleep(2)  6s</span>    <span class="token comment"># 当在asyncio中遇到阻塞操作必须手动挂起</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完毕"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'www.4399.com'</span><span class="token punctuation">,</span>    <span class="token string">'www.ssm.com'</span><span class="token punctuation">]</span>stasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    c <span class="token operator">=</span> request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    stasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将任务列表封装到wait中</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>stasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>进阶案例</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> timeapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/ssm'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_ssm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello ssm"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/shao'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_shao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello shao"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hxl'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_hxl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello hxl"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>threaded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">import</span> aiohttpurls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://127.0.0.1:5000/ssm'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:5000/shao'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:5000/hxl'</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token comment"># headers params/data proxy='http://ip:port'</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            page_text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完毕'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    c <span class="token operator">=</span> get_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将任务列表封装到wait中</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python问题合集</title>
      <link href="/2021-11-16-python-pa-chong-wen-ti-he-ji.html"/>
      <url>/2021-11-16-python-pa-chong-wen-ti-he-ji.html</url>
      
        <content type="html"><![CDATA[<h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通用中文乱码的解决方案</span>img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token comment"># 手动设置相应数据的编码格式</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token comment">#  text -> content</span>response<span class="token punctuation">.</span>text 改成 response<span class="token punctuation">.</span>content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h3><ul><li>解决python爬虫<code>requests.exceptions.SSLError: HTTPSConnectionPool(host=&#39;XXX&#39;, port=443)</code>问题</li></ul><ol><li>安装<code>cryptography</code>、<code>pyOpenSSL</code>、<code>certifi</code>三个模块即可</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> cryptographypip <span class="token function">install</span> pyOpenSSLpip <span class="token function">install</span> certifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>requests库提示警告：<code>InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate ver</code></li></ul><ol><li>加入如下代码即可</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>提取html文件报错<code>lxml.etree.XMLSyntaxError: Opening and ending tag mismatch: meta line 4 and head</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">原因在于html标签未加 <span class="token operator">/</span> 所有的标签最好都用 <span class="token operator">/</span> 来结束<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>TypeError: can only concatenate str (not “list”) to str</code>(列表和字符串的报错解决方法)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 强转即可</span><span class="token builtin">str</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>警告<code>DeprecationWarning: executable_path has been deprecated, please pass in a Service object</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 是使用api过期导致此警告 使用这个（测试案例）即可</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>service <span class="token keyword">import</span> Services <span class="token operator">=</span> Service<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>service<span class="token operator">=</span>s<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>标签定位不到<code>selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用标签的绝对定位</span>bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>l类型错误 :<code>TypeError: ‘ItemMeta‘ object does not support item assignment</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 报错原因：未找到具体item，load出错，item后面需要加()进行实例化。</span>item <span class="token operator">=</span> MeinvproItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>scrapy框架写入数据库中存储数据部分代码报错 <code>redis.exceptions.DataError: Invalid input of type: &#39;dict&#39;. Convert to a byte, string or number first. </code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用旧版本pip install redis==2.10.6，即可解决</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><ul><li>每次打开jupyter提示如下行信息</li></ul><p><img src="https://img-blog.csdnimg.cn/2bad4a8b136c4f35a72dcd06bf0f74b3.png" alt="autopep8"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> autopep8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置代码提示功能</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装nbextensions</span>pip <span class="token function">install</span> jupyter_contrib_nbextensions -i https://pypi.mirrors.ustc.edu.cn/simplejupyter contrib nbextension <span class="token function">install</span> --user-------------------------------------------------------------------------------------------------------------------<span class="token comment"># 安装nbextensions_configurator</span>pip <span class="token function">install</span> --user jupyter_nbextensions_configurator jupyter nbextensions_configurator <span class="token builtin class-name">enable</span> --user<span class="token comment"># 勾选Hinterland启用代码自动补全</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫常用正则表达式</title>
      <link href="/2021-11-16-pa-chong-chang-yong-zheng-ze-biao-da-shi.html"/>
      <url>/2021-11-16-pa-chong-chang-yong-zheng-ze-biao-da-shi.html</url>
      
        <content type="html"><![CDATA[<ul><li>单字符<ul><li><code>.</code> : 除换行以外所有字符</li><li><code>[]</code> : [aoe] [a-w] 匹配集合中任意一个字符</li><li><code>\d</code>：元字符，代表0-9中的任意一个</li><li><code>\D</code> : 代表任意一个非数字字符</li><li><code>\w</code> : 数字、字母、下划线、中文</li><li><code>\W</code> : 非<code>\w</code> </li><li><code>\s</code> : 所有的空白字符,包括空格、制表符、换页符等,等价于<code>\f\n\r\t\v</code></li><li><code>\S</code> : 非空白   </li></ul></li><li>数量修饰<ul><li><code>*</code> : 任意多次   &gt;=0</li><li><code>+</code>: 至少一次    &gt;=1</li><li><code>?</code> : 可有可无   0次或一次</li><li><code>&#123;m&#125;</code> : 固定m次   hello{3,}</li><li><code>&#123;m,&#125;</code> : 至少m次</li><li><code>&#123;m,n&#125;</code> : m-n次</li></ul></li><li>边界<ul><li><code>$</code> : 以某某结尾</li><li><code>^</code> : 以某某开头</li></ul></li><li>分组<ul><li><code>(ab)</code></li></ul></li><li>贪婪模式 : <code>.*</code></li><li>非贪婪(惰性)模式 :<code> .*?</code></li><li><code>re.I</code> : 忽略大小写</li><li><code>re.M</code> : 多行匹配</li><li><code>re.S</code> : 但行匹配</li><li><code>re.sub</code> : (正则表达式,替换内容,字符串)</li></ul><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import rekey &#x3D; &quot;javapython1myslqpython1&quot;print(re.findall(&#39;python1&#39;, key)[1])key &#x3D; &quot;&lt;html&gt;&lt;h1&gt;hello world&lt;h1&gt;&lt;&#x2F;html&gt;&quot;print(re.findall(&#39;&lt;h1&gt;(.*)&lt;h1&gt;&#39;, key))string &#x3D; &quot;I like 170 girl&quot;print(re.findall(&#39;\d&#39;, string))key &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com and https:&#x2F;&#x2F;www.shaoshaossm.github.io&quot;print(re.findall(&#39;https:&#x2F;&#x2F;&#39;, key))key &#x3D; &#39;am@shao.com&#39;print(re.findall(&#39;s.*?\.&#39;, key))key &#x3D; &#39;saas and asa and saaas&#39;print(re.findall(&#39;sa&#123;1,2&#125;s&#39;,key))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫基础</title>
      <link href="/2021-11-14-python-pa-chong.html"/>
      <url>/2021-11-14-python-pa-chong.html</url>
      
        <content type="html"><![CDATA[<h3 id="爬虫基础简介"><a href="#爬虫基础简介" class="headerlink" title="爬虫基础简介"></a>爬虫基础简介</h3><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><ul><li>概念: 服务器和客户端进行数据交互的一种形式</li><li><code>user-Agent</code>: 请求载体的身份表示</li><li>Connection : 请求完毕后,是断开连接还是保持连接 </li><li><code>Content-Type</code> : 服务器相应客户端的数据类型 </li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"># user-Agent ( NetWork-All-Headers )Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="https协议"><a href="#https协议" class="headerlink" title="https协议"></a>https协议</h4><ul><li>概念: 安全的超文本数据传输协议</li><li>普遍采用的加密方式 : 证书密钥加密</li></ul><h3 id="request模块"><a href="#request模块" class="headerlink" title="request模块"></a>request模块</h3><ul><li>作用：模拟浏览器发送请求</li><li>request模块编码流程<ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul></li></ul><ol><li>爬取<code>https://shaoshaossm.github.io/</code> 首页数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://shaoshaossm.github.io/"</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./ssm.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>豆瓣高分电影</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 豆瓣高分电影</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://movie.douban.com/j/search_subjects?"</span>    param <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'movie'</span><span class="token punctuation">,</span>        <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token string">'热门'</span><span class="token punctuation">,</span>        <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token string">'recommend'</span><span class="token punctuation">,</span>        <span class="token string">'page_limit'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span>        <span class="token string">'page_start'</span><span class="token punctuation">:</span> <span class="token string">'0'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 携带参数的</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>param<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    list_data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list_data<span class="token punctuation">)</span>    <span class="token comment"># 持久化存储</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./douban.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>list_data<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'voer!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>药监总局化妆品生产许可</li></ol><ul><li> 百度搜 国家药品监督管理局，点首页化妆品——化妆品查询——化妆品生产许可获证企业 </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 药监总局化妆品生产许可</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    all_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList"</span>    <span class="token comment"># post请求参数处理</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>            <span class="token string">'page'</span><span class="token punctuation">:</span> page<span class="token punctuation">,</span>            <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>            <span class="token string">'productName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'conditionType'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>            <span class="token string">'applyname'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'applysn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># 携带参数的</span>        json_ids <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> dic <span class="token keyword">in</span> json_ids<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    post_url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById"</span>    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token builtin">id</span>        <span class="token punctuation">&#125;</span>        detail_json <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>post_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>detail_json<span class="token punctuation">)</span>        all_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>detail_json<span class="token punctuation">)</span>    <span class="token comment"># 持久化存储</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./allData.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>all_data_list<span class="token punctuation">,</span> fp<span class="token operator">=</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'voer!!!'</span><span class="token punctuation">)</span><span class="token comment"># 若报错多试几次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h3><ul><li><p>爬取页面中指定的内容</p></li><li><p>数据解析分类</p><ul><li>正则</li><li>bs4</li><li><strong>xpath</strong></li></ul></li><li><p>数据解析原理概述:</p><ul><li>进行指定标签的定位</li><li>标签或者标签对应的属性中存储的数据的值进行提取(解析)</li></ul></li><li><p><font color="red">正则表达式</font>爬取糗事百科图片–分页爬取</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 爬取糗事百科图片--分页爬取</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> osrequests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\qiutu'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\qiutu'</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 设置一个通用的url模板</span>    url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%d/"</span>    <span class="token keyword">for</span> pageNum <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>url <span class="token operator">%</span> pageNum<span class="token punctuation">)</span>        <span class="token comment"># 二进制形式的图片数据</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb">.*?&lt;img src="(.*?)" alt.*?&lt;/div>'</span>        img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> img_src_list<span class="token punctuation">:</span>            <span class="token comment"># 拼接出一个完整的图片地址</span>            src <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> src            <span class="token comment"># 请求图片二进制数据</span>            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment"># 生成图片名称</span>            img_name <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment"># 图片存储路路径</span>            imgPath <span class="token operator">=</span> <span class="token string">'E:\\pachongzhuanyongwenjianjia\\qiutu\\'</span> <span class="token operator">+</span> img_name            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">"下载成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>bs4</code>数据解析原理:</p><ul><li>实例化一个<code>BeautifulSoup</code>对象,并且将页面源码数据加载到该对象中</li><li>通过调用<code>BeautifulSoup</code>对象中相关属性或方法进行标签定位和数据提取</li></ul></li><li><p>环境安装</p><ul><li>pip install bs4</li><li>pip install lxml</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 提供数据解析的方法和属性</span>soup<span class="token punctuation">.</span>tagName <span class="token punctuation">:</span> 返回文档中第一次出现的tagName对应的标签soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>     <span class="token operator">-</span><span class="token operator">-</span> find<span class="token punctuation">(</span><span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>等同于soup<span class="token punctuation">.</span>div    <span class="token operator">-</span><span class="token operator">-</span> 属性定位<span class="token punctuation">:</span>        <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">/</span><span class="token builtin">id</span><span class="token operator">/</span>attr<span class="token operator">=</span><span class="token string">'song'</span><span class="token punctuation">)</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>返回符合要求的所有标签<span class="token punctuation">(</span>列表<span class="token punctuation">)</span>select<span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span> select<span class="token punctuation">(</span><span class="token string">'某种选择器 (id,class,标签...选择器)'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>返回的是一个列表    <span class="token operator">-</span><span class="token operator">-</span> 层级选择器<span class="token punctuation">:</span>        <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang > ul > li > a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">></span> 表示一个层级 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 第一个数据        <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang > ul a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">></span> 空格表示多个个层级获取标签之间的文本数据<span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text<span class="token operator">/</span>string<span class="token operator">/</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">-</span> text<span class="token operator">/</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>可以获取标签中所有的文本内容    <span class="token operator">-</span><span class="token operator">-</span> string<span class="token punctuation">:</span> 只可以获取该标签下直系的文本内容获取标签中的属性值<span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>bs4</code>爬取三国演义中所有章节和文章内容</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 爬取三国演义中所有章节和文章内容</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://www.shicimingju.com/book/sanguoyanyi.html"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment"># 实例化BeautifulSoup对象 将页面源码数据加载到该对象中</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment"># 解析章节标题和详情页url</span>    li_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.book-mulu > ul > li'</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./sanguo.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">.</span>string        detail_url <span class="token operator">=</span> <span class="token string">'https://www.shicimingju.com'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token comment"># 对详情页发起请求,解析章节内容</span>        detail_page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token comment"># 解析出详情页中相关的章节内容</span>        detail_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>detail_page_text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        <span class="token comment"># 解析到章节内容</span>        content <span class="token operator">=</span> detail_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'chapter_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">'爬取成功!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>xpath</code> 解析原理<ul><li>实例化一个<code>etree</code>的对象,且需要将被解析的页面源码数据加载到该对象中</li><li>调用<code>etree</code> 对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获</li></ul></li><li>环境安装<ul><li>pin install lxml</li></ul></li><li><code>xpath</code>表达式<ul><li>/:表示的是从根节点开始定位.表示的是一个层级</li><li>//:表示多个层级.可以从任意位置开始定位</li><li>属性定位: //div[@class=’song’] tag[@attrName=”attrValue”]</li><li>索引定位: //div[@class=’song’]/p[3] 索引从1开始</li><li>取文本:<ul><li>/text() 获取的是标签中直系的文本内容</li><li>//text() 标签中非直系文本内容 (所有文本的内容)</li></ul></li><li>取属性<ul><li>/@attrName   ===&gt;img/src</li></ul></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 演示示例</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">)</span>    <span class="token comment">#  r = tree.xpath('/html/body/h1')</span>    <span class="token comment"># r = tree.xpath('//h1')</span>    <span class="token comment"># r = tree.xpath('//div[@class="song"]')</span>    <span class="token comment"># r = tree.xpath('//div')</span>    <span class="token comment"># r = tree.xpath('//div[@class="song"]//li[5]/a/text()')[0]</span>    <span class="token comment"># r = tree.xpath('//li[7]//text()')</span>    <span class="token comment"># r = tree.xpath('//div[@class="song"]//text()')</span>    r <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="song"]/img/@src'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全国城市列表(两种方式)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    all_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="bottom"]/ul/li/a | //div[@class="bottom"]/ul/div[2]/li/a'</span><span class="token punctuation">)</span>    all_city_Names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 解析到热门城市名称</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> all_li_list<span class="token punctuation">:</span>        all_city_Name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        all_city_Names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>all_city_Name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>all_city_Names<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>all_city_Names<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 彼岸图网美女图片 分页爬取</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\bizhimeinv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\bizhimeinv'</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kqiche/index_%d.html"</span>    <span class="token keyword">for</span> pageNum <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>url <span class="token operator">%</span> pageNum<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 手动设置相应数据的编码格式</span>        <span class="token comment"># response.encoding = 'utf-8'</span>        page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text        tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="clearfix"]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            img_src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            img_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>            <span class="token comment"># 通用中文乱码的解决方案</span>            img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> img_src<span class="token punctuation">)</span>            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            imgPath <span class="token operator">=</span> <span class="token string">'E:\\pachongzhuanyongwenjianjia\\bizhimeinv\\'</span> <span class="token operator">+</span> img_name            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> img_src<span class="token punctuation">,</span><span class="token string">"下载成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶</title>
      <link href="/2021-11-06-python-jin-jie.html"/>
      <url>/2021-11-06-python-jin-jie.html</url>
      
        <content type="html"><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在 <code>Python</code> 中可以使用以下两个方法验证：</p><ol><li>在 <strong>标识符</strong> / <strong>数据</strong> 后输入一个 <code>.</code>，然后按下 <code>TAB</code> 键，<code>iPython</code> 会提示该对象能够调用的 <strong>方法列表</strong></li><li>使用内置函数 <code>dir</code> 传入 <strong>标识符</strong> / <strong>数据</strong>，可以查看对象内的 <strong>所有属性及方法</strong></li></ol><p><strong>提示</strong> <code>__方法名__</code> 格式的方法是 <code>Python</code> 提供的 <strong>内置方法 / 属性</strong></p><table><thead><tr><th align="center">序号</th><th align="center">方法名</th><th align="center">类型</th><th>作用</th></tr></thead><tbody><tr><td align="center">01</td><td align="center"><code>__new__</code></td><td align="center">方法</td><td><strong>创建对象</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td align="center">02</td><td align="center"><code>__init__</code></td><td align="center">方法</td><td><strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td align="center">03</td><td align="center"><code>__del__</code></td><td align="center">方法</td><td><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td></tr><tr><td align="center">04</td><td align="center"><code>__str__</code></td><td align="center">方法</td><td>返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td></tr><tr><td align="center">05</td><td align="center"><code>__file__</code></td><td align="center">方法</td><td>返回<strong>文件所在路径</strong></td></tr><tr><td align="center">06</td><td align="center"><code>__name__</code></td><td align="center">方法</td><td>测试模块代码只在<strong>测试情况下运行</strong>,被导入时不会执行!</td></tr></tbody></table><blockquote><p>利用好 <code>dir()</code> 函数，在学习时很多内容就不需要死记硬背了</p></blockquote><h4 id="初始化方法-——同时设置初始值"><a href="#初始化方法-——同时设置初始值" class="headerlink" title="初始化方法 ——同时设置初始值"></a>初始化方法 ——同时设置初始值</h4><p>在开发中，如果希望在 <strong>创建对象的同时，就设置对象的属性</strong>，可以对 <code>__init__</code> 方法进行 <strong>改造</strong></p><ol><li>把希望设置的属性值，定义成 <code>__init__</code> 方法的参数</li><li>在方法内部使用 <code>self.属性 = 形参</code> 接收外部传递的参数</li><li>在创建对象时，使用 <code>类名(属性1, 属性2...)</code> 调用</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始化方法 %s"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>lazy_cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">"大懒猫"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h4><ul><li>在定义方法和属性时,在属性名或者方法名前增加<strong>两个下划线</strong>,定义的就是<strong>私有</strong>属性或方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">def</span> <span class="token function">__scret</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h4><ul><li>类方法就是针对<strong>类对象</strong>定义的方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类方法</span><span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span> 方法名<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 静态方法</span><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> 静态方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>方法写在类中就是封装</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HouseItem</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param name: 家具名称        :param area: 占地面积        """</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>area <span class="token operator">=</span> area    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"[%s] 占地面积 %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token comment"># 1. 创建家具</span>bed <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"席梦思"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>chest <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"衣柜"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>table <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"餐桌"</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bed<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chest<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承-and-多继承"><a href="#继承-and-多继承" class="headerlink" title="继承 and 多继承"></a>继承 and 多继承</h3><ul><li>当<strong>父类</strong>方法不能满足子类需求时,可以对方法进行<strong>重写(override)</strong><ul><li>覆盖父类的方法</li><li>对父类方法进行扩展</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单继承</span><span class="token keyword">class</span> 类名<span class="token punctuation">(</span>父类名<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 多继承</span><span class="token keyword">class</span> 类名<span class="token punctuation">(</span>父类名<span class="token punctuation">,</span>父类名<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>对父类方法进行扩展</p><ul><li>在<strong>子类中重写</strong>父类的方法</li><li>在需要的位置使用<code>super()</code>.父类方法来调用父类方法的执行</li><li>代码其他位置针对子类的需求,编写<strong>子类特有的代码实现</strong></li></ul></li><li><p><code>super()</code>就是<code>super</code>类创建的对象</p></li><li><p>最常使用的场景就是在<strong>重写父类方法</strong>时,调用<strong>在父类中封装的方法实现</strong></p></li><li><p><strong>子类对象</strong>不能在自己的方法的内部,<strong>直接</strong>访问父类的<strong>私有属性和私有方法</strong></p></li><li><p><strong>子类对象</strong>可以通过父类的<strong>公有</strong>方法<strong>间接</strong>访问**私有属性或私有方法 **</p></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>在程序执行时，传入不同的<strong>狗对象</strong>实参，就会产生不同的执行效果</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 蹦跳玩"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 边飞边蹦跳玩"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">game_width_dog</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 与 %s 一起玩耍"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        dog<span class="token punctuation">.</span>game<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span>xiaotianquan <span class="token operator">=</span> XiaoTianDog<span class="token punctuation">(</span><span class="token string">"哮天犬"</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>game_width_dog<span class="token punctuation">(</span>xiaotianquan<span class="token punctuation">)</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>game_width_dog<span class="token punctuation">(</span>wangcai<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">小明 与 哮天犬 一起玩耍哮天犬 边飞边蹦跳玩小明 与 旺财 一起玩耍旺财 蹦跳玩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><ul><li>设计模式<ul><li>设计模式是针对<strong>某一特定问题</strong>的成熟的解决方案</li><li>使用设计模式是为了可重用代码、让代码更容易被人理解、保证代码的可读性</li></ul></li><li>单例设计模式<ul><li>目的–让类创建的对象,在系统中<strong>只有唯一的一个实例</strong></li><li>每一次执行<code>类名()</code>返回的对象、<strong>内存地址是相同的</strong></li></ul></li><li>应用场景:<ul><li> <strong>音乐播放</strong> 对象</li><li> <strong>回收站</strong> 对象</li><li> **打印机 **对象</li></ul></li></ul><blockquote><p>重写new方法的代码非常固定</p></blockquote><ul><li><p>重写 <code>__new__</code>方法一定要<code>return super().__new__(cls)</code></p></li><li><p><code>__new__</code>是一个静态方法,在调用时需要主动传递<code>cls</code>参数</p></li></ul><p>案例演示</p><ul><li>只执行一次初始化</li><li>内存地址是唯一的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> <span class="token boolean">None</span>    init_flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> MusicPlayer<span class="token punctuation">.</span>init_flag<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始化播放器"</span><span class="token punctuation">)</span>        MusicPlayer<span class="token punctuation">.</span>init_flag <span class="token operator">=</span> <span class="token boolean">True</span>player1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span>player2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token comment"># 运行结果</span>初始化播放器<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>MusicPlayer <span class="token builtin">object</span> at <span class="token number">0x0000017824D39A20</span><span class="token operator">></span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>MusicPlayer <span class="token builtin">object</span> at <span class="token number">0x0000017824D39A20</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li><strong>简单捕获异常</strong>语法格式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    尝试执行的代码<span class="token keyword">except</span><span class="token punctuation">:</span>    出现错误的处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>错误类型捕获</strong>语法格式</li><li>当<code>python</code>解释器<strong>抛出异常</strong>时,<strong>最后一行</strong>错误信息的<strong>第一个单词</strong>,就是错误类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> 错误类型<span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> <span class="token punctuation">(</span>错误类型<span class="token number">2</span><span class="token punctuation">,</span>错误类型<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 捕获未知错误</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误 %s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>异常捕获完整</strong>语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> 错误类型<span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> <span class="token punctuation">(</span>错误类型<span class="token number">2</span><span class="token punctuation">,</span>错误类型<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误 %s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 没有异常才会执行的代码</span>    <span class="token keyword">pass</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment"># 必定执行的代码</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>异常传递性</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    demo1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>再开发中，可以在主函数中增加<strong>异常捕获</strong></li><li>在主函数中调用其他函数,只要出现异常,都会传递到主函数的<strong>异常捕获</strong>中</li><li>这样不需要再代码中增加大量的<strong>异常捕获</strong>,保证代码的整洁行.</li></ul></blockquote><ul><li>主动抛出<code>raise</code>异常</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">input_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> pwd    ex <span class="token operator">=</span> Exception<span class="token punctuation">(</span><span class="token string">"密码长度不够"</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> ex<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>使用<code>as</code>指定模块的别名</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> 模块名<span class="token number">1</span> <span class="token keyword">as</span> 模块名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>模块别名应该符合<font color="green">大驼峰</font>命名法</p></blockquote><ul><li>从模块中导入<strong>部分</strong>工具</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> 模块名<span class="token number">1</span> <span class="token keyword">import</span> 工具名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>导入之后可直接使用模块提供的工具 – <font color="green">全局变量、函数、类</font></p><p>如果两个模块存在<strong>同名函数</strong>,那么后导入的模块的函数会<strong>覆盖</strong>先导入的函数</p></blockquote><ul><li>从模块导入所有工具</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> 模块名<span class="token number">1</span> <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>__name</code> 属性兼顾测试和导入</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>__file__</code> 文件所在路径</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> my_package<span class="token keyword">print</span><span class="token punctuation">(</span>my_package<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p><code>__inti__.py</code></p><ul><li>要在外界使用包中的模块,需要在<code>__inti__.py</code>中指定对外界提供的模块列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从 当前目录 导入 模块列表</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 示例</span><span class="token keyword">from</span> <span class="token punctuation">.</span>send <span class="token keyword">import</span> send_message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="制作发布压缩包"><a href="#制作发布压缩包" class="headerlink" title="制作发布压缩包"></a>制作发布压缩包</h3><h4 id="1-创建-setup-py"><a href="#1-创建-setup-py" class="headerlink" title="1) 创建 setup.py"></a>1) 创建 setup.py</h4><ul><li><code>setup.py</code> 的文件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setupsetup<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"hm_message"</span><span class="token punctuation">,</span>  <span class="token comment"># 包名</span>      version<span class="token operator">=</span><span class="token string">"1.0"</span><span class="token punctuation">,</span>  <span class="token comment"># 版本</span>      description<span class="token operator">=</span><span class="token string">"ssm's 发送和接收消息模块"</span><span class="token punctuation">,</span>  <span class="token comment"># 描述信息</span>      long_description<span class="token operator">=</span><span class="token string">"完整的发送和接收消息模块"</span><span class="token punctuation">,</span>  <span class="token comment"># 完整描述信息</span>      author<span class="token operator">=</span><span class="token string">"ssm"</span><span class="token punctuation">,</span>  <span class="token comment"># 作者</span>      author_email<span class="token operator">=</span><span class="token string">"1600767556@qq.com"</span><span class="token punctuation">,</span>  <span class="token comment"># 作者邮箱</span>      url<span class="token operator">=</span><span class="token string">"www.shaoshaossm.github.io"</span><span class="token punctuation">,</span>  <span class="token comment"># 主页</span>      py_modules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"hm_message.send_message"</span><span class="token punctuation">,</span>                  <span class="token string">"hm_message.receive_message"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关字典参数的详细信息，可以参阅官方网站：</p><p><a href="https://docs.python.org/2/distutils/apiref.html">https://docs.python.org/2/distutils/apiref.html</a></p><h4 id="2-构建模块"><a href="#2-构建模块" class="headerlink" title="2) 构建模块"></a>2) 构建模块</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python3 setup.py build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-生成发布压缩包"><a href="#3-生成发布压缩包" class="headerlink" title="3) 生成发布压缩包"></a>3) 生成发布压缩包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python3 setup.py sdist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！</p></blockquote><h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -zxvf hm_message-1.0.tar.gz $ <span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>卸载模块</strong></p><p>直接从安装目录下，把安装模块的 <strong>目录</strong> 删除就可以</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>$ sudo rm <span class="token operator">-</span>r hm_message<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="pip-安装第三方模块"><a href="#pip-安装第三方模块" class="headerlink" title="pip 安装第三方模块"></a><code>pip</code> 安装第三方模块</h4><ul><li><strong>第三方模块</strong> 通常是指由 <strong>知名的第三方团队</strong> <strong>开发的</strong> 并且被 <strong>程序员广泛使用</strong> 的 <code>Python</code> 包 / 模块<ul><li>例如 <code>pygame</code> 就是一套非常成熟的 <strong>游戏开发模块</strong></li></ul></li><li><code>pip</code> 是一个现代的，通用的 <code>Python</code> 包管理工具</li><li>提供了对 <code>Python</code> 包的查找、下载、安装、卸载等功能</li></ul><p>安装和卸载命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将模块安装到 Python 2.x 环境</span>$ <span class="token function">sudo</span> pip <span class="token function">install</span> pygame$ <span class="token function">sudo</span> pip uninstall pygame<span class="token comment"># 将模块安装到 Python 3.x 环境</span>$ <span class="token function">sudo</span> pip3 <span class="token function">install</span> pygame$ <span class="token function">sudo</span> pip3 uninstall pygame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在-Mac-下安装-iPython"><a href="#在-Mac-下安装-iPython" class="headerlink" title="在 Mac 下安装 iPython"></a>在 <code>Mac</code> 下安装 <code>iPython</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> pip <span class="token function">install</span> ipython<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在-Linux-下安装-iPython"><a href="#在-Linux-下安装-iPython" class="headerlink" title="在 Linux 下安装 iPython"></a>在 <code>Linux</code> 下安装 <code>iPython</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipython$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipython3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><h3 id="操作文件的函数-方法"><a href="#操作文件的函数-方法" class="headerlink" title="操作文件的函数/方法"></a>操作文件的函数/方法</h3><ul><li>在 <code>Python</code> 中要操作文件需要记住 1 个函数和 3 个方法</li></ul><table><thead><tr><th>序号</th><th>函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>open</td><td>打开文件，并且返回文件操作对象</td></tr><tr><td>02</td><td>read</td><td>将文件内容读取到内存</td></tr><tr><td>03</td><td>write</td><td>将指定内容写入文件</td></tr><tr><td>04</td><td>close</td><td>关闭文件</td></tr></tbody></table><ul><li><code>open</code> 函数负责打开文件，并且返回文件对象</li><li><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</li></ul><h3 id="read-方法-——-读取文件"><a href="#read-方法-——-读取文件" class="headerlink" title="read 方法 —— 读取文件"></a>read 方法 —— 读取文件</h3><ul><li><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写）<ul><li>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong></li><li>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></li></ul></li><li><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></li><li><code>close</code> 方法负责 <strong>关闭文件</strong><ul><li>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></li></ul></li><li><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开 - 文件名需要注意大小写</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span><span class="token comment"># 2. 读取</span>text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 3. 关闭</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打开文件的方式"><a href="#打开文件的方式" class="headerlink" title="打开文件的方式"></a>打开文件的方式</h3><ul><li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li></ul><p>语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"文件名"</span><span class="token punctuation">,</span> <span class="token string">"访问方式"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">访问方式</th><th>说明</th></tr></thead><tbody><tr><td align="center">r</td><td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td></tr><tr><td align="center">w</td><td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td align="center">a</td><td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr><tr><td align="center">r+</td><td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td></tr><tr><td align="center">w+</td><td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td align="center">a+</td><td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr></tbody></table><ul><li>写入文件示例</li><li>若文件中有中文需加入<code>encoding=&#39;utf-8&#39;</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"hello python！\n"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"今天天气真好"</span><span class="token punctuation">)</span><span class="token comment"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>readline</code> 方法</p><ul><li><code>readline</code> 方法可以一次读取一行内容</li><li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li></ul><p><strong>读取大文件的正确姿势</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开文件</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 读取一行内容</span>    text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 判断是否读到内容</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> text<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token comment"># 每读取一行的末尾已经有了一个 `\n`</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># 关闭文件</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><h4 id="小文件复制"><a href="#小文件复制" class="headerlink" title="小文件复制"></a>小文件复制</h4><ul><li>打开一个已有文件，读取完整内容，并写入到另外一个文件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件</span>file_read <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span>file_write <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README[复件]"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token comment"># 2. 读取并写入文件</span>text <span class="token operator">=</span> file_read<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>file_read<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="大文件复制"><a href="#大文件复制" class="headerlink" title="大文件复制"></a>大文件复制</h4><ul><li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件</span>file_read <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span>file_write <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README[复件]"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token comment"># 2. 读取并写入文件</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 每次读取一行</span>    text <span class="token operator">=</span> file_read<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 判断是否读取到内容</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> text<span class="token punctuation">:</span>        <span class="token keyword">break</span>    file_write<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>file_read<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件-目录操作"><a href="#文件-目录操作" class="headerlink" title="文件/目录操作"></a>文件/目录操作</h3><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入前提</span><span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>rename</td><td>重命名文件</td><td><code>os.rename(源文件名, 目标文件名)</code></td></tr><tr><td>02</td><td>remove</td><td>删除文件</td><td><code>os.remove(文件名)</code></td></tr></tbody></table><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>listdir</td><td>目录列表</td><td><code>os.listdir(目录名)</code></td></tr><tr><td>02</td><td>mkdir</td><td>创建目录</td><td><code>os.mkdir(目录名)</code></td></tr><tr><td>03</td><td>rmdir</td><td>删除目录</td><td><code>os.rmdir(目录名)</code></td></tr><tr><td>04</td><td>getcwd</td><td>获取当前目录</td><td><code>os.getcwd()</code></td></tr><tr><td>05</td><td>chdir</td><td>修改工作目录</td><td><code>os.chdir(目标目录)</code></td></tr><tr><td>06</td><td>path.isdir</td><td>判断是否是文件</td><td><code>os.path.isdir(文件路径)</code></td></tr></tbody></table><blockquote><p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p></blockquote><p><code>eva()</code> : 将<strong>字符串</strong>当成<strong>有效的表达式</strong>来求值，并<strong>返回计算结果</strong> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入算术题："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2021-11-02-python-ji-chu.html"/>
      <url>/2021-11-02-python-ji-chu.html</url>
      
        <content type="html"><![CDATA[<h3 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 向控制台输出内容结束后,不换行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># 自带换行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">%</span>d 以十进制输出数字<span class="token operator">%</span>x 以十六进制输出数字 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li><code>List</code>（列表） 用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔 也叫作数组<strong>数组</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">]</span><span class="token comment"># API</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> name_list<span class="token punctuation">.</span>name_list<span class="token punctuation">.</span>append   name_list<span class="token punctuation">.</span>count    name_list<span class="token punctuation">.</span>insert   name_list<span class="token punctuation">.</span>reversename_list<span class="token punctuation">.</span>clear    name_list<span class="token punctuation">.</span>extend   name_list<span class="token punctuation">.</span>pop      name_list<span class="token punctuation">.</span>sortname_list<span class="token punctuation">.</span>copy     name_list<span class="token punctuation">.</span>index    name_list<span class="token punctuation">.</span>remove <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><ul><li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1.75</span><span class="token punctuation">)</span>info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 元组中 只包含一个元素时，需要在元素后面添加逗号</span>info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>  <span class="token comment"># 不加,类型为int</span><span class="token comment"># API</span>info<span class="token punctuation">.</span>count  info<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h4><ul><li>使用 <code>list</code> 函数可以把元组转换成列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span>元组<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 <code>tuple</code> 函数可以把列表转换成元组</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span><span class="token punctuation">(</span>列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>len</code>函数可以计算元组、列表等长度</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># API</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xiaoming<span class="token punctuation">.</span>xiaoming<span class="token punctuation">.</span>clear       xiaoming<span class="token punctuation">.</span>items       xiaoming<span class="token punctuation">.</span>setdefaultxiaoming<span class="token punctuation">.</span>copy        xiaoming<span class="token punctuation">.</span>keys        xiaoming<span class="token punctuation">.</span>updatexiaoming<span class="token punctuation">.</span>fromkeys    xiaoming<span class="token punctuation">.</span>pop         xiaoming<span class="token punctuation">.</span>valuesxiaoming<span class="token punctuation">.</span>get         xiaoming<span class="token punctuation">.</span>popitem    <span class="token comment"># 字典的遍历</span><span class="token keyword">for</span> k <span class="token keyword">in</span> xiaoming<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s - %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> xiaoming<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字典与列表组合使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">card <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小胡"</span><span class="token punctuation">,</span>         <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小张"</span><span class="token punctuation">,</span>         <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">for</span> ren <span class="token keyword">in</span> card<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ren<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li></ul><h4 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h4 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h4 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h4 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h4 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h4 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h3 id="字符串的切片"><a href="#字符串的切片" class="headerlink" title="字符串的切片"></a>字符串的切片</h3><ul><li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li><li>字符串[开始索引:结束索引:步长]</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/00cdef8c52504340befc0849cbed95df.png" alt="字符串索引"></p><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><h4 id="索引的顺序和倒序"><a href="#索引的顺序和倒序" class="headerlink" title="索引的顺序和倒序"></a>索引的顺序和倒序</h4><ul><li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li><li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul><li>最右边的索引值是 <strong>-1</strong>，依次递减</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_str <span class="token operator">=</span> <span class="token string">"0123456789"</span><span class="token comment"># 1. 截取从 2 ~ 5 位置 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 2. 截取从 2 ~ `末尾` 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 3. 截取从 `开始` ~ 5 位置 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 4. 截取完整的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 5. 从开始位置，每隔一个字符截取字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 6. 从索引 1 开始，每隔一个取一个</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 倒序切片</span><span class="token comment"># -1 表示倒数第一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 7. 截取从 2 ~ `末尾 - 1` 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 8. 截取字符串末尾两个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 9. 字符串的逆序（面试题）</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h3><p>Python 包含了以下内置函数：</p><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>cmp(item1, item2)</td><td>比较两个值，-1 小于/0 相等/1 大于</td><td>Python 3.x 取消了 cmp 函数</td></tr><tr><td>id(item)</td><td>变量中保存数据所在的 <strong>内存地址</strong></td><td></td></tr><tr><td>hash(item)</td><td>经hash算法后返回一个整数</td><td>接收一个不可变类型作为参数</td></tr><tr><td>global(item)</td><td>在函数中修改全局变量</td><td></td></tr></tbody></table><p><strong>注意</strong></p><ul><li><p><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</p></li><li><p>如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong></p><ul><li>变量 <strong>不再</strong> 对之前的数据引用</li><li>变量 <strong>改为</strong> 对新赋值的数据引用</li></ul></li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><table><thead><tr><th align="center">描述</th><th>Python 表达式</th><th>结果</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="center">切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th align="center">运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="center">+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td align="center">*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td align="center">in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">&gt; &gt;= == &lt; &lt;=</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li><li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td><td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td><td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td></tr></tbody></table><p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p><h3 id="完整的-for-循环语法"><a href="#完整的-for-循环语法" class="headerlink" title="完整的 for 循环语法"></a>完整的 for 循环语法</h3><ul><li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 集合<span class="token punctuation">:</span>        循环体代码<span class="token keyword">else</span><span class="token punctuation">:</span>    没有通过 <span class="token keyword">break</span> 退出循环，循环结束后，会执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>在 <strong>迭代遍历</strong> 嵌套的数据类型时，例如 <strong>一个列表包含了多个字典</strong></li><li>需求：要判断 某一个字典中 是否存在 指定的 值 <ul><li>如果 <strong>存在</strong>，提示并且退出循环</li><li>如果 <strong>不存在</strong>，在 <strong>循环整体结束</strong> 后，希望 <strong>得到一个统一的提示</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"阿土"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">75.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小美"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.6</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">45.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>find_name <span class="token operator">=</span> <span class="token string">"阿土"</span><span class="token keyword">for</span> stu_dict <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu_dict<span class="token punctuation">)</span>    <span class="token comment"># 判断当前遍历的字典中姓名是否为find_name</span>    <span class="token keyword">if</span> stu_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> find_name<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到了"</span><span class="token punctuation">)</span>        <span class="token comment"># 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多值参数（知道）"><a href="#多值参数（知道）" class="headerlink" title="多值参数（知道）"></a>多值参数（知道）</h3><ul><li>有时可能需要 <strong>一个函数</strong> 能够处理的参数 <strong>个数</strong> 是不确定的，这个时候，就可以使用 <strong>多值参数</strong></li><li><code>python</code> 中有 <strong>两种</strong> 多值参数：<ul><li>参数名前增加 <strong>一个</strong> <code>*</code> 可以接收 <strong>元组</strong></li><li>参数名前增加 <strong>两个</strong> <code>*</code> 可以接收 <strong>字典</strong></li></ul></li><li>一般在给多值参数命名时，<strong>习惯</strong>使用以下两个名字<ul><li><code>*args</code> —— 存放 <strong>元组</strong> 参数，前面有一个 <code>*</code></li><li><code>**kwargs</code> —— 存放 <strong>字典</strong> 参数，前面有两个 <code>*</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元组和字典的拆包（知道）"><a href="#元组和字典的拆包（知道）" class="headerlink" title="元组和字典的拆包（知道）"></a>元组和字典的拆包（知道）</h4><ul><li>在调用带有多值参数的函数时，如果希望：<ul><li>将一个 <strong>元组变量</strong>，直接传递给 <code>args</code></li><li>将一个 <strong>字典变量</strong>，直接传递给 <code>kwargs</code></li></ul></li><li>就可以使用 <strong>拆包</strong>，简化参数的传递，<strong>拆包</strong> 的方式是：<ul><li>在 <strong>元组变量前</strong>，增加 <strong>一个</strong> <code>*</code></li><li>在 <strong>字典变量前</strong>，增加 <strong>两个</strong> <code>*</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span>gl_nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>gl_xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token comment"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span><span class="token comment"># demo(gl_nums, gl_xiaoming)</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>gl_nums<span class="token punctuation">,</span> <span class="token operator">**</span>gl_xiaoming<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li>返回值如果有多个并需要单独处理变量的话,可以使用多个变量来接收</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a11 <span class="token operator">=</span> <span class="token number">1031</span>    a22 <span class="token operator">=</span> <span class="token number">11</span>    <span class="token keyword">return</span> a11<span class="token punctuation">,</span> a22s<span class="token punctuation">,</span> d <span class="token operator">=</span> measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>交换数字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">6</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token comment"># 解法一</span>c <span class="token operator">=</span> aa <span class="token operator">=</span> b b <span class="token operator">=</span> c<span class="token comment"># 解法二</span>a <span class="token operator">=</span> a <span class="token operator">+</span> bb <span class="token operator">=</span> a <span class="token operator">-</span> ba <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token comment"># 解法三 元祖()可以省略</span>a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>a <span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果传递的参数是<strong>不可变类型</strong>,在函数内部,使用<font color="red">方法</font>修改了数据的内容,<strong>不会影响到外部的数据</strong></li><li>如果传递的参数是<strong>可变类型</strong>,在函数内部,使用<font color="red">方法</font>修改了数据的内容,<strong>同样会影响到外部的数据</strong></li><li>列表变量使用 += 不会做相加在赋值的操作,本质上是调用列表的 extend 方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token comment"># 运行结果</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在参数后使用<strong>赋值语句</strong>,可以<strong>指定参数的缺省值</strong></li><li>必须保证带有默认值的缺省参数在参数列表的<strong>末尾</strong></li><li>在调用函数时,如果有<strong>多个缺省参数,需要指定参数名=</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num_list <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多值参数案例-——-计算任意多个数字的和"><a href="#多值参数案例-——-计算任意多个数字的和" class="headerlink" title="多值参数案例 —— 计算任意多个数字的和"></a>多值参数案例 —— 计算任意多个数字的和</h4><ol><li>定义一个函数 <code>sum_numbers</code>，可以接收的 <strong>任意多个整数</strong></li><li>功能要求：将传递的 <strong>所有数字累加</strong> 并且返回累加结果</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 遍历 args 元组顺序求和</span><span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>    num <span class="token operator">+=</span> n<span class="token keyword">return</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>sum_numbers<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h3><ul><li><code>pass</code> 表示一个占位符，能够保证程序代码结构正确，一般用在开发程序时，不希望立刻编写分支内部的代码 </li></ul><h3 id="LINUX-上的特殊符号"><a href="#LINUX-上的特殊符号" class="headerlink" title="LINUX 上的特殊符号"></a>LINUX 上的特殊符号</h3><ul><li><code>Shebang</code> 符号(<code>#!</code>)</li></ul><ul><li><code>#!</code>这个符号叫做 <code>Shebang</code> 或者 <code>Sha-bang</code></li><li><code>Shebang</code> 通常在 <code>Unix</code> 系统脚本的中 <strong>第一行开头</strong> 使用</li><li>指明 <strong>执行这个脚本文件</strong> 的 <strong>解释程序</strong></li></ul><h4 id="使用-Shebang-的步骤"><a href="#使用-Shebang-的步骤" class="headerlink" title="使用 Shebang 的步骤"></a>使用 Shebang 的步骤</h4><ul><li><ol><li>使用 <code>which</code> 查询 <code>python3</code> 解释器所在路径</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">which</span> python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>修改要运行的 <strong>主 python 文件</strong>，在第一行增加以下内容(文件路径)</li></ol></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>修改 <strong>主 python 文件</strong> 的文件权限，增加执行权限</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> +x cards_main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="4"><li>在需要时执行程序即可</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./cards_main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>函数的文档注释 Ctrl + Q 在函数定义的下方写注释</li></ul><p><img src="https://img-blog.csdnimg.cn/c9e6eaad37c940ffa5fa6d4a47a78e3d.png" alt="Ctrl+Q"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令汇总</title>
      <link href="/2021-10-21-linux-chang-yong-ming-ling-hui-zong.html"/>
      <url>/2021-10-21-linux-chang-yong-ming-ling-hui-zong.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-文件和目录"><a href="#1-文件和目录" class="headerlink" title="1.文件和目录"></a>1.文件和目录</h3><ul><li>cd命令，用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home     进入 <span class="token string">'/ home'</span> 目录<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>            返回上一级目录<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>         返回上两级目录<span class="token builtin class-name">cd</span>               进入个人的主目录<span class="token builtin class-name">cd</span> ~user1    进入个人的主目录<span class="token builtin class-name">cd</span> -             返回上次所在的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pwd命令，显示工作路径</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root ~<span class="token punctuation">]</span><span class="token comment"># pwd</span>/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ls命令，查看文件与目录的命令，list之意</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> 查看目录中的文件<span class="token function">ls</span> -l 显示文件和目录的详细资料<span class="token function">ls</span> -i 显示文件id和目录的详细资料<span class="token function">ls</span> -a 列出全部文件，包含隐藏文件<span class="token function">ls</span> -R 连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来<span class="token function">ls</span> <span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span> 显示包含数字的文件名和目录名<span class="token function">ls</span> *.txt 通配符*匹配任意个字符<span class="token function">ls</span> ??.txt 通配符?匹配单个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>cp命令，用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-a ：将文件的特性一起复制-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行-r ：递归持续复制，用于目录的复制行为 //经常使用递归复制-u ：目标文件与源文件有差异时才会复制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mv命令，用于移动文件、目录或更名，move之意</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖-i ：若目标文件已经存在，就会询问是否覆盖-u ：若目标文件已经存在，且比目标文件新，才会更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>rm命令，用于删除文件或目录，remove之意</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息-i ：互动模式，在删除前会询问用户是否操作-r ：递归删除，最常用于目录删除，它是一个非常危险的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>touch命令，用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> <span class="token punctuation">[</span>-acfm<span class="token punctuation">]</span><span class="token punctuation">[</span>-d<span class="token operator">&lt;</span>日期时间<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>-r<span class="token operator">&lt;</span>参考文件或目录<span class="token operator">></span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-t<span class="token operator">&lt;</span>日期时间<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>--help<span class="token punctuation">]</span><span class="token punctuation">[</span>--version<span class="token punctuation">]</span><span class="token punctuation">[</span>文件或目录…<span class="token punctuation">]</span>-a 改变档案的读取时间记录。-m 改变档案的修改时间记录。-c 假如目的档案不存在，不会建立新的档案。与 --no-create 的效果一样。-f 不使用，是为了与其他 unix 系统的相容性而保留。-r 使用参考档的时间记录，与 --file 的效果一样。-d 设定时间与日期，可以使用各种不同的格式。-t 设定档案的时间记录，格式与 <span class="token function">date</span> 指令相同。--no-create 不会建立新档案。--help 列出指令格式。--version 列出版本讯息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2.查看文件内容"></a>2.查看文件内容</h3><ul><li>cat命令，用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file1 从第一个字节开始正向查看文件的内容<span class="token function">tac</span> file1 从最后一行开始反向查看一个文件的内容<span class="token function">cat</span> -n file1 标示文件的行数<span class="token function">cat</span> -b file1 标示文件的行数 去除空行<span class="token function">more</span> file1 分页查看一个长文件的内容<span class="token function">head</span> -n <span class="token number">2</span> file1 查看一个文件的前两行<span class="token function">tail</span> -n <span class="token number">2</span> file1 查看一个文件的最后两行<span class="token function">tail</span> -n +1000 file1  从1000行开始显示，显示1000行以后的cat filename <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token number">3000</span> <span class="token operator">|</span> <span class="token function">tail</span> -n +1000  显示1000行到3000行cat filename <span class="token operator">|</span> <span class="token function">tail</span> -n +3000 <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token number">1000</span>  从第3000行开始，显示1000<span class="token punctuation">(</span>即显示3000~3999行<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-文件搜索"><a href="#3-文件搜索" class="headerlink" title="3.文件搜索"></a>3.文件搜索</h3><ul><li>find命令，用来查找系统的</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name file1 从 <span class="token string">'/'</span> 开始进入根文件系统搜索文件和目录<span class="token function">find</span> / -name file1 -a  -type f 从 <span class="token string">'/'</span> 开始进入根文件系统搜索文件和目录并且根据类型搜索文件<span class="token function">find</span> / -name <span class="token string">'a*'</span> -o  -name <span class="token string">'12*'</span> 从 <span class="token string">'/'</span> 开始进入根文件系统搜索a开头的文件或者12开头的文件<span class="token function">find</span> / -iname <span class="token string">'aa'</span> 从 <span class="token string">'/'</span> 开始进入根文件系统搜索名称为aa的文件并忽略大小写<span class="token function">find</span> / -user user1 搜索属于用户 <span class="token string">'user1'</span> 的文件和目录<span class="token function">find</span> / -inum <span class="token number">12345</span> 从 <span class="token string">'/'</span> 开始进入根文件系统搜索id为12345的文件<span class="token function">find</span> /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<span class="token function">find</span> /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件<span class="token function">find</span> /usr/bin -type f -mmin -10 搜索在10分钟内被创建或者修改过的文件<span class="token function">find</span> /usr/bin -type d -mmin +10 搜索在10分钟前被创建或者修改过的文件夹<span class="token function">find</span> /usr/bin -type l -mmin <span class="token number">10</span> 搜索在10分钟的时候被创建或者修改过的软连接<span class="token function">whereis</span> <span class="token function">halt</span> 显示一个二进制文件、源码或man的位置<span class="token function">which</span> <span class="token function">halt</span> 显示一个二进制文件或可执行文件的完整路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除大于50M的文件：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /var/mail/ -size +50M -exec <span class="token function">rm</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> ＼<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>搜索大于100M(100 X 2 X 1024 = 204800)的文件(2块)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fin /home -size +204800<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h4><ul><li>即创建文件的快捷方式</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ln</span> aa a_link<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#4-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="4.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>4.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><ul><li>chmod命令，改变文件/文件夹权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -lh 显示权限<span class="token function">chmod</span> ugo+rwx directory1 设置目录的所有人<span class="token punctuation">(</span>u<span class="token punctuation">)</span>、群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>以及其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>以读（r，4 ）、写<span class="token punctuation">(</span>w，2<span class="token punctuation">)</span>和执行<span class="token punctuation">(</span>x，1<span class="token punctuation">)</span>的权限 <span class="token function">chmod</span> go-rwx directory1  删除群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>与其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>对目录的读写执行权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>chown命令，改变文件的所有者</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> user1 file1 改变一个文件的所有人属性<span class="token function">chown</span> -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<span class="token function">chown</span> user1:group1 file1 改变一个文件的所有人和群组属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>11.chgrp命令，改变文件所属用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chgrp</span> group1 file1 改变文件的群组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-文本处理"><a href="#5-文本处理" class="headerlink" title="5.文本处理"></a>5.文本处理</h3><ol><li>grep命令，分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> Aug /var/log/messages  在文件 <span class="token string">'/var/log/messages'</span>中查找关键词<span class="token string">"Aug"</span><span class="token function">grep</span> -v Aug /var/log/messages  在文件 <span class="token string">'/var/log/messages'</span>中查找非关键词<span class="token string">"Aug"</span><span class="token function">grep</span> s$  /var/log/messages  在文件 <span class="token string">'/var/log/messages'</span>中以<span class="token string">"s"</span>结尾的<span class="token function">grep</span> ^Aug /var/log/messages 在文件 <span class="token string">'/var/log/messages'</span>中查找以<span class="token string">"Aug"</span>开始的词汇<span class="token function">grep</span> <span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>  /var/log/messages 选择 <span class="token string">'/var/log/messages'</span> 文件中所有包含数字的行<span class="token function">grep</span> Aug -R /var/log/* 在目录 <span class="token string">'/var/log'</span> 及随后的目录中搜索字符串<span class="token string">"Aug"</span><span class="token function">sed</span> <span class="token string">'s/stringa1/stringa2/g'</span> example.txt 将example.txt文件中的 <span class="token string">"string1"</span> 替换成 <span class="token string">"string2"</span><span class="token function">sed</span> <span class="token string">'/^$/d'</span> example.txt 从example.txt文件中删除所有空白行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>paste命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">paste</span> file1 file2 合并两个文件或两栏的内容<span class="token function">paste</span> -d <span class="token string">'+'</span> file1 file2 合并两个文件或两栏的内容，中间用<span class="token string">"+"</span>区分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>sort命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sort</span> file1 file2 排序两个文件的内容<span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> 取出两个文件的并集<span class="token punctuation">(</span>重复的行只保留一份<span class="token punctuation">)</span><span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -u 删除交集，留下其他的行<span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -d 取出两个文件的交集<span class="token punctuation">(</span>只留下同时存在于两个文件中的文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>comm命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">comm</span> -1 file1 file2 比较两个文件的内容只删除<span class="token string">'file1'</span> 所包含的内容 <span class="token function">comm</span> -2 file1 file2 比较两个文件的内容只删除<span class="token string">'file2'</span> 所包含的内容 <span class="token function">comm</span> -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-打包和压缩文件"><a href="#6-打包和压缩文件" class="headerlink" title="6.打包和压缩文件"></a>6.打包和压缩文件</h3><ol><li>tar命令，对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-c ：新建打包文件-t ：查看打包文件的内容含有哪些文件名-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中-j ：通过bzip2的支持进行压缩/解压缩-z ：通过gzip的支持进行压缩/解压缩-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来-f filename ：filename为要处理的文件-C <span class="token function">dir</span> ：指定压缩/解压缩的目录dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称 查询：tar -jtv -f filename.tar.bz2 解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bunzip2 file1.bz2 解压一个叫做 <span class="token string">'file1.bz2'</span>的文件<span class="token function">bzip2</span> file1 压缩一个叫做 <span class="token string">'file1'</span> 的文件gunzip file1.gz 解压一个叫做 <span class="token string">'file1.gz'</span>的文件<span class="token function">gzip</span> file1 压缩一个叫做 <span class="token string">'file1'</span>的文件<span class="token function">gzip</span> -9 file1 最大程度压缩<span class="token function">rar</span> a file1.rar test_file 创建一个叫做 <span class="token string">'file1.rar'</span> 的包<span class="token function">rar</span> a file1.rar file1 file2 dir1 同时压缩 <span class="token string">'file1'</span>, <span class="token string">'file2'</span> 以及目录 <span class="token string">'dir1'</span> <span class="token function">rar</span> x file1.rar 解压rar包<span class="token function">zip</span> file1.zip file1 创建一个zip格式的压缩包<span class="token function">unzip</span> file1.zip 解压一个zip格式压缩包<span class="token function">zip</span> -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-系统和关机（关机、重启和登出）"><a href="#7-系统和关机（关机、重启和登出）" class="headerlink" title="7.系统和关机（关机、重启和登出）"></a>7.系统和关机（关机、重启和登出）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">shutdown</span> -h now 关闭系统<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>init <span class="token number">0</span> 关闭系统<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>telinit <span class="token number">0</span> 关闭系统<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">shutdown</span> -h hours:minutes <span class="token operator">&amp;</span> 按预定时间关闭系统<span class="token function">shutdown</span> -c 取消按预定时间关闭系统<span class="token function">shutdown</span> -r now 重启<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">reboot</span> 重启<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token builtin class-name">logout</span> 注销<span class="token function">time</span> 测算一个命令（即程序）的执行时间 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-进程相关的命令"><a href="#8-进程相关的命令" class="headerlink" title="8.进程相关的命令"></a>8.进程相关的命令</h3><ul><li><p>jps命令，显示当前系统的java进程情况，及其id号</p></li><li><p>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。</p></li><li><p>ps命令，用于将某个时间点的进程运行情况选取下来并输出，process之意</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-A ：所有的进程均显示出来-a ：不与terminal有关的所有进程-u ：有效用户的相关进程-x ：一般与a参数一起使用，可列出较完整的信息-l ：较长，较详细地将PID的信息列出<span class="token function">ps</span> aux <span class="token comment"># 查看系统所有的进程数据</span><span class="token function">ps</span> ax <span class="token comment"># 查看不与terminal有关的所有进程</span><span class="token function">ps</span> -lA <span class="token comment"># 查看系统所有的进程数据</span><span class="token function">ps</span> axjf <span class="token comment"># 查看连同一部分进程树状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>kill命令,用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用</li></ul><p> 命令格式 : kill [命令参数] [进程id]</p><p>命令参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称-a  当处理当前进程时，不限制命令名和进程号的对应关系-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号-s  指定发送信号-u  指定用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例1：列出所有信号名称 命令：kill -l 输出： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l</span> <span class="token number">1</span><span class="token punctuation">)</span> SIGHUP       <span class="token number">2</span><span class="token punctuation">)</span> SIGINT       <span class="token number">3</span><span class="token punctuation">)</span> SIGQUIT      <span class="token number">4</span><span class="token punctuation">)</span> SIGILL <span class="token number">5</span><span class="token punctuation">)</span> SIGTRAP      <span class="token number">6</span><span class="token punctuation">)</span> SIGABRT      <span class="token number">7</span><span class="token punctuation">)</span> SIGBUS       <span class="token number">8</span><span class="token punctuation">)</span> SIGFPE <span class="token number">9</span><span class="token punctuation">)</span> SIGKILL     <span class="token number">10</span><span class="token punctuation">)</span> SIGUSR1     <span class="token number">11</span><span class="token punctuation">)</span> SIGSEGV     <span class="token number">12</span><span class="token punctuation">)</span> SIGUSR2<span class="token number">13</span><span class="token punctuation">)</span> SIGPIPE     <span class="token number">14</span><span class="token punctuation">)</span> SIGALRM     <span class="token number">15</span><span class="token punctuation">)</span> SIGTERM     <span class="token number">16</span><span class="token punctuation">)</span> SIGSTKFLT<span class="token number">17</span><span class="token punctuation">)</span> SIGCHLD     <span class="token number">18</span><span class="token punctuation">)</span> SIGCONT     <span class="token number">19</span><span class="token punctuation">)</span> SIGSTOP     <span class="token number">20</span><span class="token punctuation">)</span> SIGTSTP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明:  只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。  下面是常用的信号： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HUP    <span class="token number">1</span>    终端断线INT     <span class="token number">2</span>    中断（同 Ctrl + C）QUIT    <span class="token number">3</span>    退出（同 Ctrl + <span class="token punctuation">\</span>）<span class="token environment constant">TERM</span>   <span class="token number">15</span>    终止KILL    <span class="token number">9</span>    强制终止CONT   <span class="token number">18</span>    继续（与STOP相反， fg/bg命令）STOP    <span class="token number">19</span>    暂停（同 Ctrl + Z）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例2：得到指定信号的数值 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l KILL</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l SIGKILL</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l TERM</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l SIGTERM</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例3：先用ps查找进程，然后用kill杀掉 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令：kill <span class="token number">3268</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep vim </span>root      <span class="token number">3268</span>  <span class="token number">2884</span>  <span class="token number">0</span> <span class="token number">16</span>:21 pts/1    00:00:00 <span class="token function">vim</span> install.logroot      <span class="token number">3370</span>  <span class="token number">2822</span>  <span class="token number">0</span> <span class="token number">16</span>:21 pts/0    00:00:00 <span class="token function">grep</span> <span class="token function">vim</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill 3268 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例4：彻底杀死进程 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令：kill –9 <span class="token number">3268</span>   // -9 强制杀掉进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>killall命令，向一个命令启动的进程发送一个信号，用于杀死指定名字的进程 命令格式 : killall[命令参数] [进程名]</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令参数：-Z 只杀死拥有scontext 的进程-e 要求匹配进程名称-I 忽略小写-g 杀死进程组而不是进程-i 交互模式，杀死进程前先询问用户-l 列出所有的已知信号名称-q 不输出警告信息-s 发送指定的信号-v 报告信号是否成功发送-w 等待进程死亡--help 显示帮助信息--version 显示版本显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>：杀死所有同名进程    <span class="token function">killall</span> nginx    <span class="token function">killall</span> -9 <span class="token function">bash</span><span class="token number">2</span>.向进程发送指定信号    <span class="token function">killall</span> -<span class="token environment constant">TERM</span> ngixn  或者  <span class="token function">killall</span> -KILL nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>top命令，是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</li></ul><p> 如何杀死进程： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">（1）图形化界面的方式（2）kill -9 pid  （-9表示强制关闭）（3）killall -9 程序的名字（4）pkill 程序的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 查看进程端口号:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -tunlp<span class="token operator">|</span><span class="token function">grep</span> 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h3><p>echo 文字内容</p><ul><li>echo 会在终端中显示参数指定的文字,通常会和重定向联合使用</li></ul><p>重定向 &gt; 和 &gt;&gt;</p><ul><li>Linux中允许将命令执行结果 重定向到一个文件</li><li>将文本应显示在终端上的内容 删除/追加 到指定文件中<ul><li>/  &gt;  表示输出,会覆盖文件中的内容</li><li>/  &gt; &gt; 表示追加,会将内容追加到已有文件的末尾</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># / 转义一下</span><span class="token builtin class-name">echo</span> Hello Python <span class="token operator">>></span>a<span class="token builtin class-name">echo</span> Hello Python <span class="token operator">>></span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>管道 |</p><ul><li>Linux中允许将一个命令的输出,可以通过管道作为另一个命令的输入</li><li>常用的管道命令有<ul><li>more : 分屏显示内容</li><li>gerp : 在命令执行结果的基础上查询指定的文本</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># a 显示隐藏文件夹</span><span class="token function">ls</span> -lha ~ <span class="token operator">|</span> <span class="token function">more</span><span class="token function">ls</span> -lha ~ <span class="token operator">|</span> <span class="token function">grep</span> Vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker学习应用</title>
      <link href="/2021-10-18-docker-xue-xi-ying-yong.html"/>
      <url>/2021-10-18-docker-xue-xi-ying-yong.html</url>
      
        <content type="html"><![CDATA[<ul><li>docker启动命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使容器处于后台运行状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ctrl p + q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看内存状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看本地浏览器运行地址页面</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> localhost:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker启动容器命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ( --name ssm ) 给容器命名</span><span class="token comment"># -d 后台运行 -p 宿主机端口</span>docker run -it centos <span class="token punctuation">(</span> --name ssm <span class="token punctuation">)</span>/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>docker启动特定容器命令并进入容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker start c65e128bc615docker attach c65e128bc615<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>docker查看进程</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker设置容器和宿主机文件共享</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /myDataVolume:/dataVolumeContainer centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker 检查容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker inspect c65e128bc615<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker 启动tomcat (指定映射端口号)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -p <span class="token number">7777</span>:8080 tomcat02:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker 关闭正在运行中的容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stop c65e128bc615 docker <span class="token function">kill</span> c65e128bc615 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>docker 批量关闭正在运行中的容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -qa<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>下载镜像源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>建立一个ssm/centos数据卷 Dockerfile</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 建立一个文件 Dockerfile </span><span class="token function">mkdir</span> Docker <span class="token comment"># 编写内容</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"/dataVolumeContainer1"</span>,<span class="token string">"/dataVolumeContainer2"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"finished,------------successful"</span>CMD /bin/bash<span class="token comment"># 构建容器</span>docker build -f /mydocker/Dockerfile -t ssm/centos <span class="token builtin class-name">.</span><span class="token comment"># 运行容器</span>docker run -it ssm/centos <span class="token comment"># 进入 dataVolumeContainer1 并创建文件container01.txt</span><span class="token builtin class-name">cd</span> dataVolumeContainer1<span class="token function">touch</span> container01.txt<span class="token comment"># 另开一个终端</span>docker <span class="token function">ps</span> docker inspect 容器id找到dataVolumeContainer1: /var/lib/docker/volumes/60f8b0b4209fc59b92c2e36f40b7f1c5ccea3032344bcf9a17951ce08cacd423/_data<span class="token comment"># 另开一个终端,查看共享文件,并创建container02.txt 测试dataVolumecontainer1中是否有container02.txt</span><span class="token builtin class-name">cd</span> /var/lib/docker/volumes/60f8b0b4209fc59b92c2e36f40b7f1c5ccea3032344bcf9a17951ce08cacd423/_data<span class="token function">touch</span> container02.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>容器数据卷传递共享</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 dc01容器</span>docker run -it --name dc01 ssm/centos<span class="token comment"># 创建 dc01_add.txt</span><span class="token builtin class-name">cd</span> dataVolumeContainer2<span class="token function">touch</span> dc01_add.txt<span class="token comment"># 复制dc01 到 dc02</span>docker run -it --name dc02 --volumes-from dc01 ssm/centos<span class="token function">touch</span> dc02_add.txt<span class="token comment"># 复制dc01 到 dc02</span>docker run -it --name dc03 --volumes-from dc01 ssm/centos<span class="token function">touch</span> dc03_add.txt<span class="token comment"># 回到dc01验证即可</span>docker attach dc01<span class="token comment"># 即使删除dc01,dc02和dc03也数据共享</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/fb9c63317cd34ad092dd093eb789166b.png" alt="容器数据卷间传递共享"></p><ul><li>docker运行mysql</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一步 运行mysql容器</span>docker run -p <span class="token number">12345</span>:3306 --name mysql02 -v /ssmuse/mysql/conf:/etc/mysql/conf.d -v /ssmuse/mysql/logs:/logs -v /ssmuse/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -d mysql:8.0.17<span class="token comment"># 第二部  进入容器</span>docker <span class="token function">ps</span>docker <span class="token builtin class-name">exec</span> -it feec4e661b7d /bin/bash<span class="token comment"># 第三步 进入mysql</span>mysql -uroot -p123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据备份</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> mysql 容器id <span class="token function">sh</span> -c <span class="token string">'exec mysqldump --all-databases -uroot -p"123456" '</span> <span class="token operator">></span> /ssmuse/all-databases.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker运行redis</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一步 运行redis容器</span>docker run -p <span class="token number">6379</span>:6379 -v /ssmuse/redis/data:/data -v /ssmuse/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly <span class="token function">yes</span><span class="token comment"># 第二部  进入容器</span>docker <span class="token function">ps</span>docker <span class="token builtin class-name">exec</span> -it 600e8af12e4a redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>docker 运行redis</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name elasticsearch02 -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 -e <span class="token string">"discovery.type=single-node"</span> -e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms64m -Xmx512m"</span> elasticsearch:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>登录docker</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 本地登录</span>docker login -u19858165529<span class="token comment"># 阿里云登录</span>docker login --username<span class="token operator">=</span>秋水墨色染ssm registry.cn-hangzhou.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>发布镜像到dockerHub</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改镜像标签 (必须为dockerHub用户名+...)</span>docker tag ssm/centos <span class="token number">19858165529</span>/centos:1.0<span class="token comment"># 发布即可</span>docker push <span class="token number">19858165529</span>/centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>发布镜像到阿里云 ( [ ]  一定要去掉 )</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker login --username<span class="token operator">=</span>秋水墨色染ssm registry.cn-hangzhou.aliyuncs.com$ docker tag <span class="token punctuation">[</span>ImageId<span class="token punctuation">]</span> registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>$ docker push registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span><span class="token comment"># 本地删除发布的镜像并从阿里云上下载回来</span>docker rmi -f registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:1.1.0docker pull  registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:1.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>springboot微服务打包Docker</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将springboot jar 包和Dockerfile 传到 centos 上 </span><span class="token comment"># Dockerfile内容如下:</span>FROM java:8    ADD *.jar app.jar    EXPOSE <span class="token number">8081</span>    ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"app.jar"</span><span class="token punctuation">]</span>    <span class="token comment"># 构建镜像</span>docker  build -t ssm777 <span class="token builtin class-name">.</span><span class="token comment"># 启动镜像</span>docker run -d --name demo -p <span class="token number">8081</span>:8081 ssm777<span class="token comment"># 运行测试</span><span class="token function">curl</span> localhost:8081/say<span class="token comment"># 运行结果</span>Hello SpringBoot<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>若出现这种报错,需删除此容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 错误信息</span>Error response from daemon: Conflict. The container name <span class="token string">"/mysql"</span> is already <span class="token keyword">in</span> use by container <span class="token string">"19ee5d825ff210ace68011ba7ab6bd6c1cc634e75f0a25a9934c720eab9367a1"</span><span class="token builtin class-name">.</span> You have to remove <span class="token punctuation">(</span>or <span class="token function">rename</span><span class="token punctuation">)</span> that container to be able to reuse that name.<span class="token comment"># 解决办法</span>docker <span class="token function">rm</span> -f 19ee5d825ff210ace68011ba7ab6bd6c1cc634e75f0a25a9934c720eab9367a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输入docker命令报错</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>原因可能是上一次没有正常退出docker，所以docker没有正常启动，在相应的/var/run/路径下找不到docker进程。解决办法:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据结构和算法(七)</title>
      <link href="/2021-10-15-java-shu-ju-jie-gou-he-suan-fa-qi.html"/>
      <url>/2021-10-15-java-shu-ju-jie-gou-he-suan-fa-qi.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-二分查找-非递归"><a href="#1-二分查找-非递归" class="headerlink" title="1. 二分查找(非递归)"></a>1. 二分查找(非递归)</h3><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearchNoRecursion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">413</span><span class="token punctuation">,</span> <span class="token number">880</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 二分查找非递归实现     *     * @param arr    待查找的数组 arr升序排序     * @param target 目标数     * @return 返回对应下标 否则返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分治算法-汉诺塔"><a href="#2-分治算法-汉诺塔" class="headerlink" title="2. 分治算法(汉诺塔)"></a>2. 分治算法(汉诺塔)</h3><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HanoiTower</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">hanoiTower</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hanoiTower</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">char</span> a<span class="token punctuation">,</span><span class="token keyword">char</span> b<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个盘从 "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//n>=2 把所有的盘总是看成两个盘:1.下边的一个盘,上面的所有盘</span>            <span class="token comment">//1.最上面的所有盘A->B</span>            <span class="token function">hanoiTower</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.最下面的盘A->C</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"个盘从 "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.把B塔的所有盘从B->C 移动过程使用到a塔</span>            <span class="token function">hanoiTower</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-动态规划算法"><a href="#3-动态规划算法" class="headerlink" title="3. 动态规划算法"></a>3. 动态规划算法</h3><ul><li><p>动态规划(<strong>Dynamic Programming</strong>)算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法</p></li><li><p>动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p></li><li><p>与分治法不同的是，<strong>适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。</strong> ( 即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解 )</p></li><li><p>动态规划可以通过<strong>填表的方式</strong>来逐步推进，得到最优解.</p></li></ul><table><thead><tr><th><strong>物品</strong></th><th><strong>重量</strong></th><th><strong>价格</strong></th></tr></thead><tbody><tr><td>吉他(G)</td><td>1</td><td>1500</td></tr><tr><td>音响(S)</td><td>4</td><td>3000</td></tr><tr><td>电脑(L)</td><td>3</td><td>2000</td></tr></tbody></table><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KnapsackProblem</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> val<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">//最大价值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//商品放入情况</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//初始化第一行和列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//动态规划处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//公式</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// v[i][j] = Math.max(v[i-1][j],val[i-1]+v[i-1][j-w[i-1]]);</span>                    <span class="token comment">// 记录商品放入情况</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> path<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//行的最大下标</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//列的最大下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从最后遍历</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个商品放入到背包\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">-=</span>w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 剩余的容量</span>            <span class="token punctuation">&#125;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">0</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">3000</span> <span class="token number">0</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">2000</span> <span class="token number">3500</span> 第<span class="token number">3</span>个商品放入到背包第<span class="token number">1</span>个商品放入到背包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-KMP算法"><a href="#4-KMP算法" class="headerlink" title="4. KMP算法"></a>4. KMP算法</h3><ul><li><p>KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法</p></li><li><p>Knuth-Morris-Pratt <strong>字符串查找算法</strong>，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.</p></li><li><p>KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间</p></li><li><p>参考资料：<a href="https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html">https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html</a> </p></li></ul><p>字符串匹配问题</p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViolenceMatch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"少司啊命你少少打司命少司命"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"少司命"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">violenceMatch</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//暴力算法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">violenceMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s1Len <span class="token operator">=</span> s1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> s2Len <span class="token operator">=</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s1Len <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s2Len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> s2Len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//KMP算法</span>    <span class="token comment">/**     * @param str1 源字符串     * @param str2 子串     * @param next 子串对应的部分匹配表     * @return 返回匹配的位置 否则返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmpSearch</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//找到了</span>                <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取到一个字符串的部分匹配值表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">kmpNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>dest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//kmp算法核心点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-贪心算法"><a href="#5-贪心算法" class="headerlink" title="5. 贪心算法"></a>5. 贪心算法</h3><ul><li>贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法</li><li>贪婪算法所得到的结果<strong>不一定是最优的结果</strong>(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</li></ul><p><font color="blue">应用场景-集合覆盖问题</font></p><p>假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。 <strong>如何选择最少的广播台</strong>，让所有的地区都可以接收到信号?</p><table><thead><tr><th>广播台</th><th>覆盖地区</th></tr></thead><tbody><tr><td>K1</td><td>“北京”, “上海”, “天津”</td></tr><tr><td>K2</td><td>“广州”, “北京”, “深圳”</td></tr><tr><td>K3</td><td>“成都”, “上海”, “杭州”</td></tr><tr><td>K4</td><td>“上海”, “天津”</td></tr><tr><td>K5</td><td>“杭州”, “大连”</td></tr></tbody></table><ul><li><p>遍历所有的广播电台, 找到一个覆盖了最多<strong>未覆盖的地区</strong>的电台(此电台可能包含一些已覆盖的地区，但没有关系） </p></li><li><p>将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。</p></li><li><p>重复第1步直到覆盖了全部的地区</p></li></ul><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreedyAlgorithm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HashSet</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> broadcasts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HashSet</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大连"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> hashSet1<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> hashSet2<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> hashSet3<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k4"</span><span class="token punctuation">,</span> hashSet4<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k5"</span><span class="token punctuation">,</span> hashSet5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存放所有的地区</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大连"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存放选择的电台的集合</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> selects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//临时集合,存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tempSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存在一次遍历中能够覆盖最大未覆盖的地区对应的电台key  如果maxKey不为null,则加入到selects</span>        <span class="token class-name">String</span> maxKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>allArea<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> broadcasts<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tempSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> areas <span class="token operator">=</span> broadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                tempSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//取tempSet 和 areas 的交集 赋给 tempSet</span>                tempSet<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>allArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//如果当亲这个集合包含未覆盖地区的数量,比maxKey指向的集合地区还多,就需要重置maxKey  这里体现贪心算法的特点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>maxKey <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tempSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> broadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    maxKey <span class="token operator">=</span> key<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                selects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>maxKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将maxkey指向的广播电台重allArea中去除掉</span>                allArea<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>broadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到的选择结果"</span> <span class="token operator">+</span> selects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-普利姆算法"><a href="#6-普利姆算法" class="headerlink" title="6. 普利姆算法"></a>6. 普利姆算法</h3><p><img src="https://img-blog.csdnimg.cn/46d7560c75e7486e9f29256cd4e472b1.png" alt="普利姆算法"></p><ul><li>普利姆(Prim)算法求<strong>最小生成树</strong>，也就是在包含n个顶点的连通图中，找出只有(n-1)条边包含所有n个顶点的连通子图，也就是所谓的<strong>极小连通子图</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/d57522fe6b634cb199dd4dbb1034f3a1.png" alt="问题示意图"></p><p>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里.问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</p><p>代码演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tenAlgorithms</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimAlgorithm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> verxs <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">MGraph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MGraph</span><span class="token punctuation">(</span>verxs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MinTree</span> minTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minTree<span class="token punctuation">.</span><span class="token function">createGraph</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> verxs<span class="token punctuation">,</span> data<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        minTree<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>        minTree<span class="token punctuation">.</span><span class="token function">prim</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建最小生成树</span><span class="token keyword">class</span> <span class="token class-name">MinTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createGraph</span><span class="token punctuation">(</span><span class="token class-name">MGraph</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> verxs<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verxs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> verxs<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                graph<span class="token punctuation">.</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示图的邻接矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token class-name">MGraph</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> link <span class="token operator">:</span> graph<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//prim算法,生成最小生成树</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token class-name">MGraph</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// visited [] 标记顶点是否被访问</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span>verxs<span class="token punctuation">]</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// h1,h2记录两个顶点的下标</span>        <span class="token keyword">int</span> h1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minWeight <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>verxs<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>verxs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//i 表示被访问过的结点</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>verxs<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//j 表示未被访问过的结点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>graph<span class="token punctuation">.</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>minWeight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//找到权值最小的边</span>                        minWeight <span class="token operator">=</span> graph<span class="token punctuation">.</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        h1<span class="token operator">=</span>i<span class="token punctuation">;</span>                        h2<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"边&lt;"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h1<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h2<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">">权值:"</span><span class="token operator">+</span>minWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>h2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            minWeight<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MGraph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> verxs<span class="token punctuation">;</span> <span class="token comment">//图的节点的个数</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span> <span class="token comment">//存放节点的个数</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight<span class="token punctuation">;</span> <span class="token comment">//存放边,就是我们的邻接矩阵</span>    <span class="token keyword">public</span> <span class="token class-name">MGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> verxs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>verxs <span class="token operator">=</span> verxs<span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>verxs<span class="token punctuation">]</span><span class="token punctuation">;</span>        weight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>verxs<span class="token punctuation">]</span><span class="token punctuation">[</span>verxs<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">G</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">2</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">G</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">3</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">G</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">4</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">F</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">5</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span><span class="token class-name">D</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">4</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-克鲁斯卡尔算法"><a href="#7-克鲁斯卡尔算法" class="headerlink" title="7.克鲁斯卡尔算法"></a>7.克鲁斯卡尔算法</h3><p><img src="https://img-blog.csdnimg.cn/d9edfa644e64427b925b8ce8daffd039.png" alt="克鲁斯卡尔算法"></p><ul><li><p>克鲁斯卡尔(Kruskal)算法，是用来求加权连通图的最小生成树的算法。</p></li><li><p><strong>基本思想</strong>：按照权值从小到大的顺序选择n-1条边，并保证这n-1条边不构成回路</p></li><li><p><strong>具体做法</strong>：首先构造一个只含n个顶点的森林，然后依权值从小到大从连通网中选择边加入到森林中，并使森林中不产生回路，直至森林变成一棵树为止</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KruskalCase</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> edgeNum<span class="token punctuation">;</span> <span class="token comment">//边的个数</span><span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs<span class="token punctuation">;</span> <span class="token comment">//顶点数组</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">;</span> <span class="token comment">//邻接矩阵</span><span class="token comment">//使用 INF 表示两个顶点不能连通</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//克鲁斯卡尔算法的邻接矩阵  </span>      <span class="token keyword">int</span> matrix<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/*A*/</span><span class="token operator">/</span><span class="token operator">*</span><span class="token class-name">B</span><span class="token operator">*</span><span class="token comment">//*C*//*D*//*E*//*F*//*G*/</span><span class="token comment">/*A*/</span> <span class="token punctuation">&#123;</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">,</span>  <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">/*B*/</span> <span class="token punctuation">&#123;</span>  <span class="token number">12</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">,</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">,</span>   <span class="token number">7</span><span class="token punctuation">,</span> INF<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">/*C*/</span> <span class="token punctuation">&#123;</span> INF<span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">,</span>   <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span> INF<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">/*D*/</span> <span class="token punctuation">&#123;</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">,</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">/*E*/</span> <span class="token punctuation">&#123;</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">,</span>   <span class="token number">5</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">/*F*/</span> <span class="token punctuation">&#123;</span>  <span class="token number">16</span><span class="token punctuation">,</span>   <span class="token number">7</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span> INF<span class="token punctuation">,</span>   <span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">/*G*/</span> <span class="token punctuation">&#123;</span>  <span class="token number">14</span><span class="token punctuation">,</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">,</span> INF<span class="token punctuation">,</span>   <span class="token number">8</span><span class="token punctuation">,</span>   <span class="token number">9</span><span class="token punctuation">,</span>   <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>       <span class="token comment">//大家可以在去测试其它的邻接矩阵，结果都可以得到最小生成树.</span>            <span class="token comment">//创建KruskalCase 对象实例</span>      <span class="token class-name">KruskalCase</span> kruskalCase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KruskalCase</span><span class="token punctuation">(</span>vertexs<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//输出构建的</span>      kruskalCase<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      kruskalCase<span class="token punctuation">.</span><span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">KruskalCase</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//初始化顶点数和边的个数</span><span class="token keyword">int</span> vlen <span class="token operator">=</span> vertexs<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//初始化顶点, 复制拷贝的方式</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertexs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>vlen<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vertexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化边, 使用的是复制拷贝的方式</span><span class="token keyword">this</span><span class="token punctuation">.</span>matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vlen<span class="token punctuation">]</span><span class="token punctuation">[</span>vlen<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vlen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//统计边的条数</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vlen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>edgeNum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">kruskal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//表示最后结果数组的索引</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ends <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>edgeNum<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//用于保存"已有最小生成树" 中的每个顶点在最小生成树中的终点</span><span class="token comment">//创建结果数组, 保存最后的最小生成树</span><span class="token class-name">EData</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EData</span><span class="token punctuation">[</span>edgeNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取图中 所有的边的集合 ， 一共有12边</span><span class="token class-name">EData</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges <span class="token operator">=</span> <span class="token function">getEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图的边的集合="</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 共"</span><span class="token operator">+</span> edges<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//12</span><span class="token comment">//按照边的权值大小进行排序(从小到大)</span><span class="token function">sortEdges</span><span class="token punctuation">(</span>edges<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历edges 数组，将边添加到最小生成树中时，判断是准备加入的边否形成了回路，如果没有，就加入 rets, 否则不能加入</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edgeNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取到第i条边的第一个顶点(起点)</span><span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//p1=4</span><span class="token comment">//获取到第i条边的第2个顶点</span><span class="token keyword">int</span> p2 <span class="token operator">=</span> <span class="token function">getPosition</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//p2 = 5</span><span class="token comment">//获取p1这个顶点在已有最小生成树中的终点</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">getEnd</span><span class="token punctuation">(</span>ends<span class="token punctuation">,</span> p1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//m = 4</span><span class="token comment">//获取p2这个顶点在已有最小生成树中的终点</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">getEnd</span><span class="token punctuation">(</span>ends<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n = 5</span><span class="token comment">//是否构成回路</span><span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//没有构成回路</span>ends<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">// 设置m 在"已有最小生成树"中的终点 &lt;E,F> [0,0,0,0,5,0,0,0,0,0,0,0]</span>rets<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> edges<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//有一条边加入到rets数组</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//&lt;E,F> &lt;C,D> &lt;D,E> &lt;B,F> &lt;E,G> &lt;A,B>。</span><span class="token comment">//统计并打印 "最小生成树", 输出  rets</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小生成树为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//打印邻接矩阵</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"邻接矩阵为: \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> vertexs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%12d"</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 功能：对边进行排序处理, 冒泡排序 * @param edges 边的集合 */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sortEdges</span><span class="token punctuation">(</span><span class="token class-name">EData</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> edges<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> edges<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>weight <span class="token operator">></span> edges<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//交换</span><span class="token class-name">EData</span> tmp <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>edges<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> edges<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>edges<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** *  * @param ch 顶点的值，比如'A','B' * @return 返回ch顶点对应的下标，如果找不到，返回-1 */</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>vertexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//找到</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//找不到,返回-1</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 功能: 获取图中边，放到EData[] 数组中，后面我们需要遍历该数组 * 是通过matrix 邻接矩阵来获取 * EData[] 形式 [['A','B', 12], ['B','F',7], .....] * @return */</span><span class="token keyword">private</span> <span class="token class-name">EData</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getEdges</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">EData</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EData</span><span class="token punctuation">[</span>edgeNum<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>vertexs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> INF<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>edges<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EData</span><span class="token punctuation">(</span>vertexs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> vertexs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> edges<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 功能: 获取下标为i的顶点的终点(), 用于后面判断两个顶点的终点是否相同 * @param ends ： 数组就是记录了各个顶点对应的终点是哪个,ends 数组是在遍历过程中，逐步形成 * @param i : 表示传入的顶点对应的下标 * @return 返回的就是 下标为i的这个顶点对应的终点的下标, 一会回头还有来理解 */</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ends<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// i = 4 [0,0,0,0,5,0,0,0,0,0,0,0]</span><span class="token keyword">while</span><span class="token punctuation">(</span>ends<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i <span class="token operator">=</span> ends<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token comment">//创建一个类EData ，它的对象实例就表示一条边</span><span class="token keyword">class</span> <span class="token class-name">EData</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> start<span class="token punctuation">;</span> <span class="token comment">//边的一个点</span><span class="token keyword">char</span> end<span class="token punctuation">;</span> <span class="token comment">//边的另外一个点</span><span class="token keyword">int</span> weight<span class="token punctuation">;</span> <span class="token comment">//边的权值</span><span class="token comment">//构造器</span><span class="token keyword">public</span> <span class="token class-name">EData</span><span class="token punctuation">(</span><span class="token keyword">char</span> start<span class="token punctuation">,</span> <span class="token keyword">char</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//重写toString, 便于输出边信息</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"EData [&lt;"</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> end <span class="token operator">+</span> <span class="token string">">= "</span> <span class="token operator">+</span> weight <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>克鲁斯卡尔算法和普利姆算法的区别:</p><ul><li>普利姆：以点为核心，两点之间的权值从小到大找，找到的最小的连上即可。(<font color = red>不能断开</font>)</li><li>克鲁斯卡尔：以边为核心，边的权值从小到大找，即使两个线条不相连也先连上，然后最后再连在一起<font color = red>（可以断开）</font></li></ul><h3 id="8-迪杰斯特拉算法"><a href="#8-迪杰斯特拉算法" class="headerlink" title="8.迪杰斯特拉算法"></a>8.迪杰斯特拉算法</h3><p>迪杰斯特拉(Dijkstra)算法是<strong>典型最短路径算法</strong>，用于计算一个结点到其他结点的最短路径。 它的主要特点是以起始点为中心向外层层扩展(<strong>广度优先</strong>搜索思想)，直到扩展到终点为止</p><p><img src="https://img-blog.csdnimg.cn/c66825a356974c87b2ce1cfbf5b8e639.png" alt="Dijkstra"></p><ul><li><p>战争时期，胜利乡有7个村庄(A, B, C, D, E, F, G) ，现在有六个邮差，从G点出发，需要分别把邮件分别送到 A, B, C , D, E, F 六个村庄</p></li><li><p>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里</p></li><li><p>问：如何计算出G村庄到 其它各个村庄的最短距离? </p></li><li><p>如果从其它点出发到各个点的最短距离又是多少?</p></li></ul><p><img src="https://img-blog.csdnimg.cn/e1db5d8918b14b2ba78c3e5d0517e751.png" alt="案例"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tenAlgorithms</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DijkstraAlgorithm</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//邻接矩阵</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vertex<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>vertex<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span><span class="token comment">// 表示不可以连接</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>matrix<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>matrix<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>matrix<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>matrix<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>matrix<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//创建 Graph对象</span><span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>vertex<span class="token punctuation">,</span> matrix<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试, 看看图的邻接矩阵是否ok</span>graph<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试迪杰斯特拉算法</span>graph<span class="token punctuation">.</span><span class="token function">dsj</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//C</span>graph<span class="token punctuation">.</span><span class="token function">showDijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex<span class="token punctuation">;</span> <span class="token comment">// 顶点数组</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">;</span> <span class="token comment">// 邻接矩阵</span><span class="token keyword">private</span> <span class="token class-name">VisitedVertex</span> vv<span class="token punctuation">;</span> <span class="token comment">//已经访问的顶点的集合</span><span class="token comment">// 构造器</span><span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>vertex <span class="token operator">=</span> vertex<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>matrix <span class="token operator">=</span> matrix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//显示结果</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showDijkstra</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vv<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 显示图</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> link <span class="token operator">:</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//迪杰斯特拉算法实现</span><span class="token comment">/** * * @param index 表示出发顶点对应的下标 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dsj</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisitedVertex</span><span class="token punctuation">(</span>vertex<span class="token punctuation">.</span>length<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">update</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//更新index顶点到周围顶点的距离和前驱顶点</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>vertex<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>index <span class="token operator">=</span> vv<span class="token punctuation">.</span><span class="token function">updateArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 选择并返回新的访问顶点</span><span class="token function">update</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新index顶点到周围顶点的距离和前驱顶点</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//更新index下标顶点到周围顶点的距离和周围顶点的前驱顶点,</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//根据遍历我们的邻接矩阵的  matrix[index]行</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// len 含义是 : 出发顶点到index顶点的距离 + 从index顶点到j顶点的距离的和</span>len <span class="token operator">=</span> vv<span class="token punctuation">.</span><span class="token function">getDis</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> matrix<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 如果j顶点没有被访问过，并且 len 小于出发顶点到j顶点的距离，就需要更新</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vv<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> len <span class="token operator">&lt;</span> vv<span class="token punctuation">.</span><span class="token function">getDis</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>vv<span class="token punctuation">.</span><span class="token function">updatePre</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新j顶点的前驱为index顶点</span>vv<span class="token punctuation">.</span><span class="token function">updateDis</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新出发顶点到j顶点的距离</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 已访问顶点集合</span><span class="token keyword">class</span> <span class="token class-name">VisitedVertex</span> <span class="token punctuation">&#123;</span><span class="token comment">// 记录各个顶点是否访问过 1表示访问过,0未访问,会动态更新</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> already_arr<span class="token punctuation">;</span><span class="token comment">// 每个下标对应的值为前一个顶点下标, 会动态更新</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre_visited<span class="token punctuation">;</span><span class="token comment">// 记录出发顶点到其他所有顶点的距离,比如G为出发顶点，就会记录G到其它顶点的距离，会动态更新，求的最短距离就会存放到dis</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis<span class="token punctuation">;</span><span class="token comment">//构造器</span><span class="token comment">/** * * @param length :表示顶点的个数 * @param index: 出发顶点对应的下标, 比如G顶点，下标就是6 */</span><span class="token keyword">public</span> <span class="token class-name">VisitedVertex</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>already_arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>pre_visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始化 dis数组</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dis<span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>already_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//设置出发顶点被访问过</span><span class="token keyword">this</span><span class="token punctuation">.</span>dis<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//设置出发顶点的访问距离为0</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 功能: 判断index顶点是否被访问过 * @param index * @return 如果访问过，就返回true, 否则访问false */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> already_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 功能: 更新出发顶点到index顶点的距离 * @param index * @param len */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateDis</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dis<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 功能: 更新pre这个顶点的前驱顶点为index顶点 * @param pre * @param index */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updatePre</span><span class="token punctuation">(</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pre_visited<span class="token punctuation">[</span>pre<span class="token punctuation">]</span> <span class="token operator">=</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 功能:返回出发顶点到index顶点的距离 * @param index */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDis</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> dis<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 继续选择并返回新的访问顶点， 比如这里的G 完后，就是 A点作为新的访问顶点(注意不是出发顶点) * @return */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> already_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>already_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>min <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//更新 index 顶点被访问过</span>already_arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//显示最后的结果</span><span class="token comment">//即将三个数组的情况输出</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出already_arr</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> already_arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出pre_visited</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> pre_visited<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出dis</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> dis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为了好看最后的最短距离，我们处理</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> dis<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">65535</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vertex<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"("</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">") "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"N "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-弗洛伊德算法"><a href="#9-弗洛伊德算法" class="headerlink" title="9.弗洛伊德算法"></a>9.弗洛伊德算法</h3><ul><li>和Dijkstra算法一样，弗洛伊德(Floyd)算法也是一种用于寻找给定的加权图中顶点间最短路径的算法。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tenAlgorithms</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FloydAlgorithm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 测试看看图是否创建成功</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//创建邻接矩阵</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>vertex<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>vertex<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">65535</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        matrix<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//创建 Graph 对象</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>vertex<span class="token punctuation">.</span>length<span class="token punctuation">,</span> matrix<span class="token punctuation">,</span> vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用弗洛伊德算法</span>        graph<span class="token punctuation">.</span><span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建图</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex<span class="token punctuation">;</span> <span class="token comment">// 存放顶点的数组</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dis<span class="token punctuation">;</span> <span class="token comment">// 保存，从各个顶点出发到其它顶点的距离，最后的结果，也是保留在该数组</span>        <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre<span class="token punctuation">;</span><span class="token comment">// 保存到达目标顶点的前驱顶点</span>        <span class="token comment">// 构造器</span>        <span class="token comment">/**         * @param length 大小         * @param matrix 邻接矩阵         * @param vertex 顶点数组         */</span>        <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>vertex <span class="token operator">=</span> vertex<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>dis <span class="token operator">=</span> matrix<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 对pre数组初始化, 注意存放的是前驱顶点的下标</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 显示pre数组和dis数组</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//为了显示便于阅读，我们优化一下输出</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertex <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> dis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 先将pre数组输出的一行</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>vertex<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 输出dis数组的一行数据</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> vertex<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"到"</span> <span class="token operator">+</span> vertex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"的最短路径是"</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">") "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//弗洛伊德算法, 比较容易理解，而且容易实现</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//变量保存距离</span>            <span class="token comment">//对中间顶点遍历， k 就是中间顶点的下标 [A, B, C, D, E, F, G]</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> dis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//</span>                <span class="token comment">//从i顶点开始出发 [A, B, C, D, E, F, G]</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//到达j顶点 // [A, B, C, D, E, F, G]</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> dis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        len <span class="token operator">=</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dis<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// => 求出从i 顶点出发，经过 k中间顶点，到达 j 顶点距离</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果len小于 dis[i][j]</span>                            dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">;</span><span class="token comment">//更新距离</span>                            pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//更新前驱顶点</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>弗洛伊德算法和迪杰斯特拉算法不同之处：</p><ul><li>迪杰斯特拉算法通过选定的被访问顶点，求出从出发访问顶点到其他顶点的最短路径；</li><li>弗洛伊德算法中每一个顶点都是出发访问点，所以需要将每一个顶点看做被访问顶点，求出从每一个顶点到其他顶点的最短路径。</li></ul><h3 id="10-骑士周游回溯算法"><a href="#10-骑士周游回溯算法" class="headerlink" title="10.骑士周游回溯算法"></a>10.骑士周游回溯算法</h3><p><img src="https://img-blog.csdnimg.cn/b47b728effeb437ba16b7ee75522f42c.png" alt="马踏棋盘"></p><ul><li><p>马踏棋盘算法也被称为骑士周游问题</p></li><li><p>将马随机放在国际象棋的8×8棋盘Board[0～7][0～7]的某个方格中，马按走棋规则(<strong>马走日字</strong>)进行移动。要求每个方格只进入一次，走遍棋盘上全部64个方格</p></li><li><p>马踏棋盘问题(骑士周游问题)实际上是图的深度优先搜索(DFS)的应用。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tenAlgorithms</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token class-name">Point</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HorseChessboard</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">X</span><span class="token punctuation">;</span> <span class="token comment">// 棋盘的列数</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">Y</span><span class="token punctuation">;</span> <span class="token comment">// 棋盘的行数</span>    <span class="token comment">//创建一个数组，标记棋盘的各个位置是否被访问过</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> visited<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//使用一个属性，标记是否棋盘的所有位置都被访问</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> finished<span class="token punctuation">;</span> <span class="token comment">// 如果为true,表示成功</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"骑士周游算法，开始运行~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试骑士周游算法是否正确</span>        <span class="token class-name">X</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token class-name">Y</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//马儿初始位置的行，从1开始编号</span>        <span class="token keyword">int</span> column <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//马儿初始位置的列，从1开始编号</span>        <span class="token comment">//创建棋盘</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">Y</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token class-name">X</span> <span class="token operator">*</span> <span class="token class-name">Y</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//初始值都是false</span>        <span class="token comment">//测试一下耗时</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traversalChessboard</span><span class="token punctuation">(</span>chessboard<span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"共耗时: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 毫秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出棋盘的最后情况</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rows <span class="token operator">:</span> chessboard<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token operator">:</span> rows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 完成骑士周游问题的算法     * @param chessboard 棋盘     * @param row 马儿当前的位置的行 从0开始     * @param column 马儿当前的位置的列  从0开始     * @param step 是第几步 ,初始位置就是第1步     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">traversalChessboard</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessboard<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        chessboard<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">=</span> step<span class="token punctuation">;</span>        <span class="token comment">//row = 4 X = 8 column = 4 = 4 * 8 + 4 = 36</span>        visited<span class="token punctuation">[</span>row <span class="token operator">*</span> <span class="token class-name">X</span> <span class="token operator">+</span> column<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//标记该位置已经访问</span>        <span class="token comment">//获取当前位置可以走的下一个位置的集合</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> ps <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对ps进行排序,排序的规则就是对ps的所有的Point对象的下一步的位置的数目，进行非递减排序</span>        <span class="token function">sort</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历 ps</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ps<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Point</span> p <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出下一个可以走的位置</span>            <span class="token comment">//判断该点是否已经访问过</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>p<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token class-name">X</span> <span class="token operator">+</span> p<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//说明还没有访问过</span>                <span class="token function">traversalChessboard</span><span class="token punctuation">(</span>chessboard<span class="token punctuation">,</span> p<span class="token punctuation">.</span>y<span class="token punctuation">,</span> p<span class="token punctuation">.</span>x<span class="token punctuation">,</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿是否完成了任务，使用   step 和应该走的步数比较 ，</span>        <span class="token comment">//如果没有达到数量，则表示没有完成任务，将整个棋盘置0</span>        <span class="token comment">//说明: step &lt; X * Y  成立的情况有两种</span>        <span class="token comment">//1. 棋盘到目前位置,仍然没有走完</span>        <span class="token comment">//2. 棋盘处于一个回溯过程</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>step <span class="token operator">&lt;</span> <span class="token class-name">X</span> <span class="token operator">*</span> <span class="token class-name">Y</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>finished <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            chessboard<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>row <span class="token operator">*</span> <span class="token class-name">X</span> <span class="token operator">+</span> column<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            finished <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 功能： 根据当前位置(Point对象)，计算马儿还能走哪些位置(Point)，并放入到一个集合中(ArrayList), 最多有8个位置     * @param curPoint     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Point</span> curPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个ArrayList</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建一个Point</span>        <span class="token class-name">Point</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//表示马儿可以走5这个位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>y <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿可以走6这个位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y<span class="token operator">=</span>curPoint<span class="token punctuation">.</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿可以走7这个位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">X</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿可以走0这个位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">X</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿可以走1这个位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">X</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿可以走2这个位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">X</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿可以走3这个位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断马儿可以走4这个位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>x <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>y <span class="token operator">=</span> curPoint<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ps<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据当前这个一步的所有的下一步的选择位置，进行非递减排序, 减少回溯的次数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> ps<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ps<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Point</span> o1<span class="token punctuation">,</span> <span class="token class-name">Point</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// TODO Auto-generated method stub</span>                <span class="token comment">//获取到o1的下一步的所有位置个数</span>                <span class="token keyword">int</span> count1 <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取到o2的下一步的所有位置个数</span>                <span class="token keyword">int</span> count2 <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count1 <span class="token operator">&lt;</span> count2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count1 <span class="token operator">==</span> count2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据结构和算法(六)</title>
      <link href="/2021-10-13-java-shu-ju-jie-gou-he-suan-fa-liu.html"/>
      <url>/2021-10-13-java-shu-ju-jie-gou-he-suan-fa-liu.html</url>
      
        <content type="html"><![CDATA[<h3 id="图"><a href="#图" class="headerlink" title=" 图"></a><center> 图</h3><ul><li>图的表示方式有两种：二维数组表示（邻接矩阵）；链表表示（邻接表）。</li><li><font color = "red">邻接矩阵</font>是表示图形中顶点之间相邻关系的矩阵，对于n个顶点的图而言，矩阵是的row和col表示的是1….n个点。 </li></ul><p><img src="https://img-blog.csdnimg.cn/87a6a3bb7a864acd96c6f55042a36a64.png" alt="邻接矩阵"></p><ul><li><font color = "red">邻接表</font>的实现只关心存在的边，不关心不存在的边。因此没有空间浪费，邻接表由数组+链表组成  </li></ul><p><img src="https://img-blog.csdnimg.cn/ab8291a09fb94b5fa9a08681073a7358.png" alt="邻接表"></p><p><strong>图的遍历</strong> : 即是对结点的访问。  </p><p><strong>图的深度优先搜索(Depth First Search)</strong> 。</p><p><img src="https://img-blog.csdnimg.cn/c8da20681b0044d1911c78b1a2e04fbc.png" alt="深度优先遍历"></p><ul><li>深度优先遍历，从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，访问它的第一个邻接结点， 可以这样理解：每次都在访问完<strong>当前结点</strong>后首先访问<strong>当前结点的第一个邻接结点</strong>。</li><li>我们可以看到，这样的访问策略是优先往纵向挖掘深入，而不是对一个结点的所有邻接结点进行横向访问。</li><li>显然，深度优先搜索是一个递归的过程</li></ul><p><strong>深度优先遍历算法步骤</strong></p><ul><li><p>访问初始结点v，并标记结点v为已访问。</p></li><li><p>查找结点v的第一个邻接结点w。</p></li><li><p>若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个结点继续。</p></li><li><p>若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。</p></li><li><p>查找结点v的w邻接结点的下一个邻接结点，转到步骤3。</p></li></ul><p><strong>图的广度优先搜索(Broad First Search)</strong> 。</p><p><img src="https://img-blog.csdnimg.cn/81a67600922a4054b118d6f7f3f9c968.png" alt="广度优先遍历"></p><ul><li>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点</li></ul><p><strong>广度优先遍历算法步骤</strong></p><ul><li><p>访问初始结点v并标记结点v为已访问。</p></li><li><p> 结点v入队列</p></li><li><p>当队列非空时，继续执行，否则算法结束。</p></li><li><p>出队列，取得队头结点u。</p></li><li><p>查找结点u的第一个邻接结点w。</p></li><li><p>若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：</p><ul><li>若结点w尚未被访问，则访问结点w并标记为已访问。 </li><li>结点w入队列 </li><li>查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6。</li></ul></li></ul><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/13 18:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> vertexList<span class="token punctuation">;</span> <span class="token comment">//存储顶点的集合</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">;</span><span class="token comment">//存储图对应的邻接矩阵</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numOfEdge<span class="token punctuation">;</span> <span class="token comment">// 表示边的数目</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">;</span> <span class="token comment">//</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment">//String[] vertexs = &#123;"A", "B", "C", "D", "E"&#125;;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加顶点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> vertex <span class="token operator">:</span> vertexs        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">insertVertex</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//添加边</span>        <span class="token comment">/*graph.insertEdge(0, 1, 1); // A-B        graph.insertEdge(0, 2, 1); // A-C        graph.insertEdge(1, 2, 1);        graph.insertEdge(1, 3, 1);        graph.insertEdge(1, 4, 1);*/</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">showGarph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深度优先遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"广度优先遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        vertexList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        numOfEdge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到第一个邻接点的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据前一个邻接结点的下标来获取下一个邻接结点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> v2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//深度优先遍历 i 第一次是0</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明有</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果w结点已经被访问过</span>            w <span class="token operator">=</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对dfs重载 遍历所有的结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//广度优先遍历</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u<span class="token punctuation">;</span> <span class="token comment">//队列头结点对应的下标</span>        <span class="token keyword">int</span> w<span class="token punctuation">;</span> <span class="token comment">//邻接点w</span>        <span class="token comment">//记录结点访问顺序</span>        <span class="token class-name">LinkedList</span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>linkedList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//取出队列头结点的下标</span>            u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> linkedList<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 得到第一个邻接结点的下标</span>            w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValByIndex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//以u为前驱结点,找w后面的下一个邻接结点</span>                w <span class="token operator">=</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//体现出广度优先</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//bfs重载 遍历所有的结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">bfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回边的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfEdge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numOfEdge<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回结点i(下标)对应的数据</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回v1 v2的权值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//插入节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vertexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加边</span>    <span class="token comment">/**     * @param v1     表示点的下标即是第几个顶点     * @param v2     第二个顶点对应的下标     * @param weight     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        numOfEdge<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示图对应的矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGarph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> link <span class="token operator">:</span> edges        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>深度优先遍历<span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">8</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">6</span><span class="token operator">-></span><span class="token number">7</span><span class="token operator">-></span>广度优先遍历<span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token number">6</span><span class="token operator">-></span><span class="token number">7</span><span class="token operator">-></span><span class="token number">8</span><span class="token operator">-></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0aad0e90501848ab902885bc5c938795.png" alt="图例示意图"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构和算法(五)</title>
      <link href="/2021-10-04-java-shu-ju-jie-gou-he-suan-fa-wu.html"/>
      <url>/2021-10-04-java-shu-ju-jie-gou-he-suan-fa-wu.html</url>
      
        <content type="html"><![CDATA[<h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a><center>哈希表</h3><p><a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E8%A1%A8">散列表</a>（Hash table，也叫哈希表），是根据关键码值(Key value)而直接进行访问的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1450">数据结构</a>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0">散列函数</a>，存放记录的<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84">数组</a>叫做<a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E8%A1%A8">散列</a><a href="https://baike.baidu.com/item/%E6%95%A3%E5%88%97%E8%A1%A8">表</a>。</p><p><img src="https://img-blog.csdnimg.cn/8da387b5838d422bb77303cf7f51944f.jpg" alt="hashttable示意图"></p><p>有一个公司,当有新的员工来报道时,要求将该员工的信息加入(id,性别,年龄,名字,住址..),当输入该员工的id时,要求查找到该员工的 所有信息</p><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>hashTab</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/4 21:29 */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * 用hashtable存放雇员信息 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashTableDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hashTab hashTab <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">hashTab</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add: 添加雇员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"list: 显示雇员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"find: 查找雇员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exit: 退出系统 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"add"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> id <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入名字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                    hashTab<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"list"</span><span class="token operator">:</span>                    hashTab<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"find"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    id <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    hashTab<span class="token punctuation">.</span><span class="token function">findEmpById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"exit"</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> hashTab <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">EmpLinkedList</span><span class="token punctuation">[</span><span class="token punctuation">]</span> empLinkedListArray<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">//共有多少条链表</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token function">hashTab</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>        empLinkedListArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpLinkedList</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//没这一步会报 NullPointerException  需要初始化链表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            empLinkedListArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmpLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加雇员</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//根据员工id,得到员工应该添加到哪条链表</span>        <span class="token keyword">int</span> empLinkedListNo <span class="token operator">=</span> <span class="token function">hashFun</span><span class="token punctuation">(</span>emp<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将 emp 放到对应的链表中</span>        empLinkedListArray<span class="token punctuation">[</span>empLinkedListNo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历所有的链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            empLinkedListArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据id查找雇员</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findEmpById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//使用散列函数确定哪条链表查找</span>        <span class="token keyword">int</span> empLinkedListNo <span class="token operator">=</span> <span class="token function">hashFun</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Emp</span> emp <span class="token operator">=</span> empLinkedListArray<span class="token punctuation">[</span>empLinkedListNo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">findEmpById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>emp<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//找到</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"在第%d条链表中找到雇员id = %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>empLinkedListNo<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//没找到</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在hash表中没有找到该雇员"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写散列函数,使用简单的取模法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashFun</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id <span class="token operator">%</span> size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//表示一个雇员</span><span class="token keyword">class</span> <span class="token class-name">Emp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Emp</span> next<span class="token punctuation">;</span><span class="token comment">//默认为null</span>    <span class="token keyword">public</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建EmpLinkedList,表示链表</span><span class="token keyword">class</span> <span class="token class-name">EmpLinkedList</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//头结点</span>    <span class="token keyword">private</span> <span class="token class-name">Emp</span> head<span class="token punctuation">;</span> <span class="token comment">// 默认null</span>    <span class="token comment">//添加雇员到链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Emp</span> emp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果是添加第一个雇员</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> emp<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果不是第一个雇员,则使用一个辅助指针,帮助定位到最后</span>        <span class="token class-name">Emp</span> curEmp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curEmp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curEmp <span class="token operator">=</span> curEmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//退出时直接将emp 加入链表</span>        curEmp<span class="token punctuation">.</span>next <span class="token operator">=</span> emp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历链表的雇员信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"第"</span> <span class="token operator">+</span> no <span class="token operator">+</span> <span class="token string">"链表信息为"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Emp</span> curEmp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"=> id = %d name = %s\t"</span><span class="token punctuation">,</span> curEmp<span class="token punctuation">.</span>id<span class="token punctuation">,</span> curEmp<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curEmp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curEmp <span class="token operator">=</span> curEmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//后移 遍历</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据id查找雇员</span>    <span class="token keyword">public</span> <span class="token class-name">Emp</span> <span class="token function">findEmpById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//辅助指针</span>        <span class="token class-name">Emp</span> curEmp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curEmp<span class="token punctuation">.</span>id <span class="token operator">==</span> id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//找到了</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//退出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curEmp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//没找到该雇员</span>                curEmp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curEmp <span class="token operator">=</span> curEmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> curEmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="树"><a href="#树" class="headerlink" title="树"></a><center>树</h3><p><font color="blue">为什么需要树这种数据结构?</font></p><ul><li><p>数组存储方式的分析:</p><ul><li>优点：通过下标方式访问元素，速度快。对于有序数组，还可使用二分查找提高检索速度。</li><li>缺点：如果要检索具体某个值，或者插入值(按一定顺序)会整体移动，效率较低</li></ul></li><li><p>链式存储方式的分析</p><ul><li>优点：在一定程度上对数组存储方式有优化(比如：插入一个数值节点，只需要将插入节点，链接到链表中即可， 删除效率也很好)。</li><li>缺点：在进行检索时，效率仍然较低，比如(检索某个值，需要从头节点开始遍历)</li></ul></li><li><p>树存储方式的分析能提高数据存储，读取的效率,  比如利用 二叉排序树(Binary Sort Tree)，既可以保证数据的检索速度，同时也可以保证数据的插入，删除，修改的速度。</p><ul><li>案例: 【9，13，15，17，18，25，27，29，34】</li></ul></li></ul><h3 id="1-二叉树"><a href="#1-二叉树" class="headerlink" title="1. 二叉树"></a>1. 二叉树</h3><ul><li><p>二叉树的概念</p><ul><li><p>树有很多种，每个节点<strong>最多只能有两个子节点</strong>的一种形式称为二叉树。</p></li><li><p>二叉树的子节点分为左节点和右节点。</p></li><li><p>如果该二叉树的<strong>所有</strong>叶子节点都在最后一层**，并且结点总数= 2^n -1 , n 为层数，则我们称为满二叉树。</p></li><li><p>如果该二叉树的所有叶子节点都在最后一层或者倒数第二层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全二叉树。</p></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/7a39a66a17c042f78d74cd3f9e287e5d.jpg" alt="二叉树结构示意图"></p><p><font color="red">二叉树遍历说明：</font></p><p>前序遍历: <strong>先输出父节点</strong>，再遍历左子树和右子树</p><p>中序遍历: 先遍历左子树，<strong>再输出父节点</strong>，再遍历右子树</p><p>后序遍历: 先遍历左子树，再遍历右子树，<strong>最后输出父节点</strong></p><p><strong>小结</strong>: 看输出父节点的顺序，就确定是前序， 还是后序</p><p><strong>前序查找思路</strong></p><ul><li>先判断当前结点的no是否等于要查找的</li><li>如果是相等，则返回当前结点</li><li>如果不等，则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</li><li>如果左递归前序查找，找到结点，则返回，否继续判断,当前的结点的右子节点是否为空，如果不空，则继续向右递归</li></ul><p><strong>中序查找思路</strong></p><ul><li>判断当前结点的左子节点是否为空，如果不为空，则递归中序查找</li><li>如果找到，则返回，如果没有找到，就和当前结点比较，如果是则返回当前结点，否则继续进行右递归的中序查找</li><li>如果右递归中序查找，找到就返回，否则返回null</li></ul><p><strong>后序查找思路</strong></p><ul><li>判断当前结点的左子节点是否为空，如果不为空，则递归后序查找</li><li>如果找到，就返回，如果没有找到，就判断当前结点的右子节点是否为空，如果不为空，则右递归进行后序查找如果找到，就返回</li><li>就和当前结点进行，比如，如果是则返回，否则返回null</li></ul><p><strong>删除节点</strong></p><ul><li>如果删除的节点是叶子结点,则删除该结点</li><li>如果删除的节点是非叶子结点,则删除该子树</li><li>思路:<ul><li>如果树是空树root,如果只有一个root结点,则等价将二叉树清空</li><li>因为我们的二叉树是单向的，所以我们是判断<font color="red">当前结点的子结点</font>是来需要删除结点，而不能去判断当前这个结点是不是需要删除结点.</li><li>如果当前结点的左子结点不为空，并且左子结点就是要删除结点，就将thisleft=null;并且就返回(结束递归删除)</li><li>如果当前结点的右子结点不为空，并且右子结点就是要删除结点，就将this.right= null;并且就返回(结束递归删除)</li><li>如果第2和第3步没有删除结点，那么我们就需要向左子树进行递归删除</li><li>如果第4步也没有删除结点，则应当向右子树进行递归删除.</li></ul></li></ul><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/5 12:56 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryTreeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一颗二叉树</span>        <span class="token class-name">BinaryTree</span> binaryTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"易"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"艾希"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"奶妈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"蛮王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//手动创建二叉树</span>        root<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node3<span class="token punctuation">)</span><span class="token punctuation">;</span>        node3<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node4<span class="token punctuation">)</span><span class="token punctuation">;</span>        node3<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node5<span class="token punctuation">)</span><span class="token punctuation">;</span>        binaryTree<span class="token punctuation">.</span><span class="token function">setRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前序遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binaryTree<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binaryTree<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后序遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binaryTree<span class="token punctuation">.</span><span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试查找</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前序查找"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> resnode <span class="token operator">=</span> binaryTree<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resnode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了,信息为 no=%d name=%s"</span><span class="token punctuation">,</span> resnode<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resnode<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到 no = %d 的英雄"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序查找"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> resnode2 <span class="token operator">=</span> binaryTree<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resnode2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了,信息为 no=%d name=%s"</span><span class="token punctuation">,</span> resnode2<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resnode2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到 no = %d 的英雄"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后序查找"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> resnode3 <span class="token operator">=</span> binaryTree<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resnode3 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"找到了,信息为 no=%d name=%s"</span><span class="token punctuation">,</span> resnode3<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resnode3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到 no = %d 的英雄"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//删除节点</span>        binaryTree<span class="token punctuation">.</span><span class="token function">delNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binaryTree<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义BinaryTree 二叉树</span><span class="token keyword">class</span> <span class="token class-name">BinaryTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoot</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉树为空,无法遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉树为空,无法遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">.</span><span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉树为空,无法遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序查找</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序查找</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">infixOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">infixOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后序查找</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">postOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">postOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                root<span class="token punctuation">.</span><span class="token function">delNode</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空树,不能删除~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建HeroNode 节点</span><span class="token keyword">class</span> <span class="token class-name">HeroNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> left<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"HeroNode&#123;"</span> <span class="token operator">+</span>                <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出父节点</span>        <span class="token comment">//递归向左子树前序遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//递归向右子树前序遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//递归向左子树前序遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出父节点</span>        <span class="token comment">//递归向右子树前序遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写后序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//递归向左子树前序遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//递归向右子树前序遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">postOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出父节点</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序遍历查找</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">preOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//比较当前节点是不是</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//不是的话,则判断当前结点的左子节点是否为空，如果不为空，则递归前序查找</span>        <span class="token class-name">HeroNode</span> resNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明找到</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//左递归前序查找，找到结点，则返回，否继续判断,当前的结点的右子节点是否为空，如果不空，则继续向右递归</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//中序遍历查找</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">infixOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断当前结点的左子节点是否为空，如果不为空，则递归中序查找</span>        <span class="token class-name">HeroNode</span> resNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明找到</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果没有找到，就和当前结点比较</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//否则继续进行右递归的中序查找</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//后序遍历查找</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">postOrderSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断当前结点的左子节点是否为空，如果不为空，则递归后序查找</span>        <span class="token class-name">HeroNode</span> resNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">postOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明找到</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//如果没有找到，就右递归的后序查找</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            resNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">postOrderSearch</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明找到</span>            <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//左右子树都没有找到,就比较当前节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> resNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归删除节点</span>    <span class="token comment">//如果删除的节点是叶子结点,则删除该结点  如果删除的节点是非叶子结点,则删除该子树</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">delNode</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">delNode</span><span class="token punctuation">(</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">前序遍历<span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'易'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'艾希'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'奶妈'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'霞'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'蛮王'</span><span class="token punctuation">&#125;</span>中序遍历<span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'艾希'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'易'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'霞'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'奶妈'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'蛮王'</span><span class="token punctuation">&#125;</span>后序遍历<span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'艾希'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'霞'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'蛮王'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'奶妈'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'易'</span><span class="token punctuation">&#125;</span>前序查找找到了<span class="token punctuation">,</span>信息为 no<span class="token operator">=</span><span class="token number">5</span> name<span class="token operator">=</span>霞中序查找找到了<span class="token punctuation">,</span>信息为 no<span class="token operator">=</span><span class="token number">5</span> name<span class="token operator">=</span>霞后序查找找到了<span class="token punctuation">,</span>信息为 no<span class="token operator">=</span><span class="token number">5</span> name<span class="token operator">=</span>霞<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'易'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'艾希'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'奶妈'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'蛮王'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-顺序存储二叉树"><a href="#2-顺序存储二叉树" class="headerlink" title="2. 顺序存储二叉树"></a>2. 顺序存储二叉树</h3><p>基本说明</p><ul><li><p>从数据存储来看，<strong>数组存储方式</strong>和<strong>树的存储方式</strong>可以相互转换，即数组可以转换成树，树也可以转换成数组.</p></li><li><p>顺序存储二叉树的<strong>特点</strong>:</p><ul><li><p>顺序二叉树通常只考虑完全二叉树</p></li><li><p>第n个元素的左子节点为 2 * n + 1 </p></li><li><p>第n个元素的右子节点为 2 * n + 2</p></li><li><p>第n个元素的父节点为 (n-1) / 2</p></li><li><p>n : 表示二叉树中的第几个元素</p></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/c267a72ff22b4a58af5bdf370bd70ab5.png" alt="顺序存储二叉树"></p><p>要求:以数组的方式存放 int[] arr = {1, 2, 3, 4, 5, 6, 7} 在遍历数组 时,仍然可以以前序遍历的方式完成结点的遍历</p><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/8 14:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrBinaryTreeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ArrBinaryTree</span> arrBinaryTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrBinaryTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        arrBinaryTree<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ArrBinaryTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ArrBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//重载preOrder</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写一个方法,完成顺序存储二叉树的前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果数组为空,或arr.length==0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组为空,不能按照二叉树的前序遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出当前这个元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//向左递归遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//向右递归遍历</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">7</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-线索化二叉树"><a href="#3-线索化二叉树" class="headerlink" title="3. 线索化二叉树"></a>3. 线索化二叉树</h3><ul><li>n个结点的二叉链表中含有n+1 【公式 2n-(n-1)=n+1】 个空指针域。利用二叉链表中的空指针域，存放指向<font color="blue">该结点</font>在<font color="red">某种遍历次序下</font>的前驱和后继结点的指针（这种附加的指针称为”线索”）</li><li>这种加上了线索的二叉链表称为<strong>线索链表</strong>，相应的二叉树称为<strong>线索二叉树</strong><strong>(Threaded</strong> <strong>BinaryTree</strong><strong>)<strong>。根据线索性质的不同，线索二叉树可分为</strong>前序线索二叉树、中序线索二叉树</strong>和<strong>后序线索二叉树</strong>三种</li><li>一个结点的前一个结点，称为<font color="red">前驱</font>结点</li><li>一个结点的后一个结点，称为<font color="red">后继</font>结点</li></ul><p>案例:</p><p><img src="https://img-blog.csdnimg.cn/f88e30dbc42f438db0ea13ed33e3818c.png" alt="中序线索二叉树"></p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">TreadBinaryTree</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/8 15:40 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreadedBinaryTreeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HeroNode</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"king"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> node6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">"dim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node2<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node3<span class="token punctuation">)</span><span class="token punctuation">;</span>        node2<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node4<span class="token punctuation">)</span><span class="token punctuation">;</span>        node2<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node5<span class="token punctuation">)</span><span class="token punctuation">;</span>        node3<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试中序线索化</span>        <span class="token class-name">ThreadedBinaryTree</span> threadedBinaryTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadedBinaryTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadedBinaryTree<span class="token punctuation">.</span><span class="token function">setRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadedBinaryTree<span class="token punctuation">.</span><span class="token function">threadedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试:以10号结点测试</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10号结点的前驱结点是: "</span> <span class="token operator">+</span> node5<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10号结点的后继结点是: "</span> <span class="token operator">+</span> node5<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用线索化的方式遍历 线索化二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        threadedBinaryTree<span class="token punctuation">.</span><span class="token function">threadedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义ThreadedBinaryTree 实现了线索化功能的二叉树</span><span class="token keyword">class</span> <span class="token class-name">ThreadedBinaryTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> root<span class="token punctuation">;</span>    <span class="token comment">//为了实现线索化,需要创建要给指向当前节点的前驱节点的指针</span>    <span class="token comment">// 在递归进行线索化时,pre总是保留前一个结点</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoot</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//重载一把</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">threadedNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">treadedNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历线索化 二叉树的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">threadedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//定义一个变量.存储当前遍历的结点,从root开始</span>        <span class="token class-name">HeroNode</span> node <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//循环的找到leftType == 1 的结点,第一个找到的就是8这个结点</span>            <span class="token comment">//后面随着遍历而变化,因为当leftType == 1 时,说明该结点是按照线索化处理后的结点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeftType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//如果当前结点的右指针指向的是后继节点,就一直输出</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRightType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//获取当前结点的后继结点</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//替换这个遍历的结点</span>            node <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写对二叉树进行中序线索化的方法</span>    <span class="token comment">/**     * @param node 就是当前需要线索化的结点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">treadedNodes</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//先线索化左子树</span>        <span class="token function">treadedNodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//线索化当前结点</span>        <span class="token comment">//处理当前节点的前驱节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//让当前节点的左指针指向前驱结点</span>            node<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//修改当前结点的左指针的类型,指向前驱结点</span>            node<span class="token punctuation">.</span><span class="token function">setLeftType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//处理后继结点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> pre<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//让当前节点的右指针指向当前结点</span>            pre<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//修改当前结点的右指针的类型</span>            pre<span class="token punctuation">.</span><span class="token function">setRightType</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//!!! 每处理一个结点后,就让当前结点是下一个结点的前驱结点</span>        pre <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token comment">//线索化右子树</span>        <span class="token function">treadedNodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建HeroNode 节点</span><span class="token keyword">class</span> <span class="token class-name">HeroNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> left<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> right<span class="token punctuation">;</span>    <span class="token comment">//说明</span>    <span class="token comment">// 1. 如果 leftType == 0 表示指向的是左子树,如果是1则表示指向前驱结点</span>    <span class="token comment">// 1. 如果 rightType == 0 表示指向的是右子树,如果是1则表示指向后驱结点</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> leftType<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rightType<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLeftType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> leftType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeftType</span><span class="token punctuation">(</span><span class="token keyword">int</span> leftType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>leftType <span class="token operator">=</span> leftType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRightType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rightType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRightType</span><span class="token punctuation">(</span><span class="token keyword">int</span> rightType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rightType <span class="token operator">=</span> rightType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"HeroNode&#123;"</span> <span class="token operator">+</span>                <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">10</span>号结点的前驱结点是<span class="token operator">:</span> <span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">&#125;</span><span class="token number">10</span>号结点的后继结点是<span class="token operator">:</span> <span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'tom'</span><span class="token punctuation">&#125;</span>使用线索化的方式遍历 线索化二叉树<span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'mary'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'king'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'tom'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">14</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'dim'</span><span class="token punctuation">&#125;</span><span class="token class-name">HeroNode</span><span class="token punctuation">&#123;</span>no<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'smith'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-赫夫曼树"><a href="#4-赫夫曼树" class="headerlink" title="4. 赫夫曼树"></a>4. 赫夫曼树</h3><p>基本介绍</p><ul><li><p>给定n个权值作为n个<font color="blue">叶子结点</font>，构造一棵二叉树，若该树的<font color="blue">带权路径长度(wpl)</font>达到最小，称这样的二叉树为<font color="blue">最优二叉树</font>，也称为<font color="blue">哈夫曼树(Huffman Tree)</font>, 或<font color="blue">霍夫曼树</font>。</p></li><li><p>赫夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p></li></ul><p>重要概念,举例说明</p><ul><li>路径和路径长度：在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。通路中分支的数目称为路径长度。若规定根结点的层数为1，则从根结点到第L层结点的路径长度为L-1</li><li>结点的权及带权路径长度：若将树中结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。结点的带权路径长度为：从根结点到该结点之间的路径长度与该结点的权的乘积</li><li>树的带权路径长度：树的带权路径长度规定为所有叶子结点的带权路径长度之和，记为WPL(weighted path length) ,权值越大的结点离根结点越近的二叉树才是最优二叉树。</li><li>WPL最小的就是赫夫曼树</li></ul><p>构成赫夫曼树的步骤：</p><ul><li><p>从小到大进行排序, 将每一个数据，每个数据都是一个节点 ， 每个节点可以看成是一颗最简单的二叉树</p></li><li><p>取出根节点权值最小的两颗二叉树 </p></li><li><p>组成一颗新的二叉树, 该新的二叉树的根节点的权值是前面两颗二叉树根节点权值的和 </p></li><li><p>再将这颗新的二叉树，以根节点的权值大小 再次排序， 不断重复 1-2-3-4 的步骤，直到数列中，所有的数据都被处理，就得到一颗赫夫曼树</p></li></ul><p>数列{13,7,8,3,29,6,1} -&gt;赫夫曼树  先<strong>排序</strong></p><p><img src="https://img-blog.csdnimg.cn/422ab00495394cc7bb670715edf74f83.png" alt="赫夫曼树"></p><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/10 13:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Node</span> root <span class="token operator">=</span> <span class="token function">creatHuffmanTree</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序遍历的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//创建赫夫曼树的方法</span>    <span class="token comment">/**     *     * @param arr 需要创建赫夫曼树的数组     * @return 创建好后的赫夫曼树的root     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">creatHuffmanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value <span class="token operator">:</span> arr        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//排序</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nodes = "</span> <span class="token operator">+</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出根节点权值最小的两颗二叉树</span>            <span class="token class-name">Node</span> leftNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出根节点权值第二小的两颗二叉树</span>            <span class="token class-name">Node</span> rightNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//构建一颗新的二叉树</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">.</span>value <span class="token operator">+</span> rightNode<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            <span class="token comment">//从ArrayList删除处理过的二叉树</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将parent加入到nodes</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//节点类</span><span class="token comment">//为了让node 对象持续排序Collections集合排序 需要实现Comparable接口</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">//节点权值</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token comment">//前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//从小到大排(从大到小 -(this.value - o.value))</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">-</span> o<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">67</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">29</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">38</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token class-name">Node</span><span class="token punctuation">&#123;</span>value<span class="token operator">=</span><span class="token number">13</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-赫夫曼编码"><a href="#5-赫夫曼编码" class="headerlink" title="5. 赫夫曼编码"></a>5. 赫夫曼编码</h3><p><strong>基本介绍</strong></p><ul><li><p>赫夫曼编码也翻译为 <a href="https://baike.baidu.com/item/%E5%93%88%E5%A4%AB%E6%9B%BC"> 哈夫曼</a>编码(Huffman Coding)，又称霍夫曼编码，是一种编码方式, 属于一种程序算法</p></li><li><p>赫夫曼编码是赫哈夫曼树在电讯通信中的经典的应用之一。</p></li><li><p>赫夫曼编码广泛地用于数据文件压缩。其压缩率通常在20%90%之间</p></li><li><p>赫夫曼码是可变<a href="https://baike.baidu.com/item/%E5%AD%97%E9%95%BF/97660">字长</a>编码(VLC)的一种。Huffman于1952年提出一种编码方法，称之为最佳编码</p></li><li><p>注意, 赫夫曼树根据排序方法不同，也可能不太一样，<strong>这样对应的赫夫曼编码也不完全一样</strong>，但是wpl 是一样的，都是最小的 </p></li></ul><p>案例 压缩 -&gt; 解压 和文件的压缩 -&gt; 解压:</p><ul><li> 一段文本: i like like like java do you like a java  </li><li>根据赫夫曼编码压缩数据的原理，需要创建 “i like like like java do you like a java” 对应的赫夫曼树.</li><li>生成赫夫曼树对应的赫夫曼编码</li><li>使用赫夫曼编码来生成赫夫曼编码数据  (已压缩)</li><li>转成赫夫曼编码对应的字符串 “101010…”</li><li>=&gt;对照赫夫曼编码重新转成原来的字符串</li></ul><p>代码实现(解压功能有bug ：数组下标越界和空指针异常)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>huffmanCode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span></span><span class="token class-name">HuffmanTree</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>corba<span class="token punctuation">.</span>se<span class="token punctuation">.</span>pept<span class="token punctuation">.</span>encoding<span class="token punctuation">.</span></span><span class="token class-name">OutputObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/10 19:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuffmanCode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">"i like like like java do you like a java"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> contentBytes <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanCodeBytes <span class="token operator">=</span> <span class="token function">huffmanZip</span><span class="token punctuation">(</span>contentBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"压缩后的结果:"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>huffmanCodeBytes<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"长度= "</span> <span class="token operator">+</span> huffmanCodeBytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decode <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>huffmanCodes<span class="token punctuation">,</span> huffmanCodeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解压后原来的字符串="</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>decode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> srcFile <span class="token operator">=</span> <span class="token string">"G://1.jpg"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> dstFile <span class="token operator">=</span> <span class="token string">"G://dst.zip"</span><span class="token punctuation">;</span>        <span class="token function">zipFile</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">,</span> dstFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"压缩成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> zipFile <span class="token operator">=</span> <span class="token string">"G://dst.zip"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> dstFile2 <span class="token operator">=</span> <span class="token string">"G://2.jpg"</span><span class="token punctuation">;</span>        <span class="token function">unZipFile</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">,</span> dstFile2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"解压成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用一个方法将前面的方法封装起来,便于调用</span>    <span class="token comment">/**     * @param bytes 原始的字符串对应的字节数组     * @return 是经过 赫夫曼编码处理后的字节数组(压缩后的数组)     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">huffmanZip</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token function">getNodes</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//根据nodes 创建赫夫曼树</span>        <span class="token class-name">Node</span> huffmanTreeRoot <span class="token operator">=</span> <span class="token function">creatHuffmanTree</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//对应的赫夫曼编码</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> huffmanCodes <span class="token operator">=</span> <span class="token function">getCodes</span><span class="token punctuation">(</span>huffmanTreeRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 根据生成的赫夫曼编码,压缩得到压缩后的赫夫曼编码字节数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanCodeBytes <span class="token operator">=</span> <span class="token function">zip</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> huffmanCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> huffmanCodeBytes<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将字符串对应的byte[]数组,通过生成的赫夫曼编码表,返回一个赫夫曼码压缩后的byte[]</span>    <span class="token comment">/**     * @param bytes        原始的字符串对应的byte[]     * @param huffmanCodes 生成的赫夫曼编码map     * @return 返回赫夫曼编码处理后的byte[]     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">zip</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> huffmanCodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.利用HuffmanCodes 将 bytes 转成 赫夫曼编码对应的字符串</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>huffmanCodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//统计返回 byte[] huffmanCodeBytes 长度  一句话表示 int len = (StringBuilder.length+7)/8</span>        <span class="token keyword">int</span> len<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            len <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            len <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建存储压缩后的byte数组</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanCodeBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录是第几个byte</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//因为是每8位对应一个byte,所以步长+8</span>            <span class="token class-name">String</span> strByte<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">></span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//不够八位</span>                strByte <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                strByte <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//将strByte 转成一个byte,放入到 huffmanCodeBytes</span>            huffmanCodeBytes<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>strByte<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> huffmanCodeBytes<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//完成数据的解压</span>    <span class="token comment">/**     * @param huffmanCodes 赫夫曼编码表 map     * @param huffmanBytes 赫夫曼编码得到的字节数组     * @return 原来的字符串对应的数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> huffmanCodes<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanBytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//转成赫夫曼编码对应的字符串 "101010..."</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将byte数组转成二进制字符串</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> huffmanBytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span> b <span class="token operator">=</span> huffmanBytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> huffmanBytes<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">byteToBitString</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//解码 把赫夫曼编码进行调换,因为反向查询 a->100 100->a</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Byte</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Byte</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> huffmanCodes<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建一个集合,存放byte</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stringBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token class-name">Byte</span> b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> key <span class="token operator">=</span> stringBuilder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// i 不动,count移动,直到匹配到一个字符</span>                b <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//没有匹配到</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">+=</span> count<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//for 循环结束 list中就存放了所有的字符</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//完成对文件的压缩</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">zipFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">String</span> dstFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanBytes <span class="token operator">=</span> <span class="token function">huffmanZip</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>huffmanBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>huffmanCodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//完成对文件的解压</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unZipFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> zipFile<span class="token punctuation">,</span> <span class="token class-name">String</span> dstFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> huffmanBytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> huffmanCodes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//解码</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">decode</span><span class="token punctuation">(</span>huffmanCodes<span class="token punctuation">,</span> huffmanBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将bytes 数组写入目标文件</span>            os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>dstFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将一个byte 转成一个二进制字符串     *     * @param flag 标志是否需要补高位 如果是true,表示需要 false 不需要 (最后一个字节)     * @param b    传入的byte     * @return 该b对应的二进制字符串(按补码返回)     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">byteToBitString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">,</span> <span class="token keyword">byte</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">// 将 b 转成int</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">|=</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回的是temp对应的二进制补码</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> string<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成赫夫曼树对应的赫夫曼编码</span>    <span class="token comment">//将赫夫曼编码存放在Map&lt;Byte,String> 形式: 32->01 97->100</span>    <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> huffmanCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//在生成的赫夫曼编码表示,需要去拼接路径,定义一个StringBuilder,存储某个叶子结点的路径</span>    <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//重载一下</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCodes</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//处理左子树</span>        <span class="token function">getCodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理右子树</span>        <span class="token function">getCodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> huffmanCodes<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 功能:将传入的node结点的所有叶子结点的赫夫曼编码得到,并放入到huffmanCodes集合     *     * @param node          传入结点     * @param code          路径:左子结点是0,右子结点1     * @param stringBuilder 用于拼接路径     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getCodes</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> stringBuilder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> stringBuilder2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将code加入到stringBuilder2</span>        stringBuilder2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断当前节点是叶子节点还是非叶子结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>data <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//非叶子结点</span>                <span class="token comment">//向左递归</span>                <span class="token function">getCodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">,</span> stringBuilder2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//像右递归</span>                <span class="token function">getCodes</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> stringBuilder2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明是一个叶子结点</span>                huffmanCodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>data<span class="token punctuation">,</span> stringBuilder2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 前序遍历的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token class-name">Node</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"赫夫曼空树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @param bytes 接收字节数组     * @return 返回数是List 形式     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> <span class="token function">getNodes</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个ArrayList</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存储每一个byte出现的次数 ->map[key,value]</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Integer</span> count <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//map 没有数据</span>                counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//把每一个键值对转成一个node对象,并加入到nodes集合  遍历map</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Byte</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> counts<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//通过list,创建对应的赫夫曼树</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">creatHuffmanTree</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> nodes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//排序</span>            <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nodes = "</span> <span class="token operator">+</span> nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出根节点权值最小的两颗二叉树</span>            <span class="token class-name">Node</span> leftNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出根节点权值第二小的两颗二叉树</span>            <span class="token class-name">Node</span> rightNode <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//构建一颗新的二叉树,他的根结点没有data,只有权值</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> leftNode<span class="token punctuation">.</span>weight <span class="token operator">+</span> rightNode<span class="token punctuation">.</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> leftNode<span class="token punctuation">;</span>            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> rightNode<span class="token punctuation">;</span>            <span class="token comment">//从ArrayList删除处理过的二叉树</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>rightNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将新的二叉树加入到nodes</span>            nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后的结点就是赫夫曼树的根结点</span>        <span class="token keyword">return</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Byte</span> data<span class="token punctuation">;</span> <span class="token comment">//存储数据本身.'a' => 97 ' ' =>32</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span> <span class="token comment">//权值,字符出现的次数</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Byte</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Node</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">-</span> o<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"data="</span> <span class="token operator">+</span> data <span class="token operator">+</span>                <span class="token string">", weight="</span> <span class="token operator">+</span> weight <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//前序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">preOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">压缩后的结果<span class="token operator">:</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">88</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">117</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">]</span>长度<span class="token operator">=</span> <span class="token number">17</span>解压后原来的字符串<span class="token operator">=</span>i like like like java <span class="token keyword">do</span> you like a java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-二叉排序树"><a href="#6-二叉排序树" class="headerlink" title="6.二叉排序树"></a>6.二叉排序树</h3><p>二叉排序树：BST: (Binary Sort(Search) Tree), 对于二叉排序树的任何一个非叶子节点，要求左子节点的值比当前节点的值小，右子节点的值比当前节点的值大。  如果有相同的值，可以将该节点放在左子节点或右子节点</p><p><img src="https://img-blog.csdnimg.cn/00e7f5c89bea4dc79f56fe518b3bf7a5.png" alt="二叉排序树"></p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>binartSortTree</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/12 9:51 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySortTreeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">BinarySortTree</span> binarySortTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySortTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            binarySortTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        binarySortTree<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binarySortTree<span class="token punctuation">.</span><span class="token function">delNode</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        binarySortTree<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//二叉排序树</span><span class="token keyword">class</span> <span class="token class-name">BinarySortTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token comment">//查找要删除的结点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找父结点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @param node 传入的结点(当做二叉排序树的根结点)     * @return 返回的 以node 为根结点的二叉排序树的最小结点值     * 删除node 为根结点的二叉排序树的最小结点     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delRightTreeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> target <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token comment">//循环查找左子结点,就会找到最小值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//删除最小结点</span>        <span class="token function">delNode</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> targetNode <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//要删除的结点是叶子结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//是左子结点</span>                    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//要删除的结点有两颗子树</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> minVal <span class="token operator">=</span> <span class="token function">delRightTreeMin</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                targetNode<span class="token punctuation">.</span>value <span class="token operator">=</span> minVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//只有一颗子树的结点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉排序树为空！不能遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查找要删除的节点     *     * @param value 希望删除的结点的值     * @return 如果找到返回该结点，否则返回null     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查找要删除节点的父结点     *     * @param value 要找到结点的值     * @return 返回要删除节点的父结点，如果没有返回nul     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-平衡二叉树"><a href="#7-平衡二叉树" class="headerlink" title="7. 平衡二叉树"></a>7. 平衡二叉树</h3><ul><li><p>平衡二叉树也叫平衡二叉排序(搜索)树（Self-balancing binary search tree）又被称为AVL树， 可以<strong>保证查询效率较高</strong>。</p></li><li><p>具有以下<strong>特点</strong>：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。平衡二叉树的常用实现方法有<a href="https://baike.baidu.com/item/%E7%BA%A2%E9%BB%91%E6%A0%91/2413209">红黑树</a>、<a href="https://baike.baidu.com/item/AVL/7543015">AVL</a>、<a href="https://baike.baidu.com/item/%E6%9B%BF%E7%BD%AA%E7%BE%8A%E6%A0%91/13859070">替罪羊树</a>、<a href="https://baike.baidu.com/item/Treap">Treap</a>、<a href="https://baike.baidu.com/item/%E4%BC%B8%E5%B1%95%E6%A0%91/7003945">伸展树</a>等。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/dda5bc0ab06944ef8b5949a493192d23.png" alt="eg"></p><p><img src="https://img-blog.csdnimg.cn/66c187d4e742460e8086e11e7e580d03.jpg" alt="左右旋转"></p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tree<span class="token punctuation">.</span>avlTree</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/12 18:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AVLTreeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//  int [] arr = &#123;4,3,6,5,7,8&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">AVLTree</span> avlTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AVLTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            avlTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        avlTree<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avlTree<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avlTree<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>avlTree<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">AVLTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//查找要删除的结点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查找父结点</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> root<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * @param node 传入的结点(当做二叉排序树的根结点)     * @return 返回的 以node 为根结点的二叉排序树的最小结点值     * 删除node 为根结点的二叉排序树的最小结点     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delRightTreeMin</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> target <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token comment">//循环查找左子结点,就会找到最小值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            target <span class="token operator">=</span> target<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//删除最小结点</span>        <span class="token function">delNode</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//删除结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> targetNode <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Node</span> parent <span class="token operator">=</span> <span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//要删除的结点是叶子结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//是左子结点</span>                    parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> parent<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//要删除的结点有两颗子树</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> targetNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> minVal <span class="token operator">=</span> <span class="token function">delRightTreeMin</span><span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                targetNode<span class="token punctuation">.</span>value <span class="token operator">=</span> minVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//只有一颗子树的结点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>targetNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>left <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            parent<span class="token punctuation">.</span>right <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        root <span class="token operator">=</span> targetNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉排序树为空！不能遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span> right<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回左子树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> left<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回右子树的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> right<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回以该结点为根结点的高度</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> left<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> right<span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//左旋转方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建新结点,以当前结点的值</span>        <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把新的结点的左子树设置成当前结点的左子树</span>        newNode<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment">//把新的结点的右子树设置成当前结点的右子树的左子树</span>        newNode<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">//把当前结点的值替换成右子结点的值</span>        value <span class="token operator">=</span> right<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">//把当前结点的右子树设置成当前结点右子树的右子树</span>        right <span class="token operator">=</span> right<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment">//把当前结点的左子树(结点)设置成新的结点</span>        left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//右旋转方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//新结点的右子树设置成当前结点的右子树</span>        newNode<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token comment">//新结点的左子树设置成当前结点的左子树的右子树</span>        newNode<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token comment">//当前结点的值换为左子结点的值</span>        value <span class="token operator">=</span> left<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token comment">//当前结点的左子树设置成左子树的左子树</span>        left <span class="token operator">=</span> left<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token comment">///当前结点的右子树设置为新结点</span>        right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查找要删除的节点     *     * @param value 希望删除的结点的值     * @return 如果找到返回该结点，否则返回null     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 查找要删除节点的父结点     *     * @param value 要找到结点的值     * @return 返回要删除节点的父结点，如果没有返回nul     */</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">searchParent</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">searchParent</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Node&#123;"</span> <span class="token operator">+</span>                <span class="token string">"value="</span> <span class="token operator">+</span> value <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 1.当符合右旋转的条件时</span>        <span class="token comment">// 2.如果它的左子树的的右子树高度大于它的左子树的高度</span>        <span class="token comment">// 3.先对当前这个结点的左节点进行左旋转</span>        <span class="token comment">// 4.再对当前结点进行右旋转的操作即可</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//左旋转</span>            <span class="token comment">//如果它的右子树的左子树的高度大于它的右子树的右子树的高度</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">.</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> right<span class="token punctuation">.</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//先对右子结点进行右转移</span>                right<span class="token punctuation">.</span><span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//然后再对当前结点进行左转移</span>                <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//右旋转</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> left<span class="token punctuation">.</span><span class="token function">rightHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> left<span class="token punctuation">.</span><span class="token function">leftHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//先对当前这个结点的左节点进行左旋转</span>                left<span class="token punctuation">.</span><span class="token function">leftRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">rightRotate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写中序遍历</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right<span class="token punctuation">.</span><span class="token function">infixOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多路查找树"><a href="#多路查找树" class="headerlink" title="多路查找树"></a>多路查找树</h3><h4 id="1-多叉树"><a href="#1-多叉树" class="headerlink" title="1. 多叉树"></a>1. 多叉树</h4><ul><li>在二叉树中，每个节点有数据项，最多有两个子节点。如果<strong>允许每个节点可以有更多的数据项和更多的子节点</strong>，就是<strong>多叉树</strong></li></ul><h4 id="2-B树"><a href="#2-B树" class="headerlink" title="2. B树"></a>2. B树</h4><ul><li>B树通过重新组织节点，降低树的高度，并且减少i/o读写次数来提升效率  </li><li>B树的阶：节点的最多子节点个数。比如2-3树的阶是3，2-3-4树的阶是4</li><li>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点</li><li>关键字集合分布在整颗树中, 即叶子节点和非叶子节点都存放数据.</li><li>搜索有可能在非叶子结点结束</li><li>其搜索性能等价于在关键字全集内做一次二分查找</li></ul><p><img src="https://img-blog.csdnimg.cn/a385deda670f48569e2ecf8e1b4e39ee.png" alt="B树"></p><h5 id="2-1-2-3树基本介绍"><a href="#2-1-2-3树基本介绍" class="headerlink" title="2.1 2-3树基本介绍"></a>2.1 2-3树基本介绍</h5><ul><li><p>2-3树的所有叶子节点都在同一层.(只要是B树都满足这个条件)</p></li><li><p>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点.</p></li><li><p>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点.</p></li><li><p>2-3树是由二节点和三节点构成的树。</p></li><li><p>插入规则:</p><ul><li><p>2-3树的所有叶子节点都在同一层.(只要是B树都满足这个条件)</p></li><li><p>有两个子节点的节点叫二节点，二节点要么没有子节点，要么有两个子节点.</p></li><li><p>有三个子节点的节点叫三节点，三节点要么没有子节点，要么有三个子节点</p></li><li><p>当按照规则插入一个数到某个节点时，不能满足上面三个要求，就需要拆，先向上拆，如果上层满，则拆本层，拆后仍然需要满足上面3个条件。 </p></li><li><p>对于三节点的子树的值大小仍然遵守(BST 二叉排序树)的规则</p></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/2fdcf1746da94cf1b85391a64ef05a85.png" alt="2-3树"></p><h4 id="3-B-树"><a href="#3-B-树" class="headerlink" title="3. B+树"></a>3. B+树</h4><ul><li><p>B+树的搜索与B树也基本相同，区别是B+树只有达到叶子结点才命中（B树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找</p></li><li><p>所有<strong>关键字都出现在叶子结点的链表中</strong>（即数据只能在叶子节点【也叫稠密索引】），且链表中的关键字(数据)恰好是有序的。</p></li><li><p>不可能在非叶子结点命中</p></li><li><p>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层</p></li><li><p>更适合文件索引系统</p></li><li><p>B树和B+树各有自己的应用场景，不能说B+树<strong>完全比</strong>B树好，反之亦然.</p></li></ul><p><img src="https://img-blog.csdnimg.cn/6e6cc37542f4416f991d9ba1744dfc15.png" alt="B+树"></p><h4 id="4-B-树"><a href="#4-B-树" class="headerlink" title="4. B*树"></a>4. B*树</h4><ul><li>B*树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为2/3，而B+树的块的最低使用率为B+树的1/2。</li><li>从第1个特点我们可以看出，B*树分配新结点的概率比B+树要低，空间使用率更高</li></ul><p><img src="https://img-blog.csdnimg.cn/b2d68c1dd4f94fd993548864f7b1bb83.png" alt="B*树"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据结构和算法(四)</title>
      <link href="/2021-10-02-java-shu-ju-jie-gou-he-suan-fa-si.html"/>
      <url>/2021-10-02-java-shu-ju-jie-gou-he-suan-fa-si.html</url>
      
        <content type="html"><![CDATA[<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a><center>查找</h3><h4 id="1-1-线性查找"><a href="#1-1-线性查找" class="headerlink" title="1.1 线性查找"></a>1.1 线性查找</h4><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>search</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/3 16:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeqSearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">seqSearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了下标为:"</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">seqSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//线性查找逐一对比,发现有相同值就返回下标</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">找到了下标为<span class="token operator">:</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-二分查找"><a href="#1-2-二分查找" class="headerlink" title="1.2 二分查找"></a>1.2 二分查找</h4><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>search</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/4 13:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1625</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> i <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ArrayList="</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> findval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//当left > right 说明没有找到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> midvalue <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findval <span class="token operator">></span> midvalue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//向右递归</span>            <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> findval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>findval <span class="token operator">&lt;</span> midvalue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> findval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.在找到mid的索引值,不要马上返回</span>            <span class="token comment">//2.向mid左边扫描,将所有满足的元素的下标放入到集合ArrayList中</span>            <span class="token comment">//3.向mid右边扫描,将所有满足的元素的下标放入到集合ArrayList中</span>            <span class="token comment">//4.返回ArrayLis</span>            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> resIndexList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//向左扫描</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">!=</span> findval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    resIndexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                resIndexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>                temp <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> arr<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">!=</span> findval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    resIndexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>                    temp <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> resIndexList<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-插值查找"><a href="#1-3-插值查找" class="headerlink" title="1.3 插值查找"></a>1.3 插值查找</h4><ul><li><p>插值查找算法类似于二分查找，不同的是插值查找每次从<strong>自适应****mid</strong>处开始查找。</p></li><li><p>将折半查找中的求mid 索引的公式 , low 表示左边索引left, high表示右边索引right. key 就是前面我们讲的 findVal</p><p><img src="https://img-blog.csdnimg.cn/9ef76a13213741cda4beebcd41c793b1.png" alt="二分=&gt;插值"></p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>key <span class="token operator">-</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">/*插值索引*/</span>对应前面的代码公式： <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right – left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>findVal – arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> – arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>search</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/4 14:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertValueSearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index = "</span><span class="token operator">+</span><span class="token function">insertValueSearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println(Arrays.toString(arr));</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">insertValueSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> findVal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//注意findVal &lt; arr[0] 和 findVal > arr[arr.length - 1] 必须有 否则可能越界</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right <span class="token operator">||</span> findVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> findVal <span class="token operator">></span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>findVal <span class="token operator">-</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> midValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>findVal <span class="token operator">></span> midValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">insertValueSearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> findVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>findVal <span class="token operator">&lt;</span> midValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">insertValueSearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> findVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">index <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4-斐波那契-黄金分割-查找"><a href="#1-4-斐波那契-黄金分割-查找" class="headerlink" title="1.4 斐波那契(黄金分割)查找"></a>1.4 斐波那契(黄金分割)查找</h4><p>原理:</p><p>斐波那契查找原理与前两种相似，仅仅改变了中间结点（mid）的位置，mid不再是中间或插值得到，而是位于黄金分割点附近，即mid=low+F(k-1)-1（F代表斐波那契数列），如下图所示</p><p><img src="https://img-blog.csdnimg.cn/49c1b593a8c54e52bfd97284e13a3136.png" alt="斐波那契查找原理示意图"></p><p>对F(k-1)-1的理解：</p><ul><li>由斐波那契数列 F[k]=F[k-1]+F[k-2] 的性质，可以得到 （F[k]-1）=（F[k-1]-1）+（F[k-2]-1）+1 。该式说明：只要顺序表的长度为F[k]-1，则可以将该表分成长度为F[k-1]-1和F[k-2]-1的两段，即如上图所示。从而中间位置为mid=low+F(k-1)-1</li><li>类似的，每一子段也可以用相同的方式分割</li><li>但顺序表长度n不一定刚好等于F[k]-1，所以需要将原来的顺序表长度n增加至F[k]-1。这里的k值只要能使得F[k]-1恰好大于或等于n即可，由以下代码得到,顺序表长度增加后，新增的位置（从n+1到F[k]-1位置），都赋为n位置的值可。</li></ul><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>search</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/4 14:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FibonacciSearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index= "</span> <span class="token operator">+</span> <span class="token function">fibSearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//因为后面mid = low+F(k-1)-1,需要使用斐波那契数列,所以先获取一个斐波那契数列</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> f<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//编写斐波那契查找算法(非递归)</span>    <span class="token comment">/**     * @param a   数组     * @param key 需要查找的关键码（值）     * @return 返回对应的下标 没有返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> high <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 斐波那契数组下标</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//存放mid值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取到斐波那契数列</span>        <span class="token comment">//获取到斐波那契数组的下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">></span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//用high和 f[k]中的值比较(1, 1, 2, 3, 5, 8, 13, 21, 34, 55)  > 表示还没找到</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//因为f[k] 值可能大于a的长度,因此我们需要使用Arrays类,构造一个新的数组,并指向temp[],不足的部分用0补齐</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//实际上是用a数组最后的数填充temp eg:temp = &#123;1, 8, 20, 89, 1000, 1234,0,0&#125; => temp = &#123;1, 8, 20, 89, 1000, 1234,1234,&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//找到 key</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mid <span class="token operator">=</span> low <span class="token operator">+</span> f<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//向数组的前面查找</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">//说明 1.全部元素 = 前面的元素+后面的元素</span>                <span class="token comment">//2. f[k]+f[k-1]+f[k-2]</span>                <span class="token comment">//因为前面有f[k-1]个元素,所以可以继续拆分 f[k-1] = f[k-2]+f[k-3]</span>                <span class="token comment">//即 f[k-1]的前面继续查找 k-- 即下次循环mid =low+ f[k-1-1]-1</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> temp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 后面查找</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment">//说明 1.全部元素 = 前面的元素+后面的元素</span>                <span class="token comment">//2. f[k]+f[k-1]+f[k-2]</span>                <span class="token comment">//因为前面有f[k-2]个元素,所以可以继续拆分 f[k-2] = f[k-3]+f[k-4]</span>                <span class="token comment">//即 f[k-2]的前面继续查找 k-=2 即下次循环mid =low+ f[k-1-2]-1</span>                k <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//找到</span>                <span class="token comment">//需要确定返回的是哪个下表</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> high<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">nidex<span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据结构和算法(三)</title>
      <link href="/2021-10-01-java-shu-ju-jie-gou-he-suan-fa-san.html"/>
      <url>/2021-10-01-java-shu-ju-jie-gou-he-suan-fa-san.html</url>
      
        <content type="html"><![CDATA[<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a><center>排序算法</h3><ul><li><p>排序也称排序算法(Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。</p></li><li><p>排序的分类：</p><ul><li>内部排序:指将需要处理的所有数据都加载到内部存储器中进行排序。</li><li>外部排序法：数据量过大，无法全部加载到内存中，需要借助外部存储进行排序。</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/4fb4f5bc04d740bcb85bb978b600a3a7.png" alt="常见排序分类"></p><h3 id="1-算法的时间复杂度"><a href="#1-算法的时间复杂度" class="headerlink" title="1.算法的时间复杂度"></a>1.算法的时间复杂度</h3><h4 id="1-1-度量一个程序-算法-执行时间的两种方法"><a href="#1-1-度量一个程序-算法-执行时间的两种方法" class="headerlink" title="1.1 度量一个程序(算法)执行时间的两种方法:"></a>1.1 度量一个程序(算法)执行时间的两种方法:</h4><ul><li>事后统计的方法 这种方法可行, 但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所得时间的统计量依赖于计算机的硬件、软件等环境因素, <strong>这种方式，要在同一台计算机的相同状态下运行，才能比较那个算法</strong>速度更快。</li><li>事前估算的方法通过分析某个算法的<strong>时间复杂度</strong>来判断哪个算法更优.</li></ul><h4 id="1-2-时间频度"><a href="#1-2-时间频度" class="headerlink" title="1.2 时间频度"></a>1.2 时间频度</h4><p>时间频度<strong>：一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间就多。</strong>一个算法中的语句执行次数称为语句频度或时间频度**。记为T(n)。</p><h4 id="1-3-时间复杂度"><a href="#1-3-时间复杂度" class="headerlink" title="1.3 时间复杂度"></a>1.3 时间复杂度</h4><ul><li><p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n)使得当n趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作 T(n)=Ｏ( f(n))，称Ｏ( f(n) ) 为算法的渐进时间复杂度，简称时间复杂度。</p></li><li><p>T(n) 不同，但时间复杂度可能相同。 如：T(n)=n²+7n+6 与 T(n)=3n²+2n+2 它们的T(n) 不同，但时间复杂度相同，都为O(n²)。</p></li><li><p>计算时间复杂度的方法：</p><ul><li>用常数1代替运行时间中的所有加法常数 T(n)=n²+7n+6  =&gt; T(n)=n²+7n+1</li><li>修改后的运行次数函数中，只保留最高阶项 T(n)=n²+7n+1 =&gt; T(n) = n²</li><li>去除最高阶项的系数 T(n) = n² =&gt; T(n) = n² =&gt; O(n²)</li><li>简单来说是忽略常数项,系数项和低次数项,只考虑最高次项</li></ul></li></ul><h4 id="1-4-常见的时间复杂度"><a href="#1-4-常见的时间复杂度" class="headerlink" title="1.4 常见的时间复杂度"></a>1.4 常见的时间复杂度</h4><ul><li>常数阶O(1)</li></ul><p><img src="https://img-blog.csdnimg.cn/66dad9c2234243e89fa2a72e26ad1f3b.png" alt="常熟阶"></p><ul><li><p>对数阶O(log2n)</p><p><img src="https://img-blog.csdnimg.cn/0c9067a732f148159a943eca3df22578.png" alt="对数阶"></p></li><li><p>线性阶O(n)</p></li></ul><p><img src="https://img-blog.csdnimg.cn/6bdf246c7b714db980d58860e21ce45b.png" alt="线性阶"></p><ul><li>线性对数阶O(nlog2n)</li></ul><p><img src="https://img-blog.csdnimg.cn/eb1d292b3acc4d849fbf211a2b0daa91.png" alt="线性对数阶"></p><ul><li>平方阶O(n^2)</li></ul><p><img src="https://img-blog.csdnimg.cn/78bf930c1a3943b6a852fa74cbeadc26.png" alt="平方阶"></p><ul><li><p>立方阶O(n^3)</p></li><li><p>k次方阶O(n^k)</p></li><li><p>指数阶O(2^n)</p></li></ul><p><img src="https://img-blog.csdnimg.cn/9f38a76e16594a7698239cc57de2ede9.png" alt="常见的时间复杂度"></p><ul><li><p>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜ Ο(nk) ＜Ο(2n) ，随着问题规模n的不断增大，上述时间复杂度不断增大，算法的执行效率越低 </p></li><li><p>从图中可见，我们应该尽可能避免使用指数阶的算法</p></li></ul><h4 id="1-5-平均时间复杂度和最坏时间复杂度"><a href="#1-5-平均时间复杂度和最坏时间复杂度" class="headerlink" title="1.5 平均时间复杂度和最坏时间复杂度"></a>1.5 平均时间复杂度和最坏时间复杂度</h4><ul><li><p>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</p></li><li><p>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。 </p></li><li><p>平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如图:)。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/bd2c667a76244282866b63b6b64bc46e.png" alt="平均时间复杂度和最坏时间复杂度"></p><h3 id="2-算法的空间复杂度"><a href="#2-算法的空间复杂度" class="headerlink" title="2 算法的空间复杂度"></a>2 算法的空间复杂度</h3><ul><li><p>类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</p></li><li><p>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况</p></li><li><p> 在做算法分析时，<strong>主要讨论的是时间复杂度</strong>。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品(redis, memcache)和算法(基数排序)本质就是用空间换时间.</p></li></ul><h3 id="3-八种排序"><a href="#3-八种排序" class="headerlink" title="3 八种排序"></a>3 八种排序</h3><h4 id="3-1-冒泡排序"><a href="#3-1-冒泡排序" class="headerlink" title="3.1 冒泡排序"></a>3.1 冒泡排序</h4><ul><li>冒泡排序（Bubble Sorting）的基本思想是：通过对待 排序序列从前向后（从下标较小的元素开始）,依次比较 相邻元素的值，若发现逆序则交换，使值较大 的元素逐渐从前移向后部，就象水底下的气泡一样逐渐 向上冒。</li><li> 因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下 来没有进行过交换，就说明序列有序，因此要在排序过程中设置 一个标志flag判断元素是否进行过交换。从而减少不必要的比较。</li><li>规则小总: <ul><li>一共进行数组的大小-1次循环</li><li>每次排序的次数在逐渐地减少</li></ul></li></ul><p>代码实现并优化:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/1 18:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//int[] arr = &#123;3, 9, -1, 11, -5,&#125;;</span>        <span class="token comment">//System.out.println("排序前" + Arrays.toString(arr));</span>        <span class="token comment">//测试冒泡排序的速度 O(n^2) ,给80000个数据测试</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span><span class="token operator">+</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("排序后" + Arrays.toString(arr));</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span><span class="token operator">+</span>simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/*        //第二趟排序,就是将倒数第二大的排到倒数第二位        for (int i = 0; i &lt; arr.length - 1 - 1; i++) &#123;            if (arr[i] > arr[i + 1]) &#123;                temp = arr[i];                arr[i] = arr[i + 1];                arr[i + 1] = temp;            &#125;        &#125;        System.out.println("第二趟排序后的数组" + Arrays.toString(arr));        //第三趟排序,就是将倒数第三大的排到倒数第三位        for (int i = 0; i &lt; arr.length - 1 - 2; i++) &#123;            if (arr[i] > arr[i + 1]) &#123;                temp = arr[i];                arr[i] = arr[i + 1];                arr[i + 1] = temp;            &#125;        &#125;        System.out.println("第三趟排序后的数组" + Arrays.toString(arr));        //第四趟排序,就是将倒数第四大的排到倒数第四位        for (int i = 0; i &lt; arr.length - 1 - 3; i++) &#123;            if (arr[i] > arr[i + 1]) &#123;                temp = arr[i];                arr[i] = arr[i + 1];                arr[i + 1] = temp;            &#125;        &#125;        System.out.println("第四趟排序后的数组" + Arrays.toString(arr));        */</span>    <span class="token punctuation">&#125;</span><span class="token comment">//冒泡排序方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//冒泡排序时间复杂度: O(n^2)</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//标识符 表示是否发生过交换</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 在一次排序中没有发生过交换</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 重置flag!!!,进行下次判断</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">第一趟排序后的数组<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>第二趟排序后的数组<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>第三趟排序后的数组<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>第四趟排序后的数组<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>    排序前<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>排序后<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">46</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">18</span><span class="token operator">:</span><span class="token number">48</span><span class="token operator">:</span><span class="token number">55</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-选择排序"><a href="#3-2-选择排序" class="headerlink" title="3.2 选择排序"></a>3.2 选择排序</h4><ul><li>选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到排序的目的。</li></ul><p>它的<font color="red">基本思想</font>是：第一次从arr[0]-arr[n-1]中选取最小值，与arr[0]交换，第二次从arr[1]-arr[n-1]中选取最小值，与arr[1]交换，第三次从arr[2]-arr[n-1]中选取最小值，与arr[2]交换，…，第i次从arr[i-1]-arr[n-1]中选取最小值，与arr[i-1]交换，…, 第n-1次从arr[n-2]-arr[n-1]中选取最小值，与arr[n-2]交换，总共通过n-1次，得到一个按排序码从小到大排列的有序序列。</p><p><img src="https://img-blog.csdnimg.cn/6ca83b7cf2cb423a837ed32996ca9625.png" alt="选择排序思路分析图"></p><p>逐步推导代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/1 22:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前:"</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//第一轮</span>        <span class="token keyword">int</span> minIndex  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//说明假定的最小值不是最小值</span>                min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//重置min</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 重置minindex</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将最小值,放在arr[0],即交换</span>        arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一轮后:"</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二轮</span>        minIndex  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//说明假定的最小值不是最小值</span>                min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//重置min</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 重置minindex</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将最小值,放在arr[0],即交换</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第二轮后:"</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第三轮</span>        minIndex  <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//说明假定的最小值不是最小值</span>                min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//重置min</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 重置minindex</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将最小值,放在arr[0],即交换</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第三轮后:"</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">排序前<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>第一轮后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">]</span>第二轮后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">]</span>第三轮后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完整版代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/1 22:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//int [] arr = &#123;101,34,119,1&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span><span class="token operator">+</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">selectSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("排序后" + Arrays.toString(arr));</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span><span class="token operator">+</span>simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("排序前:"+ Arrays.toString(arr));</span>        <span class="token comment">//selectSort(arr);</span>        <span class="token comment">//System.out.println("排序后:"+ Arrays.toString(arr));</span>            <span class="token punctuation">&#125;</span>    <span class="token comment">//选择排序时间复杂度O(n^2)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明假定的最小值不是最小值</span>                    min <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//重置min</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span> <span class="token comment">// 重置minindex</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//将最小值,放在arr[0],即交换</span>            arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">;</span>           <span class="token comment">// System.out.println("第"+(i+1)+"轮后:" + Arrays.toString(arr));</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">排序前<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>第<span class="token number">1</span>轮后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">]</span>第<span class="token number">2</span>轮后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">]</span>第<span class="token number">3</span>轮后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">]</span>第<span class="token number">4</span>轮后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">]</span>排序后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">]</span>排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">18</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">23</span><span class="token operator">:</span><span class="token number">07</span><span class="token operator">:</span><span class="token number">21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3插入排序"><a href="#3-3插入排序" class="headerlink" title="3.3插入排序"></a>3.3插入排序</h4><ul><li><p>插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</p></li><li><p>插入排序（Insertion Sorting）的<strong>基本思想</strong>是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，把它的排序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/762406816a064092ae2ed340cfc76c17.png" alt="插入排序思路分析图"></p><p>逐步代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/2 13:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 第一轮&#123;101,34,119,2&#125;; => &#123;34,101,119,2&#125;;</span>        <span class="token comment">// 定义待插入的数</span>        <span class="token keyword">int</span> insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//即arr[1]前面这个数的下标</span>        <span class="token comment">//给insert找到插入的位置</span>        <span class="token comment">// 1.insertIndex >= 0 保证在给insertVal 找到插入位置,不越界</span>        <span class="token comment">// 2.insertVal &lt; arr[insertIndex] 待插入的数,还没有找到插入位置</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            insertIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当退出while循环时,说明插入位置找到,insertIndex + 1</span>        arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1轮插入"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第2轮&#123;34,101,119,2&#125;; => &#123;34,101,119,2&#125;;</span>        insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        insertIndex <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            insertIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第3轮插入"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第3轮&#123;34,101,119,2&#125;; => &#123;2, 34, 101, 119&#125;;</span>        insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        insertIndex <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>            insertIndex<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2轮插入"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">第<span class="token number">1</span>轮插入<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>第<span class="token number">3</span>轮插入<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>第<span class="token number">2</span>轮插入<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整版代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/2 13:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//int[] arr = &#123;101, 34, 119, 2&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span> <span class="token operator">+</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">insertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span> <span class="token operator">+</span> simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> insertVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> insertIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//即arr[1]前面这个数的下标</span>        <span class="token comment">// 第一轮&#123;101,34,119,2&#125;; => &#123;34,101,119,2&#125;;</span>        <span class="token comment">// 定义待插入的数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            insertVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            insertIndex <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//即arr[1]前面这个数的下标</span>            <span class="token comment">//给insert找到插入的位置</span>            <span class="token comment">// 1.insertIndex >= 0 保证在给insertVal 找到插入位置,不越界</span>            <span class="token comment">// 2.insertVal &lt; arr[insertIndex] 待插入的数,还没有找到插入位置</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> insertVal <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>insertIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>                insertIndex<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//当退出while循环时,说明插入位置找到,insertIndex + 1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>insertIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> insertVal<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// System.out.println("第"+i+"轮插入" + Arrays.toString(arr));</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">13</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-4-希尔排序"><a href="#3-4-希尔排序" class="headerlink" title="3.4 希尔排序"></a>3.4 希尔排序</h4><ul><li><p><strong>希尔排序</strong>是希尔（Donald Shell）于1959年提出的一种排序算法。希尔排序也是一种<strong>插入排序</strong>，它是简单插入排序经过改进之后的一个<strong>更高效的版本</strong>，也称为缩小增量排序。</p></li><li><p><strong>基本思想</strong>:  希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/336e6bec857e44a4855fe3b4b993217f.png" alt="希尔排序分析示意图"></p><h5 id="3-4-1-交换法"><a href="#3-4-1-交换法" class="headerlink" title="3.4.1 交换法"></a>3.4.1 交换法</h5><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/2 14:27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//希尔排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//第一轮 10个数据分成了5组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历各组中的所有元素(共5组,每组中有2个元素), 步长5</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">-=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果当前元素大于加上步长后的那个元素,说明交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"希尔排序后1轮后: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二轮 </span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历各组中的所有元素(共5组,每组中有2个元素), 步长5</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">-=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果当前元素大于加上步长后的那个元素,说明交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"希尔排序后2轮后: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第3轮</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历各组中的所有元素(共5组,每组中有2个元素), 步长5</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> j<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果当前元素大于加上步长后的那个元素,说明交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"希尔排序后3轮后: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">希尔排序后<span class="token number">1</span>轮后<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>希尔排序后<span class="token number">2</span>轮后<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>希尔排序后<span class="token number">3</span>轮后<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>完整版代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/2 14:27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  int [] arr = &#123;8,9,1,7,2,3,5,4,6,0&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span> <span class="token operator">+</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">shellSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span> <span class="token operator">+</span> simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//希尔排序</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">;</span> gap<span class="token operator">/=</span><span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//第一轮 10个数据分成了5组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//遍历各组中的所有元素(共gap组,每组中有2个元素), 步长gap</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> gap<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">-=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//j-=5 为了跳出循环</span>                <span class="token comment">//如果当前元素大于加上步长后的那个元素,说明交换</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token comment">//System.out.println("希尔排序第"+(++count)+"轮后: " + Arrays.toString(arr));</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">46</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">51</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-4-2-移位法"><a href="#3-4-2-移位法" class="headerlink" title="3.4.2 移位法"></a>3.4.2 移位法</h5><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/2 14:27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//  int [] arr = &#123;8,9,1,7,2,3,5,4,6,0&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">80000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span> <span class="token operator">+</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">shellSort2</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span> <span class="token operator">+</span> simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">//希尔排序 ->移位法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shellSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//增量gap 逐步缩小增量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//从第gap个元素,逐个对其所在的组进行直接插入排序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">-</span>gap<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//移动</span>                        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">;</span>                        j<span class="token operator">-=</span>gap<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token comment">//当退出while后,就给temp找到插入的数据</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//System.out.println("希尔排序后: " + Arrays.toString(arr));</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-5-快速排序"><a href="#3-5-快速排序" class="headerlink" title="3.5 快速排序"></a>3.5 快速排序</h4><p><strong>快速排序（Quicksort）</strong>是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列</p><p><img src="https://img-blog.csdnimg.cn/a03f7bfd62b84b849a13906f0aaaf5b8.png" alt="快速排序法示意图"></p><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/2 20:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QucikSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//int[] arr = &#123;-9, 78, 0, 23, -56, 70,45,12,48,13&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span><span class="token operator">+</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qucikSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("排序后" + Arrays.toString(arr));</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span><span class="token operator">+</span>simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("arr=" + Arrays.toString(arr));</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">qucikSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//中轴值</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//临时变量作为交换使用</span>        <span class="token comment">//while 循环的目的是让比pivot值 小的放左边, 大的放右边</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//在pivot的左边一直找,找到大于等于pivot的值,才退出</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//在pivot的右边一直找,找到小于等于pivot的值,才退出</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                r <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 如果 l>=r 说明pivot的左右两边的值已经按照左边全是小于等于pivot,右边全是大于等于pivot的值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//交换</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token comment">//如果交换完后发现arr[l] == pivot 值相等r--,前移</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                r <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果交换完后发现arr[r] == pivot 值相等l++,后移</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                l <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//必须l++,r--,否则栈溢出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            l <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            r <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//向左递归</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 这里的r已发生变化 r -= 1;</span>            <span class="token function">qucikSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//向右递归</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token operator">></span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//这里的l已发生变化  l += 1;</span>            <span class="token function">qucikSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>l<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">56</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span>排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">58</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">20</span><span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">59</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-6-归并排序"><a href="#3-6-归并排序" class="headerlink" title="3.6 归并排序"></a>3.6 归并排序</h4><p>归并排序（MERGE-SORT）是利用<font color="red">归并</font>的思想实现的排序方法，该算法采用经典的<font color="red">分治</font>（divide-and-conquer）策略（分治法将问题<font color="red">分(divide)</font>成一些小的问题然后递归求解，而<font color="red">治(conquer)</font>的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p><p><img src="https://img-blog.csdnimg.cn/eb432bba43ba42d7852fee5153bda282.png" alt="归并排序示意图"></p><ul><li><p>可以看到这种结构很像一棵完全二叉树，本文的归并排序我们采用递归去实现（也可采用迭代的方式去实现）。<strong>分</strong>阶段可以理解为就是递归拆分子序列的过程。</p></li><li><p>再来看看<strong>治</strong>阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，要将[4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤:</p></li></ul><p><img src="https://img-blog.csdnimg.cn/58301be90b7a44c5972a4002a309f782.png" alt="合1"></p><p><img src="https://img-blog.csdnimg.cn/52668f99e617454e9ad5ab1f79492e55.png" alt="合2"></p><p>代码演示:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/2 21:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//int[] arr = &#123;8, 4, 5, 1, 7, 3, 6, 2&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">800000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span><span class="token operator">+</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span><span class="token operator">+</span>simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// int [] temp = new int[arr.length];</span>        <span class="token comment">//mergeSort(arr,0,arr.length-1,temp);</span>        <span class="token comment">//System.out.println("归并排序后:"+ Arrays.toString(arr));</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//分+合的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//向左递归进行分解</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//向右递归进行分解</span>            <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//合并</span>            <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>right<span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//合并的方法</span>    <span class="token comment">/**     * @param arr   排序的原始数组     * @param left  左边有序数列的初始索引     * @param mid   中间索引     * @param right 右边索引     * @param temp  做中转的数组     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> <span class="token comment">//初始化i,左边有序数列的初始索引</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//初始化j,右边有序数列的初始索引</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//指向temp数组的当前索引</span>        <span class="token comment">//(一)</span>        <span class="token comment">//先把左右两边(有序)的数据按照规则填充到temp数组,直到左右两边的有序数列,有一边处理完毕</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果左边的有序数列小于等于右边的有序数列,即将有序序列的左边有序序列的当前元素,拷贝到temp数组,然后t++,i++</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//反之,将右边有序序列的当前元素,拷贝到temp数组</span>                temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//(二) 把有剩余数据的一边的数据依次填充到temp</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//左边的有序序列还有剩余的元素,就全部填充到temp</span>            temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//右边的有序序列还有剩余的元素,就全部填充到temp</span>            temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            j <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//(三)将temp数组元素拷贝到arr  注意,并不是每次都拷贝所有</span>        t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tempLeft <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment">//System.out.println("tempLeft="+tempLeft+"right="+right);</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tempLeft <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>tempLeft<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>            t <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            tempLeft <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">tempLeft<span class="token operator">=</span><span class="token number">0</span>right<span class="token operator">=</span><span class="token number">1</span>tempLeft<span class="token operator">=</span><span class="token number">2</span>right<span class="token operator">=</span><span class="token number">3</span>tempLeft<span class="token operator">=</span><span class="token number">0</span>right<span class="token operator">=</span><span class="token number">3</span>tempLeft<span class="token operator">=</span><span class="token number">4</span>right<span class="token operator">=</span><span class="token number">5</span>tempLeft<span class="token operator">=</span><span class="token number">6</span>right<span class="token operator">=</span><span class="token number">7</span>tempLeft<span class="token operator">=</span><span class="token number">4</span>right<span class="token operator">=</span><span class="token number">7</span>tempLeft<span class="token operator">=</span><span class="token number">0</span>right<span class="token operator">=</span><span class="token number">7</span>归并排序后<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">58</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">44</span><span class="token operator">:</span><span class="token number">58</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-7-基数-桶-排序"><a href="#3-7-基数-桶-排序" class="headerlink" title="3.7 基数(桶)排序"></a>3.7 基数(桶)排序</h4><ul><li><p><a href="https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/7875498">基</a><a href="https://baike.baidu.com/item/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/7875498">数排序</a>（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是通过键值的各个位的值，将要排序的<a href="https://baike.baidu.com/item/%E5%85%83%E7%B4%A0%E5%88%86%E9%85%8D/2107419">元素分配</a>至某些“桶”中，达到排序的作用</p></li><li><p>基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法</p></li><li><p>基数排序(Radix Sort)是**<a href="http://www.cnblogs.com/skywang12345/p/3602737.html">桶排序</a>**的扩展</p></li><li><p>基数排序是1887年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p></li><li><p>基本思想: 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p></li></ul><p><img src="https://img-blog.csdnimg.cn/3d2ccb651a994485a2a41e25712ed3d9.png" alt="基数排序实现示意图"></p><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/3 15:34 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RadixSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//int[] arr = &#123;53,3,542,748,14,214&#125;;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">800000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">800000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序前的时间是:"</span><span class="token operator">+</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">radixSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后的时间是:"</span><span class="token operator">+</span>simpleDateFormat2<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//得到数组中最大数的位数</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//假设第一个数就是最大的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//得到最大数</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//得到最大数是几位数</span>        <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个二维数组,表示10个桶子,每个桶就是一个一维数组</span>        <span class="token comment">//共10个一维数组,为防止栈溢出,则每个一维数组大小定义为arr.length</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个一维数组用来记录每个桶中实际存放了多少个数据</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucketElementsCounts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//使用循环处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> n <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//针对每个元素的对应的位数进行排序处理 个位,十位,百位</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//取出每个元素对应位的值</span>                <span class="token keyword">int</span> digitOfElement <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>                <span class="token comment">//放入到对应的桶中</span>                bucket<span class="token punctuation">[</span>digitOfElement<span class="token punctuation">]</span><span class="token punctuation">[</span>bucketElementsCounts<span class="token punctuation">[</span>digitOfElement<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                bucketElementsCounts<span class="token punctuation">[</span>digitOfElement<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//按照桶的顺序(一维数组的下标依次取出数据,放入原来的数组)</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span>bucketElementsCounts<span class="token punctuation">.</span>length <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果桶中有数据,则放入</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bucketElementsCounts<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//循环该桶即第k个桶(第k个一维数组)</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span>bucketElementsCounts<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//取出元素放入arr</span>                        arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//第i+1轮处理完后需将每个bucketElementsCounts[k] = 0 !!!</span>                bucketElementsCounts<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//System.out.println("第"+(i+1)+"轮后 arr="+ Arrays.toString(arr));</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">第<span class="token number">1</span>轮后 arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">542</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">748</span><span class="token punctuation">]</span>第<span class="token number">2</span>轮后 arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">542</span><span class="token punctuation">,</span> <span class="token number">748</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">]</span>第<span class="token number">3</span>轮后 arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">542</span><span class="token punctuation">,</span> <span class="token number">748</span><span class="token punctuation">]</span>排序前的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span>排序后的时间是<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">03</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>基数排序</strong>的说明:</p><ul><li><p>基数排序是对传统桶排序的扩展，速度很快.</p></li><li><p>基数排序是经典的空间换时间的方式，占用内存很大, 当对海量数据排序时，容易造成 OutOfMemoryError 。</p></li><li><p>基数排序时稳定的。[注:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，<strong>则称这种排序算法是稳定的；否则称为不稳定的</strong>]</p></li></ul><p>4)有负数的数组，我们不用基数排序来进行排序, 如果要支持负数，参考<a href="https://code.i-harness.com/zh-CN/q/e98fa9">https://</a><a href="https://code.i-harness.com/zh-CN/q/e98fa9">code.i-harness.com/zh-CN/q/e98fa9</a></p><h4 id="3-8-堆排序"><a href="#3-8-堆排序" class="headerlink" title="3.8 堆排序"></a>3.8 堆排序</h4><ul><li>堆排序的基本思想是：<ul><li>将待排序序列构造成一个大顶堆</li><li>此将其与末尾元素进行交换，此时末尾就为最大值。</li><li>然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</li><li>这时，整个序列的最大值就是堆顶的根节点。</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/13db5cc6cad54aabbb5925f6a98de0cc.png" alt="大顶堆和小顶堆示意图"></p><p>一般<strong>升序采用大顶堆</strong>，<strong>降序采用小顶堆</strong> </p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>sort</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/9 16:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//要求将数组进行升序排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token function">heapSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token comment">//编写一个堆排序的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//最终代码</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * 将其与末尾元素进行交换，此时末尾就为最大值。         * 然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token function">adjustHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组: "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9, 6, 8, 5, 4</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将一个数组(二叉树),调整成一个大顶堆</span>    <span class="token comment">/**     * 完成将以i 对应的非叶子结点的树调整成大顶堆     *     * @param arr    待调整数组     * @param i      非叶子结点在数组中索引     * @param length 表示多少个元素要继续调整 length在逐渐减少     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">adjustHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//先去除当前元素的值,保存在临时变量</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> k <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明左子结点的值小于右子结点的值</span>                k<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//k 指向右子结点</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//子节点大于父结点</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//把较大的值赋值给当前结点</span>                i <span class="token operator">=</span> k<span class="token punctuation">;</span>  <span class="token comment">//!!! i指向k,继续循环比较</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当for循环结束时,我们已经将以i为父结点的树的最大值,放在了最顶部(局部)</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">//将temp值放到调整后的位置</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">数组<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用算法排序对比"><a href="#常用算法排序对比" class="headerlink" title="常用算法排序对比"></a><center>常用算法排序对比</h3><p><img src="https://img-blog.csdnimg.cn/02c1eb753cc8413aa243bcb5d7c88ead.png" alt="常用算法排序对比"></p><p><img src="https://img-blog.csdnimg.cn/50b05c4420844ee8af84e87ac4892ff1.jpg" alt="相关术语解释"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据结构和算法(二)</title>
      <link href="/2021-09-24-java-shu-ju-jie-gou-he-suan-fa-er.html"/>
      <url>/2021-09-24-java-shu-ju-jie-gou-he-suan-fa-er.html</url>
      
        <content type="html"><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a><center>栈</h3><h4 id="1-1-栈的介绍"><a href="#1-1-栈的介绍" class="headerlink" title="1.1 栈的介绍"></a>1.1 栈的介绍</h4><ul><li><p>栈的英文为(stack)</p></li><li><p>栈是一个<strong>先入后出</strong>(FILO-First In Last Out)的有序列表。</p></li><li><p>栈(stack)是限制线性表中元素的插入和删除<strong>只能在线性表的同一端</strong>进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为<strong>栈顶</strong>(Top)，另一端为固定的一端，称为<strong>栈底</strong>(Bottom)。</p></li><li><p>根据栈的定义可知，最先放入栈中元素在栈底，最后放入的元素在栈顶，而删除元素刚好相反，最后放入的元素最先删除，最先放入的元素最后删除</p></li></ul><p><img src="https://img-blog.csdnimg.cn/629064845556410c83cddd02f0ba0f5c.png" alt="入栈"></p><p><img src="https://img-blog.csdnimg.cn/9b405e76cbda41dcb3aab55ae8d97301.png" alt="出栈"></p><h4 id="1-2-栈的应用场景"><a href="#1-2-栈的应用场景" class="headerlink" title="1.2 栈的应用场景"></a>1.2 栈的应用场景</h4><ul><li><p>子程序的调用：在跳往子程序前，会先将下个指令的地址存到堆栈中，直到子程序执行完后再将地址取出，以回到原来的程序中。  </p></li><li><p>处理递归调用：和子程序的调用类似，只是除了储存下一个指令的地址外，也将参数、区域变量等数据存入堆栈中。</p></li><li><p>表达式的转换[中缀表达式转后缀表达式]与求值(实际解决)。</p></li><li><p>二叉树的遍历。</p></li><li><p>图形的深度优先(depth一first)搜索法。</p></li></ul><h4 id="1-3-栈的快速入门"><a href="#1-3-栈的快速入门" class="headerlink" title="1.3 栈的快速入门"></a>1.3 栈的快速入门</h4><p><strong>思路</strong></p><ul><li>定义top表示栈顶，初始值为-1</li><li>入栈的操作，先让top++，再放入数组</li><li>出栈操作，先取出元素，在让top–</li><li>top == -1时，栈空</li><li>top == maxSize-1时，栈满</li></ul><p><strong>代码实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStackDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayStack</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show: 显示栈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"exit: 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"push: 添加数据到栈(入栈)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"pop: 从栈中弹出数据(弹栈)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">"show"</span><span class="token operator">:</span>                    stack<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"push"</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"pop"</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出栈的数据是: "</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"exit"</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"退出程序!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//栈</span><span class="token keyword">class</span> <span class="token class-name">ArrayStack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//栈的大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">;</span> <span class="token comment">//数组模拟战</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//top表示栈顶,初始值为-1</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//栈满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//栈空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//入栈-push</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        top<span class="token operator">++</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//出栈</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历栈</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack[%d]=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-4-栈实现综合计算器-中缀表达式"><a href="#1-4-栈实现综合计算器-中缀表达式" class="headerlink" title="1.4 栈实现综合计算器(中缀表达式)"></a>1.4 栈实现综合计算器(中缀表达式)</h4><ul><li><p>求[7*2+12-5]</p></li><li><p>通过一个index值(索引)，来遍历找们的表达式</p></li><li><p>如果我们发现是一个数字就直接入数栈</p></li><li><p>3如果发现扫描到是一个符号就分如下情况</p><ul><li>如果发现当前的符号栈为空，就直接入栈</li><li>如果符号栈有操作符，就进行比较<font color="red">如果当前的操作符的优先级小于或者等于栈中的操作符</font>，就需要从数栈中pop出两个数在从符号栈中pop出一个符号，进行运算，将得到结果，入数栈，然后将当前的操作符入符号栈，<font color="red">如果当前的操作符的优先级大于栈中的操作符，就直接入符号栈</font></li></ul></li><li><p>当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运行.</p></li><li><p>5最后在数栈只有一个数字，就是表达式的结果</p></li></ul><p><img src="https://img-blog.csdnimg.cn/1aaaf16df056477fa3454e8263169c5d.png" alt="数栈,符号栈">代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> experssion <span class="token operator">=</span> <span class="token string">"70+2*6-4"</span><span class="token punctuation">;</span>        <span class="token comment">//创建两个栈 数栈,符号栈</span>        <span class="token class-name">ArrayStack2</span> numStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayStack2</span> operStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayStack2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义需要的相关变量</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> oper <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> keepNum <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//用于拼接多位数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ch <span class="token operator">=</span> experssion<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断ch是什么,然后做相应的处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果是运算符</span>                <span class="token comment">//判断当前栈是否为空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//如果符号栈中有操作符,就进行比较,如果当前的操作符的优先级小于或者等于栈中的操作符,就需要从数栈中pop出两个数</span>                    <span class="token comment">//再从符号栈中pop出一个符号,进行运算,将得到的结果入数栈,然后将当前的操作符入符号栈</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> operStack<span class="token punctuation">.</span><span class="token function">priority</span><span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        num1 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        num2 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        oper <span class="token operator">=</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        res <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//将得到的结果入数栈</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//然后将当前的操作符入符号栈</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//如果当前的操作符的优先级小于或者等于栈中的操作符,就直接入符号栈</span>                        operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//如果为空直接入符号栈</span>                    operStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果是数,则直接入数栈</span>                <span class="token comment">//1.当处理多位数时,不能发现是一个数就直接入栈</span>                <span class="token comment">//2.在处理数时,需要向expression的表达式的index 后再看一位,如果是数就扫描,如果是符号才入栈</span>                <span class="token comment">//3. 定义一个字符串变量用于拼接</span>                keepNum<span class="token operator">+=</span>ch<span class="token punctuation">;</span>                <span class="token comment">//如果expression是最后一位,就直接入栈</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> experssion<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>keepNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//判断下一个字符是不是数字,,如果是数就扫描,如果是符号才入栈</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isOper</span><span class="token punctuation">(</span>experssion<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//如果后一位是运算符,则入栈</span>                        numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>keepNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//keepNum清空!!!!!</span>                        keepNum<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span>experssion<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>operStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            num1 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num2 <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oper <span class="token operator">=</span> operStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> numStack<span class="token punctuation">.</span><span class="token function">cal</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> oper<span class="token punctuation">)</span><span class="token punctuation">;</span>            numStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表达式%s = %d"</span><span class="token punctuation">,</span>experssion<span class="token punctuation">,</span>numStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ArrayStack2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//栈的大小</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">;</span> <span class="token comment">//数组模拟战</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//top表示栈顶,初始值为-1</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayStack2</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回当前栈顶的值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//栈满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//栈空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//入栈-push</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        top<span class="token operator">++</span><span class="token punctuation">;</span>        stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//出栈</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//抛出异常</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> stack<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历栈</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"栈空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"stack[%d]=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回运算符的优先级,优先级用数字表示</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">int</span> oper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> oper <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oper <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> oper <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断是不是一个运算符</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOper</span><span class="token punctuation">(</span><span class="token keyword">char</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> val <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> val <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">int</span> oper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//res 用于存放计算的结果</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>oper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num2 <span class="token operator">-</span> num1<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'*'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'/'</span><span class="token operator">:</span>                res <span class="token operator">=</span> num2 <span class="token operator">/</span> num1<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1前缀表示、中缀表达式、后缀表达式-逆波兰表达式"><a href="#2-1前缀表示、中缀表达式、后缀表达式-逆波兰表达式" class="headerlink" title="2.1前缀表示、中缀表达式、后缀表达式(逆波兰表达式)"></a>2.1前缀表示、中缀表达式、后缀表达式(逆波兰表达式)</h3><p><strong><font color="blue">前缀表达式的计算机求值</font></strong></p><p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（栈顶元素 和 次顶元素），并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果</p><p>例如: (3+4)×5-6 对应的前缀表达式就是 <strong>- × + 3 4 5</strong> <strong>6 ,</strong> <strong>针对前缀表达式求值步骤</strong>如下</p><p>1)从<strong>右至左扫描</strong>，将6、5、4、3压入堆栈</p><p>2)遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值，得7，再将7入栈</p><p>3)接下来是×运算符，因此弹出7和5，计算出7×5=35，将35入栈</p><p>4)最后是-运算符，计算出35-6的值，即29，由此得出最终结果</p><p><strong><font color="blue">中缀表达式</font></strong></p><p>1)中缀表达式就是<strong>常见的运算表达式</strong>，如(3+4)×5-6</p><p>2)中缀表达式的求值是我们人最熟悉的，但是对计算机来说却不好操作(前面我们讲的案例就能看的这个问题)，因此，在计算结果时，往往会将中缀表达式转成其它表达式来操作(一般转成后缀表达式.)</p><p><strong><font color="blue">后缀表达式</font></strong></p><p>1)后缀表达式又称<strong>逆波兰表达式</strong>,与前缀表达式相似，只是运算符位于操作数之后</p><p>2)中举例说明： (3+4)×5-6 对应的后缀表达式就是 <strong>3</strong> <strong>4 + 5 × 6</strong> <strong>–</strong></p><table><thead><tr><th>正常的表达式</th><th>逆波兰表达式</th></tr></thead><tbody><tr><td>a+b</td><td>a b +</td></tr><tr><td>a+(b-c)</td><td>a b c - +</td></tr><tr><td>a+(b-c)*d</td><td>a b c – d * +</td></tr><tr><td>a+d*(b-c)</td><td>a d b c - * +</td></tr><tr><td>a=1+3</td><td>a 1 3 + =</td></tr></tbody></table><p><strong><font color="blue">后缀表达式的计算机求值</font></strong></p><p>从<strong>左至右</strong>扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算（次顶元素 和 栈顶元素），并将结果入栈；重复上述过程直到表达式最右端，最后运算得出的值即为表达式的结果</p><p>例如: (3+4)×5-6 对应的后缀表达式就是 <strong>3 4 + 5 × 6 -</strong> <strong>,</strong> 针对后缀表达式求值步骤如下:</p><p>1)从左至右扫描，将3和4压入堆栈；</p><p>2)遇到+运算符，因此弹出4和3（4为栈顶元素，3为次顶元素），计算出3+4的值，得7，再将7入栈；</p><p>3)将5入栈；</p><p>4)接下来是×运算符，因此弹出5和7，计算出7×5=35，将35入栈；</p><p>5)将6入栈；</p><p>6)最后是运算符，计算出的值，即，由此得出最终结 .</p><h4 id="2-2-逆波兰计算器"><a href="#2-2-逆波兰计算器" class="headerlink" title="2.2 逆波兰计算器"></a>2.2 逆波兰计算器</h4><ul><li>支持 + - * / ( ) </li><li>多位数，支持小数,</li><li>兼容处理, 过滤任何空白字符，包括空格、制表符、换页符</li></ul><p><strong>逆波兰计算器</strong></p><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>stack</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/26 20:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoLandNotation</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//定义逆波兰表达式</span>        <span class="token class-name">String</span> suffixExpression <span class="token operator">=</span> <span class="token string">"3 4 + 5 * 6 -"</span><span class="token punctuation">;</span>        <span class="token comment">//思路: 1.先将"3 4 + 5 * 6-" => 放到ArrayList中</span>        <span class="token comment">//2.将ArrayList 传递给一个方法,遍历ArrayList 配合栈完成计算</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> rpnList <span class="token operator">=</span> <span class="token function">getListString</span><span class="token punctuation">(</span>suffixExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rpnList="</span> <span class="token operator">+</span> rpnList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>rpnList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算的结果是:"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将一个逆波兰表达式依次将数据和运算符放入到ArrayList中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getListString</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将 suffixExpression 分割</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> suffixExpression<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ele <span class="token operator">:</span> split<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//完成对逆波兰表达式的运算</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历ls</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> ls        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//使用正则表达式取出数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//pop 两个数,并运算,再入栈</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"运算符有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//把res入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后留在stack中的数据就是运算结果</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-中缀表达式转后缀表达式的思路分析"><a href="#2-3-中缀表达式转后缀表达式的思路分析" class="headerlink" title="2.3 中缀表达式转后缀表达式的思路分析"></a>2.3 中缀表达式转后缀表达式的思路分析</h4><p><font color="blue">具体步骤如下:</font></p><ul><li><p>初始化两个栈：运算符栈s1和储存中间结果的栈s2；</p></li><li><p>从左至右扫描中缀表达式；</p></li><li><p>遇到操作数时，将其压s2；</p></li><li><p>遇到运算符时，比较其与s1栈顶运算符的优先级：</p><ul><li>如果s1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</li><li>否则，若优先级比栈顶运算符的高，也将运算符压入s1；</li><li>否则，将s1栈顶的运算符弹出并压入到s2中，再次转到(4-1)与s1中新的栈顶运算符相比较； </li></ul></li><li><p>遇到括号时：</p><ul><li>如果是左括号“(”，则直接压入s1</li><li>如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</li></ul></li><li><p>重复步骤2至5，直到表达式的最右边</p></li><li><p>将s1中剩余的运算符依次弹出并压入s2</p></li><li><p>依次弹出s2中的元素并输出，<strong>结果的逆序即为中缀表达式对应的后缀表达式</strong></p></li></ul><p><font color="blue">举例说明:</font></p><p>将中缀表达式<strong>1+((2+3)×4)-5</strong>转为后缀表达式的*过程如下:</p><p>因此结果为<strong>1 2 3 + 4 × + 5 –</strong></p><table><thead><tr><th>扫描到的元素</th><th>s2(栈底-&gt;栈顶)</th><th>s1 (栈底-&gt;栈顶)</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>空</td><td>数字，直接入栈</td></tr><tr><td>+</td><td>1</td><td>+</td><td>s1为空，运算符直接入栈</td></tr><tr><td>(</td><td>1</td><td>+ (</td><td>左括号，直接入栈</td></tr><tr><td>(</td><td>1</td><td>+ ( (</td><td>同上</td></tr><tr><td>2</td><td>1 2</td><td>+ ( (</td><td>数字</td></tr><tr><td>+</td><td>1 2</td><td>+ ( ( +</td><td>s1栈顶为左括号，运算符直接入栈</td></tr><tr><td>3</td><td>1 2 3</td><td>+ ( ( +</td><td>数字</td></tr><tr><td>)</td><td>1 2 3 +</td><td>+ (</td><td>右括号，弹出运算符直至遇到左括号</td></tr><tr><td>×</td><td>1 2 3 +</td><td>+ ( ×</td><td>s1栈顶为左括号，运算符直接入栈</td></tr><tr><td>4</td><td>1 2 3 + 4</td><td>+ ( ×</td><td>数字</td></tr><tr><td>)</td><td>1 2 3 + 4 ×</td><td>+</td><td>右括号，弹出运算符直至遇到左括号</td></tr><tr><td>-</td><td>1 2 3 + 4 × +</td><td>-</td><td>-与+优先级相同，因此弹出+，再压入-</td></tr><tr><td>5</td><td>1 2 3 + 4 × + 5</td><td>-</td><td>数字</td></tr><tr><td>到达最右端</td><td><strong>1  2 3 + 4 × + 5 -</strong></td><td>空</td><td>s1中剩余的运算符</td></tr></tbody></table><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>stack</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/26 20:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoLandNotation</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//将中缀表达式转成后缀表达式</span>        <span class="token comment">//直接对str操作不方便,因此将 "1+((2+3)*4)-5" => ArrayList [1,+,(,(,2,+,3,),*4,)-,5]</span>        <span class="token comment">//将得到的中缀表达式对应的list => 后缀表达式对应的list</span>        <span class="token comment">//即 ArrayList [1,+,(,(,2,+,3,),*4,)-,5]  => ArrayList [1,2,3,+,4,*+,5,-]</span>        <span class="token class-name">String</span> expression <span class="token operator">=</span> <span class="token string">"1+((2+3)*4)-5"</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> infixExpressionList <span class="token operator">=</span> <span class="token function">toInfixExpressionList</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中缀表达式对应的list:"</span><span class="token operator">+</span>infixExpressionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> parseSuffixExpressionList <span class="token operator">=</span> <span class="token function">parseSuffixExpressionList</span><span class="token punctuation">(</span>infixExpressionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后缀表达式对应的list:"</span><span class="token operator">+</span>parseSuffixExpressionList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"expression=%d"</span><span class="token punctuation">,</span><span class="token function">calculate</span><span class="token punctuation">(</span>parseSuffixExpressionList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义逆波兰表达式</span>        <span class="token class-name">String</span> suffixExpression <span class="token operator">=</span> <span class="token string">"3 4 + 5 * 6 -"</span><span class="token punctuation">;</span>        <span class="token comment">//思路: 1.先将"3 4 + 5 * 6-" => 放到ArrayList中</span>        <span class="token comment">//2.将ArrayList 传递给一个方法,遍历ArrayList 配合栈完成计算</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> rpnList <span class="token operator">=</span> <span class="token function">getListString</span><span class="token punctuation">(</span>suffixExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"rpnList="</span> <span class="token operator">+</span> rpnList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span>rpnList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算的结果是:"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ArrayList [1,+,(,(,2,+,3,),*4,)-,5]  => ArrayList [1,2,3,+,4,*+,5,-]</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">parseSuffixExpressionList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ls<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//定义两个栈 s2可以用ArrayList代替</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item<span class="token operator">:</span>ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果是一个数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//如果是右括号“)”，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//!!! 将( 弹出s1栈 消除小括号</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//步骤第四步</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Operation</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token class-name">Operation</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将s1中剩余的运算符依次弹出并加入s2</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> s2<span class="token punctuation">;</span> <span class="token comment">//因为是存放到 list中,因此按顺序输出就是对应的后缀表达式对应的list</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将中缀表达式转成对应的list</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">toInfixExpressionList</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//指针 用于遍历中缀表达式字符串</span>        <span class="token class-name">String</span> str<span class="token punctuation">;</span> <span class="token comment">//多位数拼接</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span> <span class="token comment">//每遍历一个字符就放入到c</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果c是非数字,需要加入到ls中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">48</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//如果是一个数,需要考虑多位数</span>                str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    str <span class="token operator">+=</span> c<span class="token punctuation">;</span> <span class="token comment">//拼接</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                ls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> ls<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将一个逆波兰表达式依次将数据和运算符放入到ArrayList中</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getListString</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffixExpression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 将 suffixExpression 分割</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> suffixExpression<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> ele <span class="token operator">:</span> split<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//完成对逆波兰表达式的运算</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ls<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个栈</span>        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历ls</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> ls        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//使用正则表达式取出数据</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//pop 两个数,并运算,再入栈</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">*</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"运算符有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//把res入栈</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后留在stack中的数据就是运算结果</span>        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Operation</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ADD <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> SUB <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MUL <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> DIV <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//返回对应的优先级数字</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> operation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token operator">:</span>                result <span class="token operator">=</span> ADD<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token operator">:</span>                result <span class="token operator">=</span> SUB<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token operator">:</span>                result <span class="token operator">=</span> MUL<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token operator">:</span>                result <span class="token operator">=</span> DIV<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不存在该运算符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a><center>递归</h3><ul><li><strong>递归就是方法自己调用自己</strong>,每次调用时<strong>传入不同的变量</strong>.递归有助于编程者解决复杂的问题,同时可以让代码变得简洁。</li></ul><h4 id="2-1-递归简单示例"><a href="#2-1-递归简单示例" class="headerlink" title="2.1 递归简单示例"></a>2.1 递归简单示例</h4><p>递归调用规则:</p><ul><li>当程序执行到一个方法时,就会开辟一个独立的空间(栈帧)</li><li>每个空间的数据(局部变量),是独立的</li></ul><p><img src="https://img-blog.csdnimg.cn/9d9722f7d8534a2d83a4810d0b55fc8c.png" alt="递归图解"></p><p>打印问题代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>recursion</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/30 13:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//打印问题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">test</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n="</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">n<span class="token operator">=</span><span class="token number">2</span>n<span class="token operator">=</span><span class="token number">3</span>n<span class="token operator">=</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>阶层问题代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>recursion</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/30 13:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//阶层问题</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">;</span> <span class="token comment">// 1 * 2 * 3 * 4</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">24</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>递归需要遵守的重要规则<ul><li>执行一个方法时，就创建一个新的受保护的独立空间(栈空间)</li><li>方法的局部变量是独立的，不会相互影响，比如n变量</li><li>如果方法中使用的是引用类型变量(比如数组)，就会共享该引用类型的数据</li><li>递归必须向退出递归的条件逼近，否则就是无限递归出现StackOverflowError，死龟了:)</li><li>当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就将结果返回给谁，同时当方法执行完毕或<br>者返回时，该方法也就执行完毕</li></ul></li></ul><h4 id="3-1-迷宫问题"><a href="#3-1-迷宫问题" class="headerlink" title="3.1 迷宫问题"></a>3.1 迷宫问题</h4><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>recursion</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/30 14:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MiGong</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建二维数组 模拟二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//上下左右全部置为1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//设置挡板,1表示</span>        map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        map<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 输出地图</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用递归回溯给小球找路</span>        <span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//输出新地图</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 出发点map[1][1]     * 若小球能到map[6][5] 则找到通路     * 约定:当map[i][j]为0的点表示改点没有走过,当1表示墙,2表示可以走,3表示此路以走过,但走不通     * 在走迷宫时,制定一个策略:  下->右->上->左,如果改点走不通,再回溯     *     * @param map 地图     * @param i   从哪个位置找     * @param j   从哪个位置找     * @return 若找到通路, 返回true, 否则返回false     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">setWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//已找到</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//这个点没走过</span>                <span class="token comment">// 按照策略 下->右->上->左</span>                map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 假定该点可有走通</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setWay</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-八皇后问题"><a href="#3-2-八皇后问题" class="headerlink" title="3.2 八皇后问题"></a>3.2 八皇后问题</h4><p>问题描述: 任意两个皇后不能处于同一行、同一列或同意斜线,问有多少中解法</p><p>说明:理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题.arr[8]=047,5,2,61,3)//对应arr下标表示第几行，即第几个皇后，arr[i]=val,val表示第i+1个皇后，放在第i+1行的第val+1 列</p><p>游戏在线地址:<a href="https://www.novelgames.com/zh/queens/">https://www.novelgames.com/zh/queens/</a></p><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>recursion</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/30 20:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Queue8</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义最大皇后数</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment">//定义数组arr,保存皇后放置位置的结果 arr=&#123;0,4,7,5,2,6,1,3&#125;</span>    <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> judgeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Queue8</span> queue8 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue8<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"一共有%d中解法\n"</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"一共判断了%d次冲突"</span><span class="token punctuation">,</span>judgeCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//放置第n个皇后</span>    <span class="token comment">//特别注意 : check 是 每一次递归时,进入到check中都有for (int i = 0; i &lt;max ; i++),因此会有回溯</span>    <span class="token keyword">private</span> <span class="token keyword">void</span>  <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// n = 8 8个皇后已经放好</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//依次放入皇后 并判断是否冲突</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>max <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//先把当前这个皇后n,放到改行的第一列</span>            array<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">//判断当前第n个皇后到i列时,是否冲突</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//不冲突</span>                <span class="token function">check</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果冲突 继续执行 array[n] = i;即将第n个皇后,放置在本行的后移一个位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//查看当我们放置第n个皇后,就去检测该皇后是否和前面已经摆放的皇后冲突</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        judgeCount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 1.array[i] == array[n]  判断第n个皇后是否和前面的n-1个皇后是否在同一列</span>            <span class="token comment">// 2.Math.abs(n-i) == Math.abs(array[n] - array[i]  判断第n个皇后是否和前面的n-1个皇后是否在同一斜线</span>            <span class="token comment">// 3. 判断是否在同一行 没必要 每次都递增</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> array<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//将皇后摆放位置输出</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>array<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行部分结果:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">6</span> <span class="token number">1</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">5</span> <span class="token number">3</span> 一共有<span class="token number">92</span>中解法一共判断了<span class="token number">15720</span>次冲突<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2021-09-22-java-ji-chu.html"/>
      <url>/2021-09-22-java-ji-chu.html</url>
      
        <content type="html"><![CDATA[<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li> Java中的引用指的是除开那些特定的基本类型之外的变量类型.~ </li><li> 对于基本类型 如 int，char，boolean，float等基本类型，变量名不是引用，他直接指向具体的值，只有<font color="red">对象类型</font>的变量名才是引用</li><li> Java只有一种参数传递方式：那就是按值传递，即Java中传递任何东西都是传值。 </li></ul><p>举例1:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nums1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> nums2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        nums2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        nums2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        nums2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        nums1 <span class="token operator">=</span> nums2<span class="token punctuation">;</span>        # nums2 <span class="token operator">=</span> nums1        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums1 <span class="token operator">==</span> nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>输出结果<span class="token operator">:</span>                               输出结果<span class="token operator">:</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span>                               <span class="token number">50</span> <span class="token number">0</span><span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span>                               <span class="token number">50</span> <span class="token number">0</span><span class="token boolean">true</span>    # nums1指向的内存地址是nums2<span class="token boolean">true</span>    # 总结<span class="token operator">:</span>指向的是右边的内存地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析:<br>这里的 nums1 = nums2 不是将 nums2 的值赋值给 nums1 ,而是将 nums2指向了nums1的对象,或把nums2的内存地址指向给nums1,所以nums1的值就为nums2的值 .</p><p>举例2:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> x <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">change</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token string">"cd"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>输出结果<span class="token operator">:</span>ab      # x本身cd      # a这里引用的是<span class="token string">"cd"</span>的内存地址 入参的作用域也仅限函数内部，属于局部变量ab      # x本身<span class="token punctuation">,</span>不会因为上面的<span class="token function">change</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>而改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在JAVA里，<font color="blue">“=”不能被看成是一个赋值语句，它不是在把一个对象赋给另外一个对象，它的执行过程实质上是将右边对象的地址传给了左边的引用，使得左边的引用指向了右边的对象</font>。JAVA表面上看起来没有指针，但它的引用其实质就是一个指针，<font color="blue">引用里面存放的并不是对象，而是该对象的地址，使得该引用指向了对象</font>。</li><li>在JAVA里，“=”语句不应该被翻译成赋值语句，因为它所执行的确实不是一个赋值的过程，<font color="blue">而是一个传地址的过程</font></li><li>在JAVA中，<font color="blue">方法的入参对于基本数据类型和字符串常量来说，传递的其实只是这个值本身的一个拷贝而已</font>，对于外面的变量来说，并没有改变什么，入参的作用域也仅限函数内部，属于局部变量（对于包装类型和String，依然如此）。 </li><li>综上所述，可以简单的记为，在初始化时，<font color="blue">“=”语句左边的是引用，右边new出来的是对象。在后面的左右都是引用的“=”语句时，左右的引用同时指向了右边引用所指向的对象。</font><br>再所谓实例，其实就是对象的同义词。 </li></ul><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><table><thead><tr><th>访问权限</th><th>本类</th><th>本包的类</th><th>子类</th><th>非子类的外包类</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protect</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>default</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><h3 id="构造器-继承问题"><a href="#构造器-继承问题" class="headerlink" title="构造器 继承问题"></a>构造器 继承问题</h3><ul><li><p>父类 仅仅声明了有参构造函数，没有自己声明无参构造函数，则子类必须<strong>重写</strong>父类构造函数 </p><p>父类 有无参构造函数，则子类<strong>不必重写</strong>父类构造函数。</p></li></ul><h3 id="this-amp-static"><a href="#this-amp-static" class="headerlink" title="this&amp; static"></a>this&amp; static</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">publist clatt <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//示例变量 (引用.的方式访问)</span>publis <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment">// 编译报错</span>    <span class="token class-name">Test</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="abstract类与接口的比较"><a href="#abstract类与接口的比较" class="headerlink" title="abstract类与接口的比较"></a>abstract类与接口的比较</h3><ul><li><code>abstract</code>类和接口都可以有<code>abstract</code>方法</li><li>接口中只可以有常量,不能有变量,而<code>abstract</code>类中既可以有常量也可以有变量</li><li><code>abstract</code>类中也可以有非<code>abstract</code>方法,接口不可以</li><li>抽象类的子类不是必须需要实现抽象类的抽象方法,如果抽象类的子类也是个抽象类的话就不用实现</li><li>具有抽象方法的类必须是抽象类</li></ul><hr><ul><li><p>方法的调用</p></li><li><p><font color="red">引用</font>.方法   不带有<font color="red">static </font>的方法是通过引用的方式访问的,这个过程需要对象的参与 (student1.方法)</p></li><li><p><font color="red">类名 </font>.方法  带有<font color="red">static </font>的方法是用过类名的方式访问的,这个执行过程中没有当前对象,自然也不存在this,类名可以省略</p></li><li><p>this不能使用在带有static 的方法中</p></li><li><p>this. 在区分示例变量和局部变量中不能省略</p></li><li><p>this可以使用在示例方法中,代表当前对象【语法格式：this.】</p></li><li><p>this可以使用在构造方法中，通过当前的构造方法调用其他构造方法【语法格式：thig（实参）】</p></li><li><p>this()这种语法只能出现在构造函数的第一行</p></li></ul><hr><ul><li>java中基本数据类型比较是否相等,使用**==**号判断</li><li>java中所有的引用数据类型统一使用<strong>equals</strong>方法判断</li></ul><hr><ul><li>如果A类中某个方法的参数是B类生命的对象(或某个方法返回的数据类型是B类对象),则A类依赖B类</li><li>A类中成员变量使用B类声明的对象,则称A类关联于B类</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Inner</span> <span class="token keyword">class</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 静态内部类</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner1</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token comment">// 实例内部类</span><span class="token keyword">class</span> <span class="token class-name">Inner2</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//局部内部类</span>        <span class="token keyword">class</span> <span class="token class-name">Inner3</span><span class="token punctuation">&#123;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 匿名内部类</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyMath</span> myMath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyMath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//匿名内部类 (代替接口的实现) 装逼可以用用 开发建议不用</span>        myMath<span class="token punctuation">.</span><span class="token function">mySum</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Compute</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyMath</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mySum</span><span class="token punctuation">(</span><span class="token class-name">Compute</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"+"</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>c<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>装箱、拆箱</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 基本数据类型->引用数据类型(手动装箱)</span><span class="token keyword">int</span> retVlaue <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 引用数据类型->基本数据类型(手动拆箱)</span><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>              <span class="token comment">// 自动装箱</span><span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>                    <span class="token comment">// 自动拆箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'我'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'国'</span><span class="token punctuation">,</span><span class="token string">'人'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"胡鑫亮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>        <span class="token class-name">Hello</span> <span class="token class-name">World</span>        abcdefg        bcdef        中国人        胡鑫亮<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">"中过人"</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hollo World.java"</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World.java"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABCDef"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dasagagaacavavajavadaodako"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"dada "</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>bytes<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"javaasdafagagagagajava"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> newString <span class="token operator">=</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"http://"</span><span class="token punctuation">,</span><span class="token string">"https://"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> ymd <span class="token operator">=</span> <span class="token string">"2000-11-23"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>ymd<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ymd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token string">"我是中国人"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABGJAcafhuADABGbbJFABjb"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ABGJAcafhuADABGbbJFABjb"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  adaadad  "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span>  s2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Customer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Customer2</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Customer2&#123;&#125;"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>过<span class="token number">0</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token boolean">true</span><span class="token number">15</span><span class="token boolean">false</span><span class="token number">97</span> <span class="token number">98</span> <span class="token number">99</span> <span class="token number">100</span> <span class="token number">101</span> <span class="token number">102</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">18</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com<span class="token number">2000</span><span class="token number">11</span><span class="token number">23</span><span class="token boolean">true</span>baidu<span class="token punctuation">.</span>comba我是中国人abgjacafhuadabgbbjfabjbABGJACAFHUADABGBBJFABJBadaadad<span class="token boolean">true</span><span class="token class-name">Customer2</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span><span class="token annotation punctuation">@1b6d3586</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="StringBuffer-amp-Stringbuilder"><a href="#StringBuffer-amp-Stringbuilder" class="headerlink" title="StringBuffer&amp;Stringbuilder"></a>StringBuffer&amp;Stringbuilder</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//StringBuffer 是线程安全的</span><span class="token comment">//Stringbuilder是非线程安全的</span><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s1<span class="token operator">+=</span>i<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">StringBuffer</span> stringBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringBuffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuffer</span> stringBuffer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">StringBuilderTest01</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilderTest01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>类和类之间具有共同特征,将这些共同特征提取出来,形成的就是抽象类</li><li>抽象类属于引用数据类型</li><li>抽象类无法实例化,无法创建对象,抽象类是用来继承的</li><li><code>final</code>和<code>abstract</code>不能联合使用</li><li>抽象类的子类可以使抽象类</li><li>抽象类无法实例化,但抽象类有构造方法,这个构造方法是供子类使用的</li><li>抽象方法中可以没有抽象类,抽象类必须在抽象方法中</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>接口中的抽象方法定义时,<code>public abstract</code>修饰符可以省略</li><li>接口中的方法都是抽象方法,所以接口中的方法不能有方法体</li><li>接口中的常量的<code>public static final</code>可以省略</li><li>接口中的所有元素都是<code>public</code>修饰的</li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p><img src="https://img-blog.csdnimg.cn/5c4f1a1c8739415d94180c5477489a70.png" alt="Java异常体系"></p><p>异常的表现形式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">NumberFormatException</span> nfe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"数字格式化异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 异常处理两种方式 try catch 捕捉(推荐使用),或throw 抛出(让调用者处理使用,)</span> <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\java-书\\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">ArithmeticException</span> <span class="token operator">|</span> <span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在?数字异常?空指针异常?都有可能!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally代码一定执行,除非 System.exit(0); "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionTest01</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//编译时异常</span>    <span class="token keyword">public</span> <span class="token class-name">MyExceptionTest01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyExceptionTest01</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExceptionTest01</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">&#123;</span><span class="token comment">//运行时异常</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重写之后的方法不能比重写之前的方法抛出更多的异常,可以更少</li></ul><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><img src="https://img-blog.csdnimg.cn/0168c290b5904154a26544f805b2bf6a.png" alt="Java集合框架思维导图"></p><h4 id="Map遍历的四种方式"><a href="#Map遍历的四种方式" class="headerlink" title="Map遍历的四种方式"></a>Map遍历的四种方式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"hello1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"hello2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> keys <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//迭代器</span>     <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> i <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Integer</span> key <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">//foreach</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> keys     <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">//Set&lt;Map.Entry&lt;Integer, String>>  Map -> Set</span>     <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> s <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> s1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2 <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token comment">// 效率最高</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> node <span class="token operator">:</span> set     <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> node<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Hashtable 的 key 和value 都不能为null HashMap 集合的key和value都可以为null的 (图片写错了)</p></li><li><p>放到TreeSet集合中或者TreeMap集合key部分的元素先要做到排序,有以下两种方式</p><ul><li>放在集合中的元素实现jva.lang.Comparable接口 </li><li>在构造TreeSet或者TreeMp集合的时候给他传一个比较器对象</li><li>比较规则不变或只有一个时,建议使用 Comparable接口</li><li>比较规则有多个时,建议使用 Comparator 接口</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Comparable</span><span class="token keyword">class</span> <span class="token class-name">Vip</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Vip</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Vip</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">==</span>o<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">-</span>o<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Comparator</span><span class="token keyword">class</span> <span class="token class-name">WuGuiComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WuGui</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">WuGui</span> o1<span class="token punctuation">,</span> <span class="token class-name">WuGui</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> o1<span class="token punctuation">.</span>age<span class="token operator">-</span>o2<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//或者匿名内部类直接new 接口</span><span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WuGui</span><span class="token punctuation">></span></span> treeSets <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WuGui</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">WuGui</span> o1<span class="token punctuation">,</span> <span class="token class-name">WuGui</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> o1<span class="token punctuation">.</span>age <span class="token operator">-</span> o2<span class="token punctuation">.</span>age<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h3><h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><ul><li>字节流和字符流：<ul><li>字节流：以字节为单位，每次次读入或读出是8位数据。可以读任何类型数据。</li><li>字符流：以字符为单位，每次次读入或读出是16位数据。其只能读取字符类型数据。</li></ul></li><li>输出流和输入流：<ul><li>输入流：从文件读入到内存。只能进行读操作。</li><li>输出流：从内存读出到文件。只能进行写操作。</li></ul></li><li>节点流和处理流：<ul><li>节点流：直接与数据源相连，读入或读出。</li><li>处理流：与节点流一块使用，在节点流的基础上，再套接一层，套接在节点流上的就是处理流。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/a362489654ae473698f170100ea3cbb6.png" alt="I/O流"></p><h4 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 一次读取一个字节 （效率低，一般不用）</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readData <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readData<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">// 一次读取四个字节</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> readCount <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回流当中剩余的没有读到的字节数量</span>    fis<span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 跳过几个字节不读</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>fis<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//不适合太大的文件</span>    <span class="token keyword">int</span> readCount <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"我是一个中国人,我骄傲!!!"</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> mb <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>mb<span class="token punctuation">)</span><span class="token punctuation">;</span>    fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Example7</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyTest01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> reCoount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>reCoount <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>reCoount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readCount <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fileWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    fileWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 字符输入流 读取文本方便</span><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> readerCount<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readerCount <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readerCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'我'</span><span class="token punctuation">,</span><span class="token string">'是'</span><span class="token punctuation">,</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'国'</span><span class="token punctuation">,</span><span class="token string">'人'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"德玛西亚"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedReader</span> bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        bf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BufferedReader-1"><a href="#BufferedReader-1" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedReader</span> bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> line <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BufferedWriter"><a href="#BufferedWriter" class="headerlink" title="BufferedWriter"></a>BufferedWriter</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"HelloWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"woshi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"huxinlaing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DataOutputStream"><a href="#DataOutputStream" class="headerlink" title="DataOutputStream"></a>DataOutputStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">400L</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">3.0f</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> sex <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'g'</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeByte</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeFloat</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">writeChar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DataInputStream"><a href="#DataInputStream" class="headerlink" title="DataInputStream"></a>DataInputStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">byte</span> b <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">short</span> s <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">long</span> l <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">float</span> f <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">double</span> d <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">boolean</span> sex <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">char</span> c <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>       dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PrintStream"><a href="#PrintStream" class="headerlink" title="PrintStream"></a>PrintStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分开写</span><span class="token class-name">PrintStream</span> ps<span class="token operator">=</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//PrintStream printStream = (new PrintStream(new FileOutputStream("F:\\java IO流文件放置\\log")));</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// System.setOut(printStream);</span><span class="token comment">//标准输出流不在指向控制台,而是指向log文件</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置\\log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ObjectOutputStream"><a href="#ObjectOutputStream" class="headerlink" title="ObjectOutputStream"></a>ObjectOutputStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//student对象不支持序列化 必须实现Serializable接口方可-</span><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token string">"hu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置\\students"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//序列化对象</span>oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置\\students"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//反序列化    </span><span class="token class-name">Object</span> o <span class="token operator">=</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>   ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>transient</code> : 关键字不参与序列化</li></ul><h4 id="序列化版本号"><a href="#序列化版本号" class="headerlink" title="序列化版本号"></a>序列化版本号</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">555516245443047316L</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//属性配置文件    </span><span class="token comment">//创建一个输入流对象</span><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置\\userinfo.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新建一个map集合</span><span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> username <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> password <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="File"><a href="#File" class="headerlink" title="File"></a>File</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置\\file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以文件的形式存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    f1<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//以目录的形式存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f1<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    f1<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">File</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置\\file\\a\\v\\c\\a\\d\\f"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>f2<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    f2<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">File</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置\\file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> parentFile <span class="token operator">=</span>f3<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取绝对路径"</span><span class="token operator">+</span>parentFile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> f4<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f4<span class="token punctuation">.</span><span class="token function">getAbsoluteFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件名"</span><span class="token operator">+</span>f1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是不是文件</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是不是目录</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取文件最后一次修改时间</span><span class="token keyword">long</span> lastModified <span class="token operator">=</span> f1<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss:SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"F:\\java IO流文件放置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">File</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> file1 <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f<span class="token operator">:</span>file1    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：输入输出流中的入和出，都是相对于系统内存而言的。为什么要有处理流？直接使用节点流，读写不方便，为了更方便的读写文件，才有了处理流。 包装流与节点流是相对而言的,外面的包装流,里面的参数是节点流</p></blockquote><p><img src="https://img-blog.csdnimg.cn/5695ebf864eb4de8b40bd4420bac5517.png" alt="Java I/O Mind"></p><p><img src="https://img-blog.csdnimg.cn/f866759318fd48709367db234091f2d5.png" alt="流按类型分类"></p><p><img src="https://img-blog.csdnimg.cn/df8e2e64bc754b7d9712c4e13fee5bad.png" alt="流按用途分类"></p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>线程实现三种的方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. extends Thread</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">1000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//编写程序 这段程序运行在分支线程（栈）中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">1000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分支线程--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.1 implements Runnable</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分支线程--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2.2 匿名内部类写法</span> <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分支线程--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程--->"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">// 3. 实现 Callable 接口</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个”未来任务类“对象</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//call方法相当于run()方法</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call method begin!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call method end!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建线程对象</span>        <span class="token class-name">Thread</span> t<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//启动线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取返回值</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程执行结果："</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//main 方法执行到这里必须等待 因为这个线程在main线程中执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用API</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动线程</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取当前线程名称</span><span class="token class-name">M</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"m1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置线程名称</span>myThread4<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程休眠</span>thread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 终止线程休眠,采用了java异常处理机制</span>thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 终止线程已过时(不建议使用)</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置当前线程的优先级</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取当前线程的默认优先级</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MAX_PRIORITY  <span class="token comment">// 线程优先级最高</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>MIN_PRIORITY <span class="token comment">// 线程优先级最低</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>NORM_PRIORITY <span class="token comment">// 默认线程优先级</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 让步线程 暂停当前正在执行的线程对象，并执行其他线程。</span>thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 合并线程 thread合并到当前线程 ,当前线程受阻 thread线程直到结束</span>thread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//启动线程之前,将thread线程设置为守护线程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>获取java.lang.Class 实例的三种方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.Class c1 =  Class.forName("完整类名加包名");</span><span class="token class-name">Class</span> c1 <span class="token operator">=</span>  <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c1 : String 类型</span><span class="token comment">// 2. Class c1 =  对象.getClass()</span><span class="token class-name">Class</span> x <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// x : String 类型 == c1 </span><span class="token comment">// 3. .Class 属性</span><span class="token class-name">Class</span> v <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>资源绑定器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//只能绑定xxx.properties文件,这个文件必须在类路径下,文件扩展名必须是properties  后面的扩展名不能写</span>        <span class="token class-name">ResourceBundle</span> bundle <span class="token operator">=</span> <span class="token class-name">ResourceBundle</span><span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"Example9/classinfo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> classname <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//通过反射机制,获取Class,通过Class来实例化对象</span><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"Example9.bean.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       c<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//完整类名</span>c<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 简单类名</span>c<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取类中所有公开的属性Field</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取类中所有的Field(公开的)</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span> <span class="token comment">// 获取no属性</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">)</span> <span class="token comment">// 设置no值</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// 获取no值</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打破封装</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//遍历获取的Fileds,获取属性的类型</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回的是数字,对应修饰符的代号</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将代号转成字符串</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有的Method (包括私有的)</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有的方法参数列表</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>invoke <span class="token comment">// 调用方法(重要!!!) </span>c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取所有的构造方法</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 获取有参数的构造方法</span>c<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取无参数的构造方法</span>c<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取这类的父类</span>c<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取类中所有的接口</span>c<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation05</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">// 判断类上是否有MyAnnotation05 注解</span>c<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation05</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 获取该注解对象</span>c<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation05</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token comment">// 获取注解对象的属性</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li>元注解: 用来标注注解类型的注解<ul><li>@Target  用来标注被标注的注解可以出现在哪个位置<ul><li>@@Target(ElementType.METHOD) 只能出现在方法上</li></ul></li><li>@Rentention 用来标注被标注的注解最终保存在哪里<ul><li>@Retention(RetentionPolicy.RUNTIME)  该注解只保留在java class文件中,并且可以被反射机制所读取</li><li>@Retention(RetentionPolicy.CLASS) 该注解只保留在java class文件中</li><li>@Retention(RetentionPolicy.SOURCE) 该注解只保留在java源文件中</li></ul></li></ul></li><li>@Deprecated 这个注解标注的元素已过时</li><li>@Override只能注解方法</li><li>@Test 可直接运行方法，常用来做测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*自定义注解 */</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 注解中定义属性</span><span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">//属性指定默认值 那后面的可以不写了</span><span class="token annotation punctuation">@MyAnnotation02</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"shaoshao"</span><span class="token punctuation">,</span>color <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token comment">//属性名是value,并且只有一个属性值可以省略</span><span class="token annotation punctuation">@MyAnnotation03</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数据结构</title>
      <link href="/2021-09-22-c-yu-yan-shu-ju-jie-gou.html"/>
      <url>/2021-09-22-c-yu-yan-shu-ju-jie-gou.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1. 绪论"></a>1. 绪论</h3><ul><li><p>若需要利用形式参数直接访问修改实参值，则应将形式参数说明为<font color="red">指针</font>参数。</p></li><li><p>对一个算法的评价包括三个方面：</p><ul><li>健壮性</li><li>时间复杂度</li><li>空间复杂度 </li></ul></li><li><p>线性结构是数据元素之间存在一种<font color=red>一对一关系</font></p></li><li><p>算法分析的两个主要方面是:</p><ul><li>空间复杂度</li><li>时间复杂度    </li></ul></li><li><p>评价一个算法性能好坏的重要标准是<font color=red>算法的时间复杂度</font></p></li><li><p>算法分析的目的是<font color=red>分析算法的效率以求改进</font></p></li><li><p>抽象数据类型（ADT）包括定义和实现两方面，其中定义是独立于实现的，定义仅给出一个ADT的逻辑特性，不必考虑如何在计算机中实现。</p></li></ul><hr><p>1、试说明数据结构含义。</p><p><strong>是指相互之间存在一种或多种特定关系的数据元素集合。</strong></p><p>2、叙述四类基本数据结构的名称与含义。</p><p><strong>集合结构：结构中的数据元素之间除了同属一个集合的关系外，无任何关系。</strong></p><p><strong>线性结构：结构中的数据元素之间存在一对一的线性关系。</strong></p><p><strong>树形结构：结构中的数据元素之间存在一对多的层次结构。</strong></p><p><strong>图状结构：结构中的数据元素之间存在着多对多的任意关系。</strong></p><p>3、叙述算法的定义与特性。</p><p><strong>算法的定义：算法是规则的有限集合，视为解决特定问题而规定的一系列操作。</strong></p><p><strong>算法的特性：</strong></p><p><strong>（1）</strong>   <strong>有限性：有限步骤之内正常结束，不能形成无穷循环。</strong></p><p><strong>（2）</strong>  <strong>确定性：算法中的每一个步骤必须有确定的含义，无二义性。</strong></p><p><strong>（3）</strong>  <strong>输入：有多个或零个输入。</strong></p><p><strong>（4）</strong>  <strong>输出：至少有一个或多个输出。</strong></p><p><strong>（5）</strong>  <strong>可行性：原则上能精确进行，操作可通过已实现的基本运算执行有限次而完成。</strong></p><p>4、叙述算法的时间复杂度。</p><p><strong>所谓算法的时间复杂度，即是算法的时间量度，记为T（n）=O（f(n)）.它表示随时间规模n的增大，算法的执行时间的增长率和f（n）的增长率相同，称为算法的渐进时间复杂度，检查时间复杂度。</strong></p><p>5、叙述数据类型的概念。</p><p><strong>数据类型是一组性质相同的值集合以及定义在这个值集合上的一组操作的总称。</strong></p><p>6、叙述线性结构与非线性结构的差别。</p><p>(1)线性结构是一个有序数据元素的集合。 其中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的。常用的线性结构有：线性表，栈，队列，双队列，数组，串。<br> (2)非线性结构中各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系。根据关系的不同，可分为层次结构和群结构。</p><p>7、叙述抽象数据类型的概念。</p><p><strong>抽象数据类型是指基于一类逻辑关系的数据类型以及定义在这个类型之上的一组操作。</strong></p><h3 id="2-线性表"><a href="#2-线性表" class="headerlink" title="2.线性表"></a>2.线性表</h3><ul><li>线性表是n个类型相同的数据元素的有限序列,数据元素之间是<font color="red">一对一</font>的关系,即每个数据元素最多有一个前驱和一个直接后继</li><li>特点:<ul><li>同一性：线性表由同类数据元素组成，每一个ai必须属于同一数据对象</li><li>有穷性：线性表由有限个数据元素组成，表长度就是表中数据元素的个数</li><li>有序性：线性表中相邻数据元素之间存在着有序偶关系，&lt;ai ,ai+1&gt;</li></ul></li><li>在计算机内存放线性表，主要有两种基本的存储结构：<strong>顺序存储结构</strong>和<strong>链式存储结构</strong></li><li>采用顺序存储结构的线性表通常称为<strong>顺序表</strong></li><li>查找操作有<strong>按序号查找</strong>和<strong>按内容查找</strong>两种基本查找运算</li><li>单链表包括两个域:<ul><li><strong>数据域</strong>用来存储节点的值</li><li><strong>指针域</strong>用来存储数据元素的直接后继的地址</li><li>由于链表的每个节点只有一个指针域,故将这种链表成为<strong>单链表</strong></li></ul></li><li>头插法得到的单链表的逻辑顺序羽输入元素顺序相反,所以也称头插法建表为逆序建表法</li></ul><hr><ul><li>非空的循环单链表head的尾指针p满足  (p-&gt;next==head)</li><li>链表的特点是<ul><li>插入删除不需要移动元素</li><li>不必事先估计存储空间 </li><li>所需空间与线性表的长度成正比 </li></ul></li><li>链表不能随机访问任意元素</li><li>若某链表中最常用的操作是在最后一个结点之后插入一个结点和删除最后一个结点，则采用（ 带头结点的双循环链表  ）存储方式最节省运算时间。</li><li>若线性表中最常用的操作是存取第i个元素及其前驱的值，则采用（ 顺序表   ）存储方式节省时间。</li><li>顺序表读取元素花费的时间最少</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery问题解决</title>
      <link href="/2021-09-21-hexo-matery-wen-ti-jie-jue.html"/>
      <url>/2021-09-21-hexo-matery-wen-ti-jie-jue.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提交文件</span>hexo g -dhexo backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>问: hexo g -d 突然无缘无故提交不上去,但本地 hexo server 是可以正常显示的?</p><p>答: 删除public文件夹重新跑命令hexo clean hexo g -d ,不行就跑两次,等待成功.(就是这么不靠谱O(∩_∩)O)</p><p>问: 代码块中花括号被转义,不能正常显示?</p><p>答: 删除代码高亮插件,升级hexo版本到5.0以上，并启动自带高亮插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">删除插件:- <span class="token function">npm</span> uninstall hexo-prism-plugin 升级版本:- cnpm <span class="token function">install</span> -g npm-upgrade         <span class="token comment"># 升级系统中的插件</span>- cnpm update                         <span class="token comment"># 更新 hexo 及所有插件</span>- hexo -v                             <span class="token comment"># 确认 hexo 已经更新</span>系统自带高亮插件：highlight:  enable: <span class="token boolean">true</span>  line_number: <span class="token boolean">true</span>  auto_detect: <span class="token boolean">false</span>  tab_replace: <span class="token string">''</span>  wrap: <span class="token boolean">true</span>  hljs: <span class="token boolean">false</span>prismjs:  enable: <span class="token boolean">true</span>  preprocess: <span class="token boolean">true</span>  line_number: <span class="token boolean">true</span>  tab_replace: <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令学习</title>
      <link href="/2021-09-21-git-ming-ling-xue-xi.html"/>
      <url>/2021-09-21-git-ming-ling-xue-xi.html</url>
      
        <content type="html"><![CDATA[<ul><li>若下载分支的话需要加 <font color="dd0000"> -b </font>  + 分支名称 + 下载地址</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone -b backup git@github.com:shaoshaossm/shaoshaossm.github.io.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数据结构和算法(一)</title>
      <link href="/2021-09-21-java-shu-ju-jie-gou-he-suan-fa.html"/>
      <url>/2021-09-21-java-shu-ju-jie-gou-he-suan-fa.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-稀疏数组sparsearray"><a href="#1-稀疏数组sparsearray" class="headerlink" title="1.稀疏数组sparsearray"></a>1.稀疏数组sparsearray</h3><p>基本介绍:</p><p>当一个数组中大部分元素为０，或者为同一个值的数组时，可以使用稀疏数组来保存该数组。</p><p>稀疏数组的处理方法是:</p><ul><li><p>记录数组一共有几行几列，有多少个不同的值</p></li><li><p>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模</p></li></ul><p><img src="https://img-blog.csdnimg.cn/9c934b2eebc04a1f9ebdd7737b017824.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ1MjAwNzM5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="稀疏数组"></p><p>二维数组转稀疏数组的思路:</p><ul><li><p>遍历原始的二维数组,得到有效数据的个数 sum</p></li><li><p>根据sum就可以创建稀疏数组 sparseArr int [sum+1] [3]</p></li><li><p>将二维数组的有效数据存入到稀疏数组</p></li></ul><p>稀疏数组转二维数组思路:</p><ul><li>先读取稀疏数组的第一行,根据第一行的数据,创建原始的二维数组</li><li>再读取稀疏数组后几行的数据,并赋给原始的二维数组即可</li></ul><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/14 18:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparseArray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建一个二位数组 11*11</span>        <span class="token comment">//0: 表示没有去棋子  1:表示黑子  2: 表示蓝子</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        chessArr1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment">//输出原始的二维数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> row<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//二维数组 ------>  稀疏数组</span>        <span class="token comment">//1.遍历原始的二维数组得到sum总数</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>chessArr1<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>chessArr1<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.创建对应的稀疏数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sparseArr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//给稀疏数组赋值</span>        sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token comment">//遍历二维数组 将非0的值存放到sparseArr中</span>        <span class="token comment">// 用于记录第几个非0数据</span>        <span class="token keyword">int</span>  count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>chessArr1<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>chessArr1<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    sparseArr2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    sparseArr2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                    sparseArr2<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> chessArr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到的稀疏数组为~~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>sparseArr2<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%d\t%d\t\n"</span><span class="token punctuation">,</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 稀疏数组 ---->二维数组         */</span>        <span class="token comment">//1.先读取稀疏数组的第一行,根据第一行数据,创建原始的二维数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//2.再读取稀疏数组从第二行开始的数据,并赋值给二维数组即可</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>sparseArr2<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            chessArr2<span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> sparseArr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"恢复后的二维数组~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">:</span> chessArr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> data <span class="token operator">:</span> row<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-队列"><a href="#2-队列" class="headerlink" title="2.队列"></a>2.队列</h3><p>基本介绍:</p><ul><li>队列是一个有序列表，可以用<strong>数组</strong>或是<strong>链表</strong>来实现。</li><li>遵循<strong>先入先出</strong>的原则。即：先存入队列的数据，要先取出。后存入的要后取出</li><li>使用数组模拟队列示意图:</li></ul><p><img src="https://img-blog.csdnimg.cn/bd6a1f1d78b94fa4b34cdfc28ff8318b.png" alt="使用数组模拟队列示意图"></p><h4 id="2-1-数组模拟队列数据"><a href="#2-1-数组模拟队列数据" class="headerlink" title="2.1 数组模拟队列数据"></a>2.1 数组模拟队列数据</h4><p>数据存入队列思路分析:</p><ul><li>将尾指针往后移：rear+1 , 当front == rear 【空】</li><li>若尾指针 rear 小于队列的最大下标 maxSize-1，则将数据存入 rear所指的数组元素中，否则无法存入数据。 rear == maxSize - 1[队列满]</li></ul><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/15 9:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayQueueDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试数组模拟环形队列~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建队列</span>        <span class="token class-name">ArrayQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//接受用户输入</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s(show): 显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e(exit): 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a(add): 添加程序到队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g(get): 从队列中获取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h(head): 查看队列头数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                    queue<span class="token punctuation">.</span><span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"取出的数据是%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"取出的数据是%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 使用数组模拟队列 - 编写一个ArrayQueue类 */</span><span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//数组的最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span> <span class="token comment">//队列头</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span> <span class="token comment">//队列尾</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span> <span class="token comment">//该数组用于存放数据,模拟队列</span>    <span class="token comment">//创建队列的构造器</span>    <span class="token keyword">public</span> <span class="token class-name">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrMaxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> arrMaxSize<span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断队列是否满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断队列是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加数据到队列中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断队列是否已满</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列已满不能加入数据!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//rear++;  i++先赋值然后加1 ++i是先+1然后赋值</span>        arr<span class="token punctuation">[</span><span class="token operator">++</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取队列中的数据,出队列</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断队列是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列为空,不能取数据!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token operator">++</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示队列中的所有数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列为空,没有数据~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d]=%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示队列的头数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列为空,没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-数组模拟环形队列"><a href="#2-2-数组模拟环形队列" class="headerlink" title="2.2 数组模拟环形队列"></a>2.2 数组模拟环形队列</h4><p>分析说明</p><ul><li>尾索引的下一个为头索引时表示队列满,即将队列容量空出一个作为约定,这个在做判断队列满的时候需要注意(rear+1)%maxSize == front [满]</li><li>rear  == front [空]</li><li>队列中的有效的数据个数:(rear+maxSize-front)%maxSize //rear =1 front =0</li><li>front指向队列的第一个元素,front 的初始值是0</li><li>rear指向队列的最后一个元素的后一个位置,因为希望空出一个空间作为约定(判断队列是否满) rear的初始值是0</li></ul><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/15 22:22 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleArrayQueueDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建队列</span>        <span class="token class-name">CircleArray</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleArray</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里设置的4其队列的有效数据最大是3</span>        <span class="token comment">//接受用户输入</span>        <span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> loop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>loop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s(show): 显示队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"e(exit): 退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a(add): 添加程序到队列"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"g(get): 从队列中获取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"h(head): 查看队列头数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                    queue<span class="token punctuation">.</span><span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">addQueue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'g'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"取出的数据是%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">int</span> res <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"取出的数据是%d\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>                    scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    loop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"程序退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CircleArray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">//数组的最大容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> front<span class="token punctuation">;</span> <span class="token comment">//front指向队列的第一个元素,front 的初始值是0;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rear<span class="token punctuation">;</span> <span class="token comment">//rear指向队列的最后一个元素的后一个位置,因为希望空出一个空间作为约定(判断队列是否满) rear的初始值是0;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span> <span class="token comment">//该数组用于存放数据,模拟队列</span>    <span class="token keyword">public</span> <span class="token class-name">CircleArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrMaxSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxSize <span class="token operator">=</span> arrMaxSize<span class="token punctuation">;</span>        arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断队列是否满</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//判断队列是否为空</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rear <span class="token operator">==</span> front<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加数据到队列中</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断队列是否已满</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列已满不能加入数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//直接将数据加入</span>        arr<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token comment">//将 rear 后移,这里必须考虑取模</span>        rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取队列中的数据,出队列</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断队列是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列为空,不能取数据!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/**         * 这里需分析出front是指向队列的第一个元素         * 1.先把front 对应的值保留到一个临时变量         * 2.将front 后移,考虑取模         * 3.将临时变量返回         */</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxSize<span class="token punctuation">;</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示队列中的所有数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"队列为空,没有数据~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> front<span class="token operator">+</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"arr[%d]=%d\n"</span><span class="token punctuation">,</span> i<span class="token operator">%</span>maxSize<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token operator">%</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//求出当前队列有效数据的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>rear<span class="token operator">+</span>maxSize<span class="token operator">-</span>front<span class="token punctuation">)</span><span class="token operator">%</span>maxSize<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示队列的头数据</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">headQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列为空,没有数据~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-链表"><a href="#3-链表" class="headerlink" title="3.链表"></a>3.链表</h3><p>链表是有序的列表:</p><ul><li>链表是以节点的方式来存储,是链式存储</li><li>每个节点包含 data 域， next 域：指向下一个节点  </li><li>链表的<strong>各个节点不一定是连续存储</strong>.  </li><li>链表分带头节点的链表和没有头节点的链表，根据实际的需求来确定</li></ul><h4 id="3-1单向链表"><a href="#3-1单向链表" class="headerlink" title="3.1单向链表"></a>3.1单向链表</h4><ul><li><p>添加英雄,直接添加到链表尾部</p><ul><li>先创建一个head节点,用来表示单链表的头</li><li>后面每添加一个节点,就直接加入到链表的尾部</li><li>通过一个辅助变量遍历,帮助遍历整个链表</li></ul></li><li><p>添加英雄,根据<strong>排名</strong>将英雄插入指定位置</p><ul><li>首先根据辅助节点找到新添加节点的位置</li><li>新的节点.next = temp.next</li><li>将temp.next = 新的节点</li></ul></li><li><p>修改节点功能</p><ul><li>先找到该节点,通过遍历</li><li>temp.name = newHeroNode.name; temp.nickname = newHeroNode.nickname</li></ul></li><li><p>删除节点</p><ul><li>先找到需要删除的这个节点的前一个节点temp</li><li>temp.next = temp.next.next</li><li>被删除的节点,将不会有其他引用指向,会被gc回收</li></ul></li><li><p>求单链表中节点个数</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//空链表</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> lenght <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            lenght<span class="token operator">++</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lenght<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>求倒数第k个节点<ul><li>编写一个方法,接收head节点,同时接收一个index</li><li>index 表示倒数第index个节点</li><li>先把链表从头到尾遍历,得到链表的总长度getlength</li><li>得到size后,从链表的第一个开始遍历(size-index)个,就可以得到</li><li>如果找到了,则返回该节点,否则返回null</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HeroNode</span> <span class="token function">findLastIndexNode</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//第一个遍历得到链表的总长度(节点个数)</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//第二次遍历 size-index 位置,就是我们倒数第k个节点</span>        <span class="token comment">//index 验证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//定义一个辅助变量,for 循环定位到倒数的index</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size <span class="token operator">-</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>反转单链表  (头插法)</p><ul><li><p>定义一个节点reverseHead = new HeroNode();</p></li><li><p>从头到尾遍历原来的节点,每遍历一个节点就将其取出,并放在新的链表reverseHead的最前端</p></li><li><p>原来的链表的head.next = reverseHead.next</p></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//如果链表为空或只有一个节点 无需反转 直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//定义一个辅助指针,帮助遍历原来的链表</span>        <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//指向当前节点的下一个节点</span>        <span class="token class-name">HeroNode</span> reverseHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//先暂时保存当前节点的下一个节点,后面需要使用</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> reverseHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//将cur的下一个节点指向新的链表的最前端</span>            reverseHead<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span> <span class="token comment">//将cur连接到新的链表上</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span> <span class="token comment">//cure 后移</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将head.next 指向 reverseHead.next,实现单链表反转</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> reverseHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从尾到头打印单链表<ul><li>利用栈的数据结构,将各个节点压入栈中,然后利用栈的<font color="red">先进后出</font>的特点,实现逆序打印的效果</li></ul></li></ul><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span>  <span class="token function">reversePrint</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//创建一个栈,将各个节点压入栈中</span>           <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeroNode</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">HeroNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>               cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实现:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/9/16 11:59 * &lt;p> * 单向链表创建并直接添加到链表的尾部实现&amp;&amp;考虑排名将英雄添加到指定位置 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleLinkListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HeroNode</span> heroNode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"易"</span><span class="token punctuation">,</span> <span class="token string">"无极剑圣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> heroNode2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"艾希"</span><span class="token punctuation">,</span> <span class="token string">"寒冰射手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> heroNode3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"瑞兹"</span><span class="token punctuation">,</span> <span class="token string">"流浪法师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode</span> heroNode4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"提莫"</span><span class="token punctuation">,</span> <span class="token string">"迅捷斥候"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建单向链表</span>        <span class="token class-name">SingleLinkList</span> singleLinkList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*singleLinkList.add(heroNode1);        singleLinkList.add(heroNode2);        singleLinkList.add(heroNode4);        singleLinkList.add(heroNode3);*/</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode1<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode2<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode4<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode3<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode3<span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试修改节点的代码</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"ad希"</span><span class="token punctuation">,</span> <span class="token string">"寒冰"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后的链表情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试删除节点的代码</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后的链表情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//测试求单链表中节点个数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有效的节点个数: "</span> <span class="token operator">+</span> <span class="token function">getLength</span><span class="token punctuation">(</span>singleLinkList<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试是否得到倒数第k个节点</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"倒数第1个节点: "</span> <span class="token operator">+</span> <span class="token function">findLastIndexNode</span><span class="token punctuation">(</span>singleLinkList<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//反转单链表</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反转单链表~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverseList</span><span class="token punctuation">(</span>singleLinkList<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleLinkList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//逆序打印单链表</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"逆序打印单链表~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reversePrint</span><span class="token punctuation">(</span>singleLinkList<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义SingleLinkList 管理我们的英雄</span><span class="token keyword">class</span> <span class="token class-name">SingleLinkList</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先初始化一个头节点,不存放数据</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 添加节点到单向链表     * 思路:当不考虑编号顺序时     * 1.找到当前链表的最后节点     * 2.将最后这个节点的next 指向新的节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> heroNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//因为head节点不能动,所以需要一个辅助节点变量temp</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//遍历链表,找到最后</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当退出while循环时temp就指向了链表的最后</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 第二种添加节点的方式 根据英雄排名插入到指定位置     * (如果有排名则添加失败,并给出提示)     * 1.首先找到添加的新的节点的位置,通过辅助变量通过遍历来搞定     * 2.新的节点.next = temp.next     * 3.将temp.next=新的节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addByOrder</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> heroNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//再次使用辅助节点来帮助我们找到添加的位置</span>        <span class="token comment">//因为单链表,因为我们找到temp 是位于添加位置的前一个节点,否则插入不了(1,,,4 若插入2的话temp要找的是1)</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//flag 标志用于判断添加的编号是否已经存在,默认未false</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明已经遍历到最后一个节点 直接在最后插入即可</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">></span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//位置找到,就在temp的后面插入 heroNode(2) 添加在temp和temp.next(4)之间</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//编号存在</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//上面三个条件都不成立 后移 遍历当前链表</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断flag 的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"准备插入英雄的编号 %d 已经存在,不能添加\n"</span><span class="token punctuation">,</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//插入到temp后面</span>            heroNode<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//修改节点的信息,根据no编号来修改,即no编号不修改</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">HeroNode</span> newHeroNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//根据no编号,找到需要修改的节点 定义辅助变量</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>no <span class="token operator">==</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找到了</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//根据flag 判断是否找到需要修改的节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">.</span>name <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>nickname <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>nickname<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到编号%d 的节点,不能修改\n"</span><span class="token punctuation">,</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 删除节点     * 1. head 不能动,需要一个temp辅助节点找到待删除节点前一个节点     * 2. 说明我们在比较时,是temp.next.no和需要删除节点的no比较     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//标志是否找到删除节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找到待删除节点的前一个节点temp</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要删除的 %d 节点不存在\n"</span><span class="token punctuation">,</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示链表[遍历]</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空,没有数据~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//头节点不能动再次使用辅助变量temp来遍历</span>        <span class="token class-name">HeroNode</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">//判断是否到最后</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出节点信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将temp后移</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义HeroNode,每个HeroNode对象就是一个节点</span><span class="token keyword">class</span> <span class="token class-name">HeroNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span> next<span class="token punctuation">;</span> <span class="token comment">//指向下一个节点</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> nickname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nickname <span class="token operator">=</span> nickname<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//为了显示方法 重写toString</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"HeroNode&#123;"</span> <span class="token operator">+</span>                <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", nickname='"</span> <span class="token operator">+</span> nickname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-双向链表"><a href="#3-2-双向链表" class="headerlink" title="3.2 双向链表"></a>3.2 双向链表</h4><ul><li><p>单向链表，<strong>查找的方向只能是一个方向</strong>，而双向链表可以向前或者向后查找。</p></li><li><p>单向链表不能自我删除，需要靠辅助节点 ，而双向链表，则可以<font color="red">自我删除</font>，所以前面我们单链表删除<br>时节点，总是找到temp,temp是待删除节点的前一个节点(认真体会).</p></li></ul><p>示意图：</p><p><img src="https://img-blog.csdnimg.cn/accb13b27dd14853b1adb28a57bc4af0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ1MjAwNzM5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="双向链表"></p><ul><li>遍历：和单链表一样，只是前后都可以遍历</li><li>添加：（默认添加到链表最后）<ul><li>先找到双向链表的最后一个节点</li><li>temp.next = newHeroNoed</li><li>newHeroNode.pre = temp</li></ul></li><li>添加：根据<strong>排名</strong>添加<ul><li>首先根据辅助节点找到新添加节点的位置</li><li>新的节点.next = temp.next</li><li>将temp.next = heroNode</li><li>temp.next.pre = heroNode;</li><li>heroNode.pre = temp;</li></ul></li><li>修改：和单链表思路一样</li><li>删除 （自我删除）<ul><li>直接找到要删除的节点 temp</li><li>temp.pre.next = temp.next</li><li>temp.next.pre = temp.pre</li></ul></li></ul><p>代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleLinkListDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HeroNode2</span> heroNode1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"易"</span><span class="token punctuation">,</span> <span class="token string">"无极剑圣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> heroNode2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"艾希"</span><span class="token punctuation">,</span> <span class="token string">"寒冰射手"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> heroNode3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"瑞兹"</span><span class="token punctuation">,</span> <span class="token string">"流浪法师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> heroNode4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"提莫"</span><span class="token punctuation">,</span> <span class="token string">"迅捷斥候"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HeroNode2</span> heroNode5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"拉莫斯"</span><span class="token punctuation">,</span> <span class="token string">"披甲龙龟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DoubleLinkList</span> doubleLinkList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoubleLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">/* doubleLinkList.add(heroNode1);        doubleLinkList.add(heroNode2);        doubleLinkList.add(heroNode3);        doubleLinkList.add(heroNode4);        doubleLinkList.add(heroNode5);*/</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode1<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode4<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode3<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode2<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">addByOrder</span><span class="token punctuation">(</span>heroNode5<span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//修改</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改后链表情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"ad希"</span><span class="token punctuation">,</span><span class="token string">"寒冰"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//删除</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除后链表情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        doubleLinkList<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">DoubleLinkList</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">HeroNode2</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历双向链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断链表是否为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空,没有数据~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//头节点不能动再次使用辅助变量temp来遍历</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment">//判断是否到最后</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//输出节点信息</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将temp后移</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加一个节点到双向链表的最后</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">HeroNode2</span> heroNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//因为head节点不能动,所以需要一个辅助节点变量temp</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment">//遍历链表,找到最后</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当退出while循环时temp就指向了链表的最后</span>        temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>        heroNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addByOrder</span><span class="token punctuation">(</span><span class="token class-name">HeroNode2</span> heroNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//再次使用辅助节点来帮助我们找到添加的位置</span>        <span class="token comment">//因为单链表,因为我们找到temp 是位于添加位置的前一个节点,否则插入不了(1,,,4 若插入2的话temp要找的是1)</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//flag 标志用于判断添加的编号是否已经存在,默认未false</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明已经遍历到最后一个节点 直接在最后插入即可</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">></span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//位置找到,就在temp的后面插入 heroNode(2) 添加在temp和temp.next(4)之间</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>no <span class="token operator">==</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//编号存在</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span> <span class="token comment">//上面三个条件都不成立 后移 遍历当前链表</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断flag 的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"准备插入英雄的编号 %d 已经存在,不能添加\n"</span><span class="token punctuation">,</span> heroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//插入到temp后面</span>            heroNode<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> heroNode<span class="token punctuation">;</span>            heroNode<span class="token punctuation">.</span>pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//修改一个节点的内容 和单向链表一样</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">HeroNode2</span> newHeroNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//根据no编号,找到需要修改的节点 定义辅助变量</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>no <span class="token operator">==</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找到了</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//根据flag 判断是否找到需要修改的节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">.</span>name <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>name<span class="token punctuation">;</span>            temp<span class="token punctuation">.</span>nickname <span class="token operator">=</span> newHeroNode<span class="token punctuation">.</span>nickname<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有找到编号%d 的节点,不能修改\n"</span><span class="token punctuation">,</span> newHeroNode<span class="token punctuation">.</span>no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从双向链表中删除节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">HeroNode2</span> temp <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//标志是否找到删除节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>no <span class="token operator">==</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找到待删除节点的前一个节点temp</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            temp<span class="token punctuation">.</span>pre<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment">//如果是最后i一个节点。不需要执行这句话</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                temp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>pre <span class="token operator">=</span> temp<span class="token punctuation">.</span>pre<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"要删除的 %d 节点不存在\n"</span><span class="token punctuation">,</span> no<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HeroNode2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> nickname<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span> next<span class="token punctuation">;</span> <span class="token comment">//指向下一个节点</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span> pre<span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token keyword">public</span> <span class="token class-name">HeroNode2</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> nickname<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nickname <span class="token operator">=</span> nickname<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//为了显示方法 重写toString</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"HeroNode&#123;"</span> <span class="token operator">+</span>                <span class="token string">"no="</span> <span class="token operator">+</span> no <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", nickname='"</span> <span class="token operator">+</span> nickname <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-单向环形链表"><a href="#3-3-单向环形链表" class="headerlink" title="3.3 单向环形链表"></a>3.3 单向环形链表</h4><p><img src="https://img-blog.csdnimg.cn/614ec237f9c6446fb5b09cb4a612fe38.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ1MjAwNzM5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="单向环形链表"></p><p>约瑟夫问题示意图:</p><p><img src="https://img-blog.csdnimg.cn/65514aefff8645d9843a9c9ee7bc37c0.png" alt="约瑟夫问题示意图"></p><ul><li><p>Josephu 问题为：设编号为1，2，… n的n个人围坐一圈，约定编号为k（1&lt;=k&lt;=n）的人从1开始报数，数到m 的那个人出列，它的下一位又从1开始报数，数到m的那个人又出列，依次类推，直到所有人出列为止，由此产生一个出队编号的序列。</p></li><li><p>用一个不带头结点的循环链表来处理Josephu 问题：先构成一个有n个结点的单循环链表，然后由k结点起从1开始计数，计到m时，对应结点从链表中删除，然后再从被删除结点的下一个结点又从1开始计数，直到最后一个结点从链表中删除算法结束。</p></li><li><p>约瑟夫创建环形链表图解:(每创建一个黄线重新指向)</p></li></ul><p><img src="https://img-blog.csdnimg.cn/36c4b5c528c94b8da8b3d7f18131363e.png" alt="创建环形链表思路图解"></p><p>思路:</p><ul><li>先创建第一个节点,让first指向该节点,并形成环形</li><li>后面每创建一个节点,就把该节点加入到已有的环形链表中即可</li></ul><p>遍历:</p><ul><li>先让一个辅助指针(变量)curBoy,指向first节点</li><li>然后通过一个while循环遍历该环形链表即可curBoy,next == first结束</li></ul><p>约瑟夫小孩出圈图解:</p><ul><li>创建一个辅助指针helper,事先应该指向环形链表的最后这个节点</li></ul><p><img src="https://img-blog.csdnimg.cn/eeb9ea73c6a14134a752125b9d539bc0.png" alt="初始状态"></p><ul><li>小孩报数前,先让first和helper移动k-1次</li><li>当小孩报数时,让first和helper指针同时移动m-1次</li></ul><p><img src="https://img-blog.csdnimg.cn/99ad0a54d9504752b485b4e2e1b71307.png" alt="移动m-1次"></p><ul><li>这时就可以将first指向小孩出圈的节点<ul><li>first = first.next</li><li>helper.next = first</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/8d6fc81894b14c62ac126c2f846ae839.png" alt="小孩出圈动作"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> josepfu <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CircleSingleLinkedList</span> circleSingleLinkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CircleSingleLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">showBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        circleSingleLinkedList<span class="token punctuation">.</span><span class="token function">countBoy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//5个人,1开始报数,数2下</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CircleSingleLinkedList</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//创建一个first节点,当前没有编号</span>    <span class="token keyword">private</span> <span class="token class-name">Boy</span> first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//添加小孩节点,构成环形列表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nums的值不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Boy</span> curBoy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//辅助指针,用来构建环形列表</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Boy</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                first <span class="token operator">=</span> boy<span class="token punctuation">;</span>                first<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构成环</span>                curBoy <span class="token operator">=</span> first<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                curBoy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指向下一个boy 上面的线连上了</span>                boy<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指到第一个节点  下面的线连上了</span>                curBoy <span class="token operator">=</span> boy<span class="token punctuation">;</span> <span class="token comment">//指向下一个boy 指针指上去了</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//遍历当前环形链表</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showBoy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"链表为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//first 不能动,仍然使用辅助指针完成遍历</span>        <span class="token class-name">Boy</span> curBoy <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小孩的编号 %d \n"</span><span class="token punctuation">,</span> curBoy<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>curBoy<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//遍历完毕</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            curBoy <span class="token operator">=</span> curBoy<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//curBoy后移</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 根据用户输入计算出圈的顺序     *     * @param startNo  从第几个小孩开始数数     * @param countNum 表示数记下     * @param nums     最初有多少个小孩在圈中     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">countBoy</span><span class="token punctuation">(</span><span class="token keyword">int</span> startNo<span class="token punctuation">,</span> <span class="token keyword">int</span> countNum<span class="token punctuation">,</span> <span class="token keyword">int</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//先对数据进行校验</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> startNo <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> startNo <span class="token operator">></span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"参数输入有误,清重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//创建辅助指针,帮助完成小孩出圈 事先应指向环形链表的最后这个节点</span>        <span class="token class-name">Boy</span> helper <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//小孩报数前,先让first和helper移动k-1次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startNo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//当小孩报数时,让first和helper指针同时移动m-1次</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>helper <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//圈中只有一人</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> countNum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                helper <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//first指向的节点就是小孩出圈的节点</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"小孩%d出圈\n"</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最后留在圈中的小孩编号%d\n"</span><span class="token punctuation">,</span> helper<span class="token punctuation">.</span><span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> no<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boy</span> next<span class="token punctuation">;</span><span class="token comment">//指向下一个节点 默认null</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNo</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>no <span class="token operator">=</span> no<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Boy</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Boy</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命题逻辑的基本概念</title>
      <link href="/2021-09-19-ming-ti-luo-ji-de-ji-ben-gai-nian.html"/>
      <url>/2021-09-19-ming-ti-luo-ji-de-ji-ben-gai-nian.html</url>
      
        <content type="html"><![CDATA[<h3 id="数理逻辑"><a href="#数理逻辑" class="headerlink" title=" 数理逻辑"></a><center> 数理逻辑</h3><h4 id="1-命题逻辑的基本概念"><a href="#1-命题逻辑的基本概念" class="headerlink" title="1. 命题逻辑的基本概念"></a>1. 命题逻辑的基本概念</h4><h5 id="1-1命题与联结词"><a href="#1-1命题与联结词" class="headerlink" title="1.1命题与联结词"></a>1.1命题与联结词</h5><ul><li><p>否定联结词  ﹁</p></li><li><p>合取联结词  ∧</p></li><li><p>析取联结词  ∨</p></li><li><p>蕴含联结词  →</p></li><li><p>等价联结词  ↔</p><center>联结词﹁,∧,∨,→,↔的定义</li></ul><table><thead><tr><th align="center">p  |  q</th><th align="center">﹁p</th><th align="center">p∧q</th><th align="center">p∨q</th><th align="center">p→q</th><th align="center">p↔q</th></tr></thead><tbody><tr><td align="center">0      0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">0      1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1      0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1     1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><h4 id="1-2-命题公式极其赋值"><a href="#1-2-命题公式极其赋值" class="headerlink" title="1.2 命题公式极其赋值"></a>1.2 命题公式极其赋值</h4><ul><li><p>若公式A是单个的命题变项,则称A为0层公式</p></li><li><p>若指定的一组值使A为1,则称为这组值为A的<font color="#dd0000">成真赋值</font> ;若使A为0,则称这组值为A的 <font color="#dd0000">成假赋值</font> </p></li><li><p>将命题公式A在所有赋值下取值情况列成表,称作A的<font color="#dd0000">真值表</font></p></li><li><p>设A未任一命题公式</p><ul><li><p>若A在它的各种赋值下取值均为真,则称A为<font color="#dd0000">重言式</font>或<font color="#dd0000">永真式</font></p></li><li><p>若A在它的各种赋值下取值均为真,则称A为<font color="#dd0000">矛盾式</font>或<font color="#dd0000">永假式</font></p></li><li><p>若A不是矛盾式,则称A为<font color="#dd0000">可满足式</font></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数理逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理与接口技术</title>
      <link href="/2021-09-19-wei-ji-yuan-li-he-jie-kou-ji-zhu.html"/>
      <url>/2021-09-19-wei-ji-yuan-li-he-jie-kou-ji-zhu.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-进制转换总结方法"><a href="#1-进制转换总结方法" class="headerlink" title="1.进制转换总结方法"></a>1.进制转换总结方法</h3><h4 id="1-1-十进制转换非十进制"><a href="#1-1-十进制转换非十进制" class="headerlink" title="1.1  十进制转换非十进制"></a>1.1  十进制转换非十进制</h4><p>总结:  十进制转换几进制就拿这个数除以几取余,知道商为0,然后倒叙写下来即可!<br>示例图:</p><p>   <img src="https://exp-picture.cdn.bcebos.com/3fe32442a07aa0107f5e7f8bbfbb19efa35f3ec1.jpg?x-bce-process=image/resize,m_lfit,w_500,limit_1/format,f_jpg/quality,q_80" alt="十进制转二进制"></p><h4 id="1-2-十进制小数部分转换非十进制"><a href="#1-2-十进制小数部分转换非十进制" class="headerlink" title="1.2 十进制小数部分转换非十进制"></a>1.2 十进制小数部分转换非十进制</h4><p>总结: 十进制转换几进制的小数部分就拿这个数的小数部分乘以几,得到的整数部分正序写到0.后面即可<br>方法：</p><p>1、乘2取整法，即将小数部分乘以2，然后取整数部分，剩下的小数部分继续乘以2，然后取整数部分，剩下的小数部分又乘以2，一直取到小数部分 。</p><p>2.为零为止。如果永远不能为零，就同十进制数的四舍五入一样，按照要求保留多少位小数时，就根据后面一位是0还是1，取舍，如果是零，舍掉，如果是1，向入一位。换句话说就是0舍1入。读数要从前面的整数读到后面的整数。</p><p>下面举例：<br>例1：将0.125换算为二进制<br>得出结果：将0.125换算为二进制（0.001）2 。</p><p>分析：</p><ul><li>第一步，将0.125乘以2，得0.25,则整数部分为0,小数部分为0.25。</li><li>第二步, 将小数部分0.25乘以2,得0.5,则整数部分为0,小数部分为0.5。</li><li>第三步, 将小数部分0.5乘以2,得1.0,则整数部分为1,小数部分为0.0。</li><li>第四步,读数,从第一位读起,读到最后一位,即为0.001。</li></ul><p><img src="https://iknow-pic.cdn.bcebos.com/e850352ac65c1038d8ca332ebc119313b17e89a2" alt="6.125转换成二进制"></p><h4 id="1-3-负整数转换成二进制"><a href="#1-3-负整数转换成二进制" class="headerlink" title="1.3 负整数转换成二进制"></a>1.3 负整数转换成二进制</h4><p>方法：先是将对应的正整数转换成二进制后，对二进制取反，然后对结果再加一。还以42为例，负整数就是-42，如图4所示为方法解释。最后即为：（-42）10=（11010110）2。<br><img src="https://iknow-pic.cdn.bcebos.com/11385343fbf2b2111d5e78a2c48065380dd78eee" alt="-42转换成二进制"></p><h4 id="1-4-正整数二进制转换为十进制"><a href="#1-4-正整数二进制转换为十进制" class="headerlink" title="1.4 正整数二进制转换为十进制"></a>1.4 正整数二进制转换为十进制</h4><p>方法: 首先将二进制数补齐位数，首位如果是0就代表是正整数，如果首位是1则代表是负整数。先看首位是0的正整数，补齐位数以后，将二进制中的位数分别将下边对应的值相乘，然后相加得到的就为十进制，比如1010转换为十进制。 </p><p><img src="https://iknow-pic.cdn.bcebos.com/fd039245d688d43f7eff6c1e731ed21b0ff43b8c?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_jpg" alt="1010转换成十进制"></p><h4 id="1-5-负整数二进制转换为十进制"><a href="#1-5-负整数二进制转换为十进制" class="headerlink" title="1.5 负整数二进制转换为十进制"></a>1.5 负整数二进制转换为十进制</h4><p>方法: 若二进制补足位数后首位为1时，就需要先取反再换算：例如，11101011，首位为1，那么就先取反吧：-00010100，然后算一下10100对应的十进制为20，所以对应的十进制为-20。</p><p><img src="https://iknow-pic.cdn.bcebos.com/838ba61ea8d3fd1f9cbe5fd63e4e251f94ca5fa3?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_jpg" alt="11101011"></p><h4 id="1-6-小知识点"><a href="#1-6-小知识点" class="headerlink" title="1.6 小知识点"></a>1.6 小知识点</h4><ol><li>表示二进制数时,后面必须加后缀B.</li><li>表示十六进制数时,后面必须加后缀H.</li><li>表示八进制数时,后面必须加后缀O或Q.</li></ol><h4 id="1-7-二进制相减"><a href="#1-7-二进制相减" class="headerlink" title="1.7 二进制相减"></a>1.7 二进制相减</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">101001</span>B  <span class="token operator">-</span><span class="token number">011010</span>B<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">001111</span>B    <span class="token number">0</span><span class="token operator">-</span><span class="token number">1</span> 向前面遇到的第一个的<span class="token number">1</span>借位变成<span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span>并把途中的<span class="token number">0</span>都改为<span class="token number">1</span><span class="token punctuation">,</span>且<span class="token number">1</span>变为<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-机器码"><a href="#2-机器码" class="headerlink" title="2.机器码"></a>2.机器码</h3><h4 id="2-1原码"><a href="#2-1原码" class="headerlink" title="2.1原码"></a>2.1原码</h4><p>正数的符号位用0表示,负数的符号位用1表示,其余位为数值,这种表示方法称为<strong>原码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">X</span> <span class="token number">105</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span> <span class="token number">1101001</span>B<span class="token class-name">X</span> <span class="token operator">=</span> <span class="token operator">+</span><span class="token number">105</span> <span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>原 <span class="token operator">=</span> <span class="token number">0110</span> <span class="token number">1001</span>B<span class="token class-name">X</span> <span class="token operator">=</span> <span class="token operator">-</span> <span class="token number">105</span> <span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>原 <span class="token operator">=</span> <span class="token number">1110</span> <span class="token number">1001</span>B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2反码"><a href="#2-2反码" class="headerlink" title="2.2反码"></a>2.2反码</h4><p>正数的反码与原码相同,最高位为符号位,用0表示,其余位为数值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0100</span>B<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token number">0001</span> <span class="token number">1111</span>B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>负数反码为它的正数按位取反,就是连同符号位一同取反</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token number">1111</span> <span class="token number">1011</span>B<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token number">1110</span> <span class="token number">0000</span>B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以,8位二进制数表示的反码范围为-127~+127,当带符号数用反码表示时,最高位为符号数,当他为正数时,后7位为真正的值,当它为负数时,后7为要取反才能得到真正的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token number">1001</span> <span class="token number">0100</span>B<span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>真值 <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1101011</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">107</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3补码"><a href="#2-3补码" class="headerlink" title="2.3补码"></a>2.3补码</h4><p>正数的补码表示与原码相同,最高位为符号位,用0表示,其余位为真值,负数的补码最高位为1,数值部分由他的反码再加1形成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>原 <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0100</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>补<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>原 <span class="token operator">=</span> <span class="token number">1000</span> <span class="token number">0100</span>B<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token number">1111</span> <span class="token number">1011</span>B   <span class="token punctuation">(</span>正数按位取反<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>补 <span class="token operator">=</span> <span class="token number">1111</span> <span class="token number">1100</span>B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补码–-gt-真数"><a href="#补码–-gt-真数" class="headerlink" title="补码–&gt;真数"></a>补码–&gt;真数</h3><p>当符号位用补码表示时,最高位是符号位,当符号位是0时,表示正数,后7位为其真正的数;当符号位是1时,表示负数,要将后7位最低位减1,求得反码,在按位取反,才能得到真正的数(<strong>真数</strong>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 已知[X]补 = 10010100B,求X的反码和原码</span><span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>反 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>补<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1001</span> <span class="token number">0100</span>B<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1001</span> <span class="token number">0011</span>B<span class="token punctuation">[</span><span class="token class-name">X</span><span class="token punctuation">]</span>原 <span class="token operator">=</span> <span class="token number">1110</span> <span class="token number">1100</span>B<span class="token class-name">X</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">110</span> <span class="token number">1100</span>B <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span><span class="token number">32</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">10</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">108</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>引进补码后,可以将补码连同符号位一起看做一个数,各位的权都是2的i次方,但最高位为0时表示正数,为1时表示负数,其余为数值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">]</span>补 <span class="token operator">=</span> <span class="token number">1000</span> <span class="token number">0000</span>B <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span>最高位的权为<span class="token number">2</span>的<span class="token number">7</span>次方 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span>同理<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>补 <span class="token operator">=</span> <span class="token number">1111</span> <span class="token number">1100</span>B <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token operator">+</span><span class="token number">32</span><span class="token operator">+</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">]</span>补 <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">0100</span>B <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以, <font color=green>任何一个数用补码表示后,都可以看成”连同符号位的数”</font>.符号位也一起参加运算,一个数减去另一个数时,只要加上其补码即可.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 求7-19=? 可以用7+[-19]补来完成</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>补 <span class="token operator">=</span> <span class="token number">00000111</span>B<span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">]</span>补 <span class="token operator">=</span> <span class="token number">00010011</span>B<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">]</span>补 <span class="token operator">=</span> <span class="token number">11101101</span>B  <span class="token number">0000</span> <span class="token number">0111</span>B <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>补<span class="token operator">+</span> <span class="token number">1110</span> <span class="token number">1101</span>B <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">]</span>补<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>  <span class="token number">11110100</span>B <span class="token operator">=</span> <span class="token function">F4H</span><span class="token punctuation">(</span>和<span class="token punctuation">)</span>和的补码 <span class="token operator">=</span> F4H <span class="token operator">=</span> <span class="token number">1111</span> <span class="token number">0100</span>B和的反码 <span class="token operator">=</span> F4H <span class="token operator">=</span> <span class="token number">1111</span> <span class="token number">0011</span>B和的原码 <span class="token operator">=</span> <span class="token number">1000</span> <span class="token number">1100</span>B 其真值未<span class="token operator">-</span><span class="token number">12</span>可见<span class="token punctuation">,</span><span class="token number">7</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-微处理器的结构和工作模式"><a href="#3-微处理器的结构和工作模式" class="headerlink" title="3.微处理器的结构和工作模式"></a>3.微处理器的结构和工作模式</h3><ul><li>8080/8088 CPU可直接寻址<font color=green>1MB</font>个内存单元,<font color=green>64kb</font>个I/O端口,他们的外部数据总线分别有<font color=green>16,8</font>根.</li><li>CF : 进行算数加减法运算时,最高位向前一位<font color=green>产生进位或借位</font>时,CF=1,否为CD=0</li><li>PF : 运算结果低八位有<font color=green>偶数</font>个1则CF=1,有<font color=green>奇数</font>个1则CF=0</li><li>AF : 在8位加减运算中,<font color=green>若低4位向高4位有进位或借位</font>,AF=1,否则AF=0,=<strong>这个结果只在BCD数运算时才有意义</strong> (BCD数: 用4位2进制数表示10进制 eg: 0001＝1  0010＝2 )</li><li>ZF : 若<font color=green>减法运算结果</font>为0,ZF=1否则ZF=0.ZF 标志常用来判断两个数是否相等,若相等,相减后ZF=1,若不等则ZF=0</li><li>SF : 若<font color=green>运算结果(8位,不算进的那一位)最高位</font>为1,则SF=1,表示该数为负数,否则SF=0,表示该数为正数</li><li>OF : 若运算结果超出机器所能表示的范围,运算结果是错误的<font color=green>(两个正(负)数相加为负(正)数</font>错误(同号相减肯定为0,异号相减肯定为1))就称为溢出OF=1,否则OF=0</li><li>8086CPU内部由<font color=green>执行单元EU</font>和<font color=green>总线接口单元BIU</font>组成。<ul><li>主要功能为:执行单元EU负责执行指令.它由算数逻辑单元、通用寄存器组、代码、对其译码后产生完成指令所需要的控制信息。</li><li>总线接口单元BIU负责CPU与寄存器和I/O 接口之间的信息传递</li></ul></li></ul><ol><li>两个带符号数 10110100B 和 11000111B 相加,运算后各标志的值等于多少,哪些标志是有意义的?如果吧这两个数当成无符号数,相加后哪些标志位是有意义的?</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token number">10110100</span>B<span class="token operator">+</span> <span class="token number">11000111</span>B<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">01111011</span>BCF<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>有进位PF<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>结果有偶数个<span class="token number">1</span>AF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>无半进位<span class="token punctuation">,</span>非BCD码运算<span class="token punctuation">,</span>无意义ZF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>结果非<span class="token number">0</span>SF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>结果为正数OF<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>溢出<span class="token punctuation">(</span>两个负数相加<span class="token punctuation">,</span>结果为正数<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 两个无符号数<span class="token punctuation">(</span>只有正数<span class="token punctuation">,</span>没有负数<span class="token punctuation">)</span><span class="token operator">:</span>不考虑SF和OF标志  <span class="token number">10110100</span>B<span class="token operator">+</span> <span class="token number">11000111</span>B<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">01111011</span>BCF<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>有进位PF<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>结果有偶数个<span class="token number">1</span>ZF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>结果非<span class="token number">0</span>AF、SF、OF无意义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>已知段地址:偏移地址分别为如下数值,他们的物理地址各是什么?</li></ol><p>（1）1200：3500H    （2）FF00：0458H    （3）3A60：0100H</p><p>运算方法：</p><ul><li>先将第一个寄存器的数值×16,即后面加个0. </li><li>再将它第二个寄存器中的偏移量相加即可</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token number">12000</span>H        ff000H      <span class="token number">3</span>A600H<span class="token operator">+</span>  <span class="token number">3500</span>H     <span class="token operator">+</span>   <span class="token number">0458</span>H    <span class="token operator">+</span>  <span class="token number">0100</span>h<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token number">15500</span>H       <span class="token number">0F</span>F458H      <span class="token number">3</span>A700H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>段基地址装入如下数值,则每段的起始地址和结束地址各是什么?</li></ol><p>（1）1200H      （2）3F05H        （3）0FFEH</p><p>运算方法：16进制(0-F) F:15  逢16进1</p><ul><li>起始地址: 段基地址×16,即后面加个0</li><li>结束地址: 段基地址×16+FFFFH</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">12000</span>H <span class="token operator">~</span> <span class="token number">21F</span>FFH     <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">3F</span><span class="token number">050</span>H <span class="token operator">~</span> <span class="token number">4F</span><span class="token number">04F</span>H     <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">0F</span>FE0H <span class="token operator">~</span> <span class="token number">1F</span>FDFH    <span class="token number">12000</span>H                  <span class="token number">3F</span><span class="token number">050</span>H                  <span class="token number">0F</span>FE0H<span class="token operator">+</span>    FFFFH               <span class="token operator">+</span>   FFFFH               <span class="token operator">+</span>   FFFFH<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">21F</span>FFH                  <span class="token number">4F</span><span class="token number">04F</span>H                  <span class="token number">1F</span>FDFH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>设SS:SP = 2000:0300H,则堆栈在内存中的物理地址范围是什么?执行两条push指令后,SS:SP=?再执行一条POP指令后,SS:SP=?</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">也就是求物理地址<span class="token operator">:</span> <span class="token number">20000</span>H <span class="token operator">~</span> <span class="token number">202f</span>fH入栈<span class="token operator">:</span>SS<span class="token operator">:</span>SP<span class="token operator">:</span> <span class="token number">2000</span><span class="token operator">:</span><span class="token number">02F</span>CH    <span class="token number">0300</span>H              <span class="token operator">-</span>  <span class="token number">0004</span>H <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">02F</span>CH出栈<span class="token operator">:</span>SS<span class="token operator">:</span>SP<span class="token operator">:</span> <span class="token number">2000</span><span class="token operator">:</span><span class="token number">02F</span>EH    <span class="token number">02F</span>CH <span class="token operator">+</span>  <span class="token number">0002</span>H <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token number">02F</span>EH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>8086工作于最小模式时,执行存储器读总线周期,T1~T4周期中主要完成哪些工作?</li></ol><ul><li><p>T1: M/*IO,地址出现20位的地址</p></li><li><p>T2: AD15–AD0 地址撤销,成高阻,A19–A16传输状态信息</p></li><li><p>T3: 采样READY信息,如为1则CPU读取数据,否则插入等待周期</p></li><li><p>T4: 数据从数据总线上撤销</p></li></ul><h3 id="4-8086的寻址方式和指令系统"><a href="#4-8086的寻址方式和指令系统" class="headerlink" title="4.8086的寻址方式和指令系统"></a>4.8086的寻址方式和指令系统</h3><p><img src="https://img-blog.csdnimg.cn/0c1c7d9e10fa468e80946079b9472631.png" alt="寻址方式判断"></p><p><img src="https://img-blog.csdnimg.cn/2ad3be2d094a498aa01126bce95dc7ce.png" alt="指令判断"></p><ol><li>已知:DS=1000H,BX=0200H,SI=02H,内存 10200H ~ 10205H单元的内容分别为10H,2AH,3CH46H,59H,6BH.下列每条指令执行完后AX寄存器的内容各是什么?</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 方法: (6): 0200+02+02=0204H  然后从内容 0-5 中数到下标第四个(也就是第五个数) 然后答案就是后面那个数加数到的那个数,即 6B59H</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">MOV</span> AX <span class="token punctuation">,</span> <span class="token number">0200</span>H     <span class="token number">0200</span>H      <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">MOV</span> AX <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">200</span>H<span class="token punctuation">]</span>       <span class="token number">2</span>A10H<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">MOV</span> AX <span class="token punctuation">,</span> <span class="token class-name">BX</span>        <span class="token number">0200</span>H      <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token class-name">MOV</span> AX <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">[</span>BX<span class="token punctuation">]</span>        <span class="token number">5946</span>H<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token class-name">MOV</span> AX <span class="token punctuation">,</span> <span class="token punctuation">[</span>BX<span class="token operator">+</span>SI<span class="token punctuation">]</span>   <span class="token number">463</span>CH      <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token class-name">MOV</span> AX <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">[</span>BX<span class="token operator">+</span>SI<span class="token punctuation">]</span>     <span class="token number">6</span>B59H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>设DS=1000H，ES=2000H，SS=3500H，SI=00A0H，DI=0024H，BX=0100H，BP=0200H，数据段中变量名为 VAL 的偏移地址值为 0030H，试说明下列源操作数字段的寻址方式是什么?物理地址值是多少?</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法: 有BX,SI 直接用DS=1000H×16=10000H,再加上后面对应的值即可</span><span class="token comment">//      有ES 直接用ES=2000H×16=20000H,再加上后面对应的值即可</span><span class="token comment">//      有BP 直接用SS=3500H×16=35000H,再加上后面对应的值即可</span><span class="token comment">// 总结: BP 用 SS ES 用 ES 其余都用 DS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>MOV AX，<span class="token punctuation">[</span><span class="token number">100</span>H<span class="token punctuation">]</span>      直接<span class="token punctuation">,</span><span class="token number">10100</span>H        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>MOV AX，VAL             直接，<span class="token number">10030</span>H<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>MOV AX，<span class="token punctuation">[</span>BX<span class="token punctuation">]</span>        寄存器间接<span class="token punctuation">,</span><span class="token number">10100</span>H <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>MOV AX，ES<span class="token operator">:</span><span class="token punctuation">[</span>BX<span class="token punctuation">]</span>         寄存器间接，<span class="token number">20100</span>H<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>MOV AX，<span class="token punctuation">[</span>SI<span class="token punctuation">]</span>        寄存器间接<span class="token punctuation">,</span><span class="token number">100</span>A0H        <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>MOV AX，<span class="token punctuation">[</span>BX<span class="token operator">+</span><span class="token number">10</span>H<span class="token punctuation">]</span>        寄存器相对，<span class="token number">10110</span>H<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>MOV AX，<span class="token punctuation">[</span>BP<span class="token punctuation">]</span>        寄存器间接<span class="token punctuation">,</span><span class="token number">35200</span>H        <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>MOV AX，VAL<span class="token punctuation">[</span>BP<span class="token operator">+</span>SI<span class="token punctuation">]</span>     相对基址变址，<span class="token number">352D</span><span class="token number">0</span>H<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>MOV AX，VAL<span class="token punctuation">[</span>BX<span class="token operator">+</span>DI<span class="token punctuation">]</span>  相对基址变址<span class="token punctuation">,</span><span class="token number">10154</span>H      <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>MOV AX，<span class="token punctuation">[</span>BP<span class="token operator">+</span>DI<span class="token punctuation">]</span>        基址变址，<span class="token number">35224</span>H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>已知 AX=2508H，BX=0F36H，CX=0004H，DX=1864H，求下列每条指令执行后的结果是什么?标志位 CF 等于什么?    <strong>AX(2508H) = AH(25H)+AL(08H)</strong>           </li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token class-name">AND</span> AH<span class="token punctuation">,</span>CL<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">OR</span> BL<span class="token punctuation">,</span><span class="token number">30</span>H <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token class-name">NOT</span> AX<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token class-name">XOR</span> CX<span class="token punctuation">,</span><span class="token number">0F</span>FFOH    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token class-name">TEST</span> DH<span class="token punctuation">,</span><span class="token number">0F</span>H      <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token class-name">CMP</span> CX<span class="token punctuation">,</span><span class="token number">00</span>H<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token class-name">SHR</span> DX<span class="token punctuation">,</span>CL        <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token class-name">SAR</span> AL<span class="token punctuation">,</span><span class="token number">1</span>         <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> <span class="token class-name">SHL</span> BH<span class="token punctuation">,</span>CL<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token class-name">SAL</span> AX<span class="token punctuation">,</span><span class="token number">1</span>        <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token class-name">RCL</span> BX<span class="token punctuation">,</span><span class="token number">1</span>        <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token class-name">ROR</span> DX<span class="token punctuation">,</span>CL<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> AH <span class="token operator">=</span> <span class="token number">25</span>H  CL <span class="token operator">=</span> <span class="token number">04</span>H        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>     BL <span class="token operator">=</span> <span class="token number">36</span>H                  <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>   AX <span class="token operator">=</span> <span class="token number">2508</span>H    <span class="token number">100101</span>B                           <span class="token number">110110</span>B             <span class="token punctuation">(</span>取反<span class="token punctuation">)</span> <span class="token number">00100101</span>B <span class="token number">00001000</span>B      <span class="token operator">*</span> <span class="token number">000100</span>B                   <span class="token punctuation">(</span>∨<span class="token punctuation">)</span>    <span class="token number">110000</span>B                    <span class="token number">11011010</span>B <span class="token number">11110111</span>B<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>               <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>            <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>          <span class="token number">000100</span>B <span class="token operator">=</span> <span class="token number">04</span>H                     <span class="token number">110110</span>B  <span class="token operator">=</span> <span class="token number">36</span>H                   DAF7H<span class="token number">04</span>替换AH的<span class="token number">25</span> <span class="token operator">:</span> AX <span class="token operator">=</span> <span class="token number">0408</span>H         <span class="token number">36</span>替换BL的<span class="token number">36</span> <span class="token operator">:</span> BX <span class="token operator">=</span> <span class="token number">0F</span><span class="token number">36</span>H      AX即原<span class="token number">2508</span>H的BCD数转<span class="token number">2</span>进制取反，为DAF7H<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>  异或运算                  <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>     逻辑与运算                <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    比较    <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0100</span>B              <span class="token number">00011000</span>B                       <span class="token number">0004</span>H  <span class="token number">0</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0000</span>B      <span class="token punctuation">(</span>∧<span class="token punctuation">)</span>    <span class="token number">00001111</span>B                  <span class="token operator">-</span>     <span class="token number">00</span>H<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>            <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>        <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">0100</span>B              <span class="token number">00001000</span>B                       <span class="token number">0004</span>H源操作数和目的操作数转换为BCD码       两操作数逻辑与运算结果二进制       将目的操作数减去源操作数，结果不返回到目的的二进制数，并进行异或运算。          数有<span class="token number">1</span>，零标志位ZF取<span class="token number">0</span><span class="token punctuation">,</span>结果不返回。  操作数，仅将结果反映在标志位。      CX<span class="token operator">=</span><span class="token number">0F</span>FF4H。                      DX<span class="token operator">=</span><span class="token number">01864</span>H                      CX<span class="token operator">=</span><span class="token number">0004</span>H<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>     <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>  逻辑右移                  <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> AL <span class="token operator">=</span> <span class="token number">08</span>H                       <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span> BH <span class="token operator">=</span> <span class="token number">0F</span>H CL <span class="token operator">=</span> <span class="token number">04</span>H   最低位进入CF，最高位补<span class="token number">0.</span>           <span class="token number">1000</span>B 右移一位                     <span class="token number">1111</span>B 左移四位   <span class="token number">1864</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">0186</span>H                    <span class="token number">100</span>B <span class="token punctuation">(</span><span class="token number">04</span>H<span class="token punctuation">)</span>                       <span class="token number">11110000</span>B  <span class="token punctuation">(</span>F0H<span class="token punctuation">)</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>               <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>                <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>        DX<span class="token operator">=</span><span class="token number">0186</span>H                    <span class="token number">04</span>H替换AL的<span class="token number">08</span>H即可 <span class="token operator">:</span> AX <span class="token operator">=</span> <span class="token number">2504</span>H      F0替换BH的<span class="token number">0F</span>即可 BX <span class="token operator">:</span> F036H<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>                <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  算数左移                 <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>  进位的循环左移                 <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> 循环右移   AX<span class="token operator">=</span><span class="token number">2508</span>H                           BX<span class="token operator">=</span><span class="token number">0F</span><span class="token number">36</span>H                        DX<span class="token operator">=</span><span class="token number">1864</span>H CL<span class="token operator">=</span><span class="token number">04</span>H<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">4</span><span class="token operator">=</span><span class="token number">16</span> <span class="token operator">*</span>       <span class="token number">2</span>                          <span class="token operator">*</span>       <span class="token number">2</span>                         DX<span class="token operator">=</span><span class="token number">1864</span>H<span class="token operator">/</span><span class="token number">16</span><span class="token operator">=</span><span class="token number">186</span>H<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">.4</span>  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>               <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>               <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>       <span class="token number">1</span>代表左移一位，即<span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span>               <span class="token number">1</span>代表左移一位，即<span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">1</span>                     AX<span class="token operator">=</span><span class="token number">4</span>A10H                      BX<span class="token operator">=</span><span class="token number">1E6</span>CH                        循环右移将余数放在最左边，<span class="token number">4186</span>H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>中断指令</strong>是指计算机在执行正常的程序时,由于某些事件的发生,需要暂时中止当前程序的运行,转到中断服务程序去为临时发生的事件服务,终端服务程序执行完毕后,又返回正常程序继续运行,这个过程称为中断</li><li><strong>汇编语言</strong>也称为符号语言,用助记符来代替二进制的机器指令操作码,是一系列指令功能的英文缩写</li><li><strong>位</strong>:二进制数的每一位是组成二进制信息的最小单位</li><li><strong>字节</strong>:8个二进制信息组成的一个单位称为1个字节</li><li><strong>字</strong>:16个二进制也就是两个字节</li><li><strong>字长</strong>:决定计算机内部一次能处理二进制代码的位数</li><li><strong>ASCAII</strong>:用7位代码来表示计算机中存储的字母数组字符</li><li>二进制代码以指令组的形式存储在计算机中称为<strong>程序</strong></li><li><strong>计算机基本组成</strong>:运算器控制器存储器,输入设备输出设备</li><li>一台计算机所能识别和执行的全部指令称为该机器的<strong>指令集</strong></li><li>用二进制形式表示的指令称为<strong>机器码</strong></li><li>每个单元有一个绝对地址称为<strong>物理地址</strong> 范围 00000~fffffh</li><li>20位物理地址 = 段基地址*16+16位偏移地址</li><li>8086最基本的工作是对存储器或io端口进行读写操作</li><li>Cpu完成一次访问存储器或io端口的时间称为总线周期,执行一条指令的时间称为<strong>指令周期</strong></li><li>每条指令的长短不同,一个指令周期可以有一个或几个总线周期组成</li><li><strong>指令方式</strong>是指令中说明操作数所在地址的方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 微机原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA&amp;Pycharm配置</title>
      <link href="/2021-09-19-idea-pycharm-pei-zhi.html"/>
      <url>/2021-09-19-idea-pycharm-pei-zhi.html</url>
      
        <content type="html"><![CDATA[<h3 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h3><h4 id="IDEA-提交-git"><a href="#IDEA-提交-git" class="headerlink" title="IDEA 提交 git"></a>IDEA 提交 git</h4><ol><li>创建一个空项目</li><li>点击如图所示</li></ol><p><img src="https://img-blog.csdnimg.cn/275115ac9cc843d0bdb001d8ec7f0fc4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ1MjAwNzM5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="创建 mercurial 存储库"></p><ol start="3"><li>下一步 点击如图所示</li></ol><p><img src="https://img-blog.csdnimg.cn/f6324e3f89684acb9f4216baf29aeeae.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ1MjAwNzM5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="add+ commit "></p><ol start="4"><li>再点击如图所示<br><img src="https://img-blog.csdnimg.cn/e1718aea99f04c18b72bc675d042700f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ1MjAwNzM5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="push代码到git"></li><li>提示输入仓库地址 输入即可提交代码,如图所示</li></ol><p><img src="https://img-blog.csdnimg.cn/1abec00e879f4c90a48272844a9acbf9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAd2VpeGluXzQ1MjAwNzM5,size_20,color_FFFFFF,t_70,g_se,x_16" alt="测试成功"></p><hr><h4 id="IDEA-生成序列化版本号"><a href="#IDEA-生成序列化版本号" class="headerlink" title="IDEA 生成序列化版本号"></a>IDEA 生成序列化版本号</h4><p><img src="https://img-blog.csdnimg.cn/270faca20fed451a87502d4781967295.png" alt="IDEA 生成序列化版本号配置"></p><p><img src="https://img-blog.csdnimg.cn/2fc708f00ac24de19ccba5941278938f.png" alt="ALT+Enter"></p><h4 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h4><p><img src="https://img-blog.csdnimg.cn/1be31dc81d6e40c3a47694178ac0e1ac.png" alt="debug菜单栏"></p><p><code>Show Execution Point (Alt + F10)</code>：如果你的光标在其它行或其它页面，点击这个按钮可跳转到当前代码执行的行。</p><p> <code>Step Over (F8)</code>：步过，一行一行地往下走，如果这一行上有方法不会进入方法。</p><p><code>Step Into (F7)</code>：步入，如果当前行有方法，可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法。</p><p><code> Force Step Into (Alt + Shift + F7)</code>：强制步入，能进入任何方法，查看底层源码的时候可以用这个进入官方类库的方法。</p><p><code>Step Out (Shift + F8)</code>：步出，从步入的方法内退出到方法调用处，此时方法已执行完毕，只是还没有完成赋值。</p><p><code> Drop Frame (默认无)</code>：回退断点，后面章节详细说明。</p><p><code> Run to Cursor (Alt + F9)</code>：运行到光标处，你可以将光标定位到你需要查看的那一行，然后使用这个功能，代码会运行至光标行，而不需要打断点。</p><p><code>Evaluate Expression (Alt + F8)</code>：计算表达式。</p><h4 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h4><p><img src="https://img-blog.csdnimg.cn/440c0c61e40d4ab3a942650f4ec95c0d.png" alt="tomcat"></p><p>[run-editConfiguration]</p><p><img src="https://img-blog.csdnimg.cn/53125e8cdd14499da0f448e742469393.png" alt="添加tomcat"></p><p><img src="https://img-blog.csdnimg.cn/dd64e71c531c4e9da5c2d62824c1d5fe.png" alt="tomcat"></p><p>[file-new moudle]</p><p><img src="https://img-blog.csdnimg.cn/9cce40a873cd4257bab02706f4f865fe.png" alt="创建项目"></p><p><img src="https://img-blog.csdnimg.cn/661c88634bc74a21a36981983521050a.png" alt="指定项目"></p><h4 id="maven项目管理"><a href="#maven项目管理" class="headerlink" title="maven项目管理"></a>maven项目管理</h4><ul><li>双击ctrl，选择项目，执行命令</li></ul><p><img src="https://img-blog.csdnimg.cn/c85e7ccc818e4ea3b173442f15fcab9f.png" alt="maven项目管理操作"></p><h4 id="创建springboot项目失败"><a href="#创建springboot项目失败" class="headerlink" title="创建springboot项目失败"></a>创建springboot项目失败</h4><ul><li>选择用阿里云地址(<a href="http://start.aliyun.com/)%E5%88%9B%E5%BB%BA%E5%8D%B3%E5%8F%AF">http://start.aliyun.com/)创建即可</a></li></ul><p><img src="https://img-blog.csdnimg.cn/c25170d406c84c34b969ca39c22d35f6.png" alt="更换地址"></p><h4 id="注解生效激活"><a href="#注解生效激活" class="headerlink" title="注解生效激活"></a>注解生效激活</h4><p><img src="https://img-blog.csdnimg.cn/98627ba52f8847edab68300ccdf05e3f.png" alt="注解生效激活"></p><h4 id="File-Type文件过滤"><a href="#File-Type文件过滤" class="headerlink" title="File Type文件过滤"></a>File Type文件过滤</h4><p><img src="https://img-blog.csdnimg.cn/99484db1e56340b599d188bf2090d63a.png" alt="File Type文件过滤"></p><h4 id="解决：Error-java-无效的源发行版-12"><a href="#解决：Error-java-无效的源发行版-12" class="headerlink" title="解决：Error:java: 无效的源发行版: 12"></a>解决：Error:java: 无效的源发行版: 12</h4><ul><li>按住 Ctrl+alt+shift+s</li></ul><p><img src="https://img-blog.csdnimg.cn/2fae7ab95b124f50a3bdcbbcfef86b7b.png" alt="第一步"><br><img src="https://img-blog.csdnimg.cn/21a06f0300644108b7613b4a33a86948.png" alt="第二步"><br><img src="https://img-blog.csdnimg.cn/04e12282bbca4c6d899a5c68afbddb8f.png" alt="第三步"></p><h4 id="启动热部署"><a href="#启动热部署" class="headerlink" title="启动热部署"></a>启动热部署</h4><ul><li>添加devtools依赖</li></ul><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;    &lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>热启动插件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addResources</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addResources</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2568153f3cce4a948edb703442ed6174.png" alt="启动ABCD"></p><ul><li>Ctrl + shift + Alt + / 选择 register</li></ul><p><img src="https://img-blog.csdnimg.cn/8903f77558b24d31af28daf4495a20d4.png" alt="勾选即可"></p><ul><li>重启IDEA</li></ul><h3 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h3><h4 id="Pycharm创建项目"><a href="#Pycharm创建项目" class="headerlink" title="Pycharm创建项目"></a>Pycharm创建项目</h4><p><img src="https://img-blog.csdnimg.cn/78cd2f5a52bd4b56a07a9b94edb1a500.png" alt="第一步"></p><p><img src="https://img-blog.csdnimg.cn/80d88ea4b77346cbb4df6c997e11871e.png" alt="第二步"></p><p><img src="https://img-blog.csdnimg.cn/576c07c52e8b447480707cc72840b226.png" alt="Create"></p><ul><li>安装类库的话直接cmd中安装即可,安装完后就在anaconda中了</li></ul><h4 id="SpringBoot核心配置文件中文乱码"><a href="#SpringBoot核心配置文件中文乱码" class="headerlink" title="SpringBoot核心配置文件中文乱码"></a>SpringBoot核心配置文件中文乱码</h4><p><img src="https://img-blog.csdnimg.cn/99e0aa91457349ea822b89387d3c11df.png" alt="UTF-8 + √"></p><h3 id="Pycharm-提交git"><a href="#Pycharm-提交git" class="headerlink" title="Pycharm 提交git"></a>Pycharm 提交git</h3><p><img src="https://img-blog.csdnimg.cn/5bcd42352f734a6e9ebf5003158f8ec2.png" alt="配置GIT executable地址"></p><p><img src="https://img-blog.csdnimg.cn/4f220ddb6dc24cfba3d99205964af5ed.png" alt="创建tokens"></p><p><img src="https://img-blog.csdnimg.cn/d432dcc0bbef44a49a67ca68541fddf8.png" alt="输入创建的密钥并测试"></p><p><img src="https://img-blog.csdnimg.cn/986af89f7d4c46a8b13ab19739653951.png" alt="创建git仓库"></p><h4 id="使用pycharm调用其他类中的函数"><a href="#使用pycharm调用其他类中的函数" class="headerlink" title="使用pycharm调用其他类中的函数"></a>使用pycharm调用其他类中的函数</h4><p><img src="https://img-blog.csdnimg.cn/c4497cd45e01405c9300f53afaa43fc8.png" alt="Import function"></p><hr><h4 id="PyCharm使用过程中遇到的问题"><a href="#PyCharm使用过程中遇到的问题" class="headerlink" title="PyCharm使用过程中遇到的问题"></a>PyCharm使用过程中遇到的问题</h4><ul><li><p>使用pycharm安装类库时安装失败,必须使用虚拟环境才能安装本地的不行</p></li><li><p>如果要本地安装的话需要到Scripts目录下使用pip install 才行</p></li></ul><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><ul><li>阿里云镜像 F:\ideaMaven\apache-maven-3.6.3\conf\settings.xml</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> IDEA </tag>
            
            <tag> Pycharm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
