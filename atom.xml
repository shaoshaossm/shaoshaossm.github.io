<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秋水墨色染</title>
  
  
  <link href="https://shaoshaossm.github.io/atom.xml" rel="self"/>
  
  <link href="https://shaoshaossm.github.io/"/>
  <updated>2022-01-12T10:42:12.615Z</updated>
  <id>https://shaoshaossm.github.io/</id>
  
  <author>
    <name>shaoshaossm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>open-CV的初步学习</title>
    <link href="https://shaoshaossm.github.io/2022-01-12-open-cv-de-chu-bu-xue-xi.html"/>
    <id>https://shaoshaossm.github.io/2022-01-12-open-cv-de-chu-bu-xue-xi.html</id>
    <published>2022-01-12T08:30:04.000Z</published>
    <updated>2022-01-12T10:42:12.615Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装指定版本</span>pip <span class="token function">install</span> opencv-python<span class="token operator">==</span><span class="token number">3.4</span>.2.17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 测试是否安装成功</span><span class="token keyword">import</span> cv2lena  <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span>lena<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 利用SIFT和SURF等进行特征提取</span>pip <span class="token function">install</span> opencv-contrib-python<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=</summary>
      
    
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/categories/Python/"/>
    
    
    <category term="OpenCV" scheme="https://shaoshaossm.github.io/tags/OpenCV/"/>
    
  </entry>
  
  <entry>
    <title>centos7程序启动命令合集</title>
    <link href="https://shaoshaossm.github.io/2021-12-20-centos7-cheng-xu-qi-dong-ming-ling-he-ji.html"/>
    <id>https://shaoshaossm.github.io/2021-12-20-centos7-cheng-xu-qi-dong-ming-ling-he-ji.html</id>
    <published>2021-12-20T14:34:10.000Z</published>
    <updated>2021-12-21T03:18:05.606Z</updated>
    
    <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./redis-server <span class="token punctuation">..</span>/redis.conf <span class="token operator">&amp;</span>./redis-cli -a <span class="token number">123456</span> -h <span class="token number">192.168</span>.174.131./zkServer.sh start<span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment"># ./nginx -c /usr/java/nginx/conf/nginx.conf</span>./mysqld_safe <span class="token operator">&amp;</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># nohup java -jar  /usr/java/jenkins/jenkins.war >/usr/java/jenkins/jenkins.out &amp;</span><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># cat /root/.jenkins/secrets/initialAdminPassword</span>密码:6ffe5db2ab1e4110ac62a31ee93a6039fdfs_trackerd /etc/fdfs/tracker.conffdfs_storaged /etc/fdfs/storage.conf/usr/java/nginx_fdfs/sbin/nginx -c /usr/java/nginx_fdfs/conf/nginx.confnginx Windows版启动 nginx.exe 关闭:nginx.exe -s stop<span class="token punctuation">[</span>root@localhost java<span class="token punctuation">]</span><span class="token comment"># rabbitmq-server start &amp;</span>systemctl start dockerdocker run -it centos /bin/bashF:<span class="token punctuation">\</span>elasticsearch<span class="token punctuation">\</span>elasticsearch-head-master<span class="token operator">></span>cnpm <span class="token function">install</span>F:<span class="token punctuation">\</span>elasticsearch<span class="token punctuation">\</span>elasticsearch-head-master<span class="token operator">></span>npm run startcanal  ./startup.sh清理浏览器缓存 ctrl <span class="token builtin class-name">shift</span> del下载文件到桌面 sz 文件名上传文件 rz -y<span class="token punctuation">(</span>覆盖<span class="token punctuation">)</span>git@github.com:1600767556/mybatis.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;
./redis-server &lt;span class=&quot;token punctuation&quot;&gt;..&lt;</summary>
      
    
    
    
    <category term="系统配置" scheme="https://shaoshaossm.github.io/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="centos" scheme="https://shaoshaossm.github.io/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>系统重装后需要配置的地方</title>
    <link href="https://shaoshaossm.github.io/2021-12-20-xi-tong-chong-zhuang-hou-xu-yao-pei-zhi-de-di-fang.html"/>
    <id>https://shaoshaossm.github.io/2021-12-20-xi-tong-chong-zhuang-hou-xu-yao-pei-zhi-de-di-fang.html</id>
    <published>2021-12-20T14:10:32.000Z</published>
    <updated>2022-01-12T08:29:06.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需要安装的软件"><a href="#需要安装的软件" class="headerlink" title="需要安装的软件"></a>需要安装的软件</h3><ul><li>google</li><li>7-zip</li><li>MySQL8.0+Navicat</li><li>pycharm</li><li>IDEA破解</li><li>office+visio</li><li>Typora</li><li>vmware16</li><li>搜狗输入法</li><li>TIM</li><li>更新<code>pip</code>到最新版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python -m pip <span class="token function">install</span> --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="需要配置的环境变量"><a href="#需要配置的环境变量" class="headerlink" title="需要配置的环境变量"></a>需要配置的环境变量</h3><ul><li>jdk</li><li>git</li><li>node</li><li>Maven</li></ul><p><img src="https://img-blog.csdnimg.cn/34071642a9754bd7a66ac9923eb69267.png" alt="JAVA&amp;MAVEN"></p><p><img src="https://img-blog.csdnimg.cn/bbb3ba307600453c9da98534404358cf.png" alt="环境变量"></p><h3 id="需要登录的账号"><a href="#需要登录的账号" class="headerlink" title="需要登录的账号"></a>需要登录的账号</h3><ul><li>edge登录</li><li>google登录(用到插件iGG)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;需要安装的软件&quot;&gt;&lt;a href=&quot;#需要安装的软件&quot; class=&quot;headerlink&quot; title=&quot;需要安装的软件&quot;&gt;&lt;/a&gt;需要安装的软件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;google&lt;/li&gt;
&lt;li&gt;7-zip&lt;/li&gt;
&lt;li&gt;MySQL8.0+Navi</summary>
      
    
    
    
    <category term="系统配置" scheme="https://shaoshaossm.github.io/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Win10" scheme="https://shaoshaossm.github.io/tags/Win10/"/>
    
  </entry>
  
  <entry>
    <title>数据分析三大类库的基本使用</title>
    <link href="https://shaoshaossm.github.io/2021-11-26-shu-ju-fen-xi-san-da-lei-ku-de-ji-ben-shi-yong.html"/>
    <id>https://shaoshaossm.github.io/2021-11-26-shu-ju-fen-xi-san-da-lei-ku-de-ji-ben-shi-yong.html</id>
    <published>2021-11-26T12:19:52.000Z</published>
    <updated>2021-12-02T06:50:24.148Z</updated>
    
    <content type="html"><![CDATA[<h3 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltarray <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>img_array <span class="token operator">=</span> plt<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./7.jpg'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_array<span class="token punctuation">)</span> <span class="token comment"># 将numpy数组进行可视化展示</span>img_arraymg <span class="token operator">=</span> img_array <span class="token operator">-</span> <span class="token number">100</span> <span class="token comment"># 将每一个数组元素减100</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_arraymg<span class="token punctuation">)</span> <span class="token comment"># 将numpy数组进行可视化展示</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment"># 一维等差数列数组</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span>step<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 一维等差数列</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span>shape <span class="token comment"># 数组形状</span>arr<span class="token punctuation">.</span>ndim <span class="token comment"># 数组维度</span>arr<span class="token punctuation">.</span>size <span class="token comment"># 数组元素个数</span>arr<span class="token punctuation">.</span>dtype <span class="token comment"># 数组元素类型</span><span class="token builtin">type</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment"># 数组数据类型</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype <span class="token operator">=</span> <span class="token string">'int32'</span><span class="token punctuation">)</span>arr<span class="token punctuation">.</span>dtypearr<span class="token punctuation">.</span>dtype<span class="token operator">=</span><span class="token string">'uint8'</span>arr<span class="token punctuation">.</span>dtype<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引-amp-切片"><a href="#索引-amp-切片" class="headerlink" title="索引&amp;切片"></a>索引&amp;切片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># arr数组前两行</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># arr数组前两列</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment"># arr数组前两行和前两列的数组</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># arr数组行倒置</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># arr数组列倒置</span>arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#arr数组行列倒置</span>img_array<span class="token punctuation">.</span>shape <span class="token comment"># 图片行列颜色</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_array<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 图片倒置</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_array<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">:</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 图片裁剪</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="聚合-amp-矩阵"><a href="#聚合-amp-矩阵" class="headerlink" title="聚合&amp;矩阵"></a>聚合&amp;矩阵</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 二维数组->一维数组</span>arr<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 一维数组->多维</span><span class="token comment"># 级联操作 将多个numpy数组进行横向或纵向拼接</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 0:列</span>np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 1:行</span><span class="token comment"># 图片拼接</span>img_2 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>img_array2<span class="token punctuation">,</span>img_array2<span class="token punctuation">,</span>img_array2<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>常用聚合函数 <code>sum，max，min，mean</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 第一列的和</span>arr<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>常用数学函数 <code>sin cos tan </code>,<code>around（a,decimals）</code> a: 数组 decimals：舍入的小数位数，默认为0.如果为负，整数将四舍五入到小数点左侧位置</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">np<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>arr<span class="token punctuation">)</span>np<span class="token punctuation">.</span>around<span class="token punctuation">(</span><span class="token number">3.8</span><span class="token punctuation">)</span> <span class="token comment"># 四舍五入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>常用统计函数<ul><li>numpy.amin() 和 numpy.amax() ：用于计算数组中的元素沿指定轴的最小值和最大值</li><li>numpy.ptp()： 最大值和最小值的差</li><li>numpy.median()： 计算数组a中元素的中位数</li><li>标准差 std() ：标准差是一组数据平均值分散程度的一种度量<ul><li>公式：std = sqrt(mean((x-x.mean())**2))</li></ul></li><li>方差 var() ：统计中的方差是每个样本本值与平均数之差平方值的平均数，即标准差就是方差的平方根</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>var<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>矩阵</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token comment"># 运行结果</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>       <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h3><h4 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h4><ul><li><code>Series</code>是一种类似于一维数组的对象,由两部分组成<ul><li><code>values</code>:一维数组</li><li><code>index</code>:相关的数据索引标签</li></ul></li><li><code>Series</code>的创建<ul><li>由列表或<code>numpy</code>数组创建</li><li>由字典创建</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">from</span> pandas <span class="token keyword">import</span> Seriess <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npSeries<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">'int64'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#%% 用来指定显示缩影</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'four'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ss<span class="token punctuation">.</span>dtype<span class="token comment">#%% 为什么需要有显示索引</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'语文'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">'数学'</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">,</span>    <span class="token string">'理综'</span><span class="token punctuation">:</span><span class="token number">333</span><span class="token punctuation">&#125;</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>s<span class="token comment">#%%</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>s<span class="token punctuation">.</span>语文s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>shapes<span class="token punctuation">.</span>sizes<span class="token punctuation">.</span>indexs<span class="token punctuation">.</span>valuess<span class="token punctuation">.</span>dtype<span class="token comment">#%%</span>s <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 显示前n个数据</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 显示后n个元素</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>s<span class="token punctuation">.</span>notnull<span class="token comment">#%%</span><span class="token comment"># Series的算术运算--法则:索引一致的元素进行运算,否则补空</span>s1  <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s2  <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s <span class="token operator">=</span> s1<span class="token operator">+</span>s2s<span class="token comment">#%%</span>s<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DataFram"><a href="#DataFram" class="headerlink" title="DataFram"></a>DataFram</h4><ul><li><code>DataFrame</code>是一个表格型的数据结构,由按一定顺序排列的多列数据组成.既有行索引,也有列索引<ul><li>行索引:<code>index</code></li><li>列索引:<code>columns</code></li><li>值:<code>values</code></li></ul></li><li><code>DataFram</code>的创建<ul><li><code>ndarray</code>创建</li><li>字典创建</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFramedf <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'zhangsna'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'salary'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>valuesdf<span class="token punctuation">.</span>columnsdf<span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>shapedf<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'张三'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'李四'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token string">'理综'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="索引-amp-切片-1"><a href="#索引-amp-切片-1" class="headerlink" title="索引&amp;切片"></a>索引&amp;切片</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFramedf <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'zhangsna'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token string">'wangwu'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'salary'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">8000</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>valuesdf<span class="token punctuation">.</span>columnsdf<span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>shapedf<span class="token punctuation">.</span>dtypes<span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'张三'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'李四'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'语文'</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">,</span><span class="token string">'英语'</span><span class="token punctuation">,</span><span class="token string">'理综'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 取单列,如果df有显示的索引,通过索引机制去取行或列的时候只能通过显示索引</span>df<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token comment"># 强行使用 行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 取多列</span>df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># - iloc: 隐式索引取行</span><span class="token comment"># - loc: 显式索引取行</span><span class="token comment"># 取单行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># 取多行</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 0行3列 单个元素</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token comment"># 多个元素</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 切行</span>df<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token comment"># 切列</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><ul><li>同Series</li></ul><h4 id="时间数据类型转换"><a href="#时间数据类型转换" class="headerlink" title="时间数据类型转换"></a>时间数据类型转换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'time'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'2020-10-01'</span><span class="token punctuation">,</span><span class="token string">'2021-11-11'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'temp'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token comment">#%% 将time列的数据类型转换成时间序列类型</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddf<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dfdf<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token comment">#%% 将time列作为源数据的行索引</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> tushare <span class="token keyword">as</span> ts<span class="token comment">#%% 获取某只股票的历史行情数据</span>df  <span class="token operator">=</span>ts<span class="token punctuation">.</span>get_k_data<span class="token punctuation">(</span>code<span class="token operator">=</span><span class="token string">'600519'</span><span class="token punctuation">,</span>start<span class="token operator">=</span><span class="token string">'2000-01-01'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./maotai.csv'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./maotai.csv'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 删除df指定列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token string">'Unnamed: 0'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 查看每一列的数据类型</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将time列转为时间数据类型</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 将date列作为源数据的行索引</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 输出该股票所有收盘比开盘上涨百分之三以上的日期</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0.06</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token comment">#%% 输出该股票所有开盘比前日收益跌幅超过2%的日期</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">0.02</span><span class="token comment"># 取出True对应的行数据</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token operator">-</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">0.02</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index<span class="token comment">#%% 取出每个月的第一个交易日的第一行数据</span>new_df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'2010-01'</span><span class="token punctuation">:</span><span class="token string">'2020-02'</span><span class="token punctuation">]</span>df_monthly <span class="token operator">=</span> new_df<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 买入股票花费的金额</span>cost <span class="token operator">=</span> df_monthly<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span>cost<span class="token comment">#%% 卖出股票到手的钱</span><span class="token comment"># 特殊情况 : 2020年买入的股票卖不出去 得切除最后一年的数据</span>df_yearly <span class="token operator">=</span> new_df<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>last<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>resv <span class="token operator">=</span> df_yearly<span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1200</span>resv<span class="token comment">#%% 使用昨天的收盘价作为剩余股票的单价</span>last_month <span class="token operator">=</span> <span class="token number">200</span><span class="token operator">*</span>new_df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>last_month<span class="token comment">#%% 计算总收益</span>resv<span class="token operator">+</span>last_month<span class="token operator">-</span>cost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 双均线策略制定</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span>DataFrame<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> tushare <span class="token keyword">as</span> ts<span class="token comment">#%%</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./maotai.csv'</span><span class="token punctuation">)</span>df<span class="token comment">#%% 删除df指定列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span><span class="token string">'Unnamed: 0'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>set_index<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#%% 5日均线和30日均线</span>ma5 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>ma30 <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rolling<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>ma30<span class="token comment">#%%</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token operator">%</span>matplotlib inlineplt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ma5<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>ma30<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#%% 分析输出所有的金叉日期和死叉日期</span>ma5 <span class="token operator">=</span> ma5<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span>ma30 <span class="token operator">=</span> ma30<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span>df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#%%</span>s1 <span class="token operator">=</span> ma5<span class="token operator">&lt;</span>ma30s2 <span class="token operator">=</span> ma5<span class="token operator">></span>ma30df<span class="token comment"># df=df.reset_index()</span><span class="token comment">#%%</span>death_ex <span class="token operator">=</span> s1 <span class="token operator">&amp;</span> s2<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 判定死叉条件</span>death_date <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>death_ex<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token comment"># 死叉对应行数据时间</span><span class="token comment">#%%</span>golden_ex <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>s1 <span class="token operator">|</span> s2<span class="token punctuation">.</span>shift<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 判定金叉条件</span>golden_date <span class="token operator">=</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>golden_ex<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token comment"># 金叉时间</span>golden_date<span class="token comment">#%%</span>s1 <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>index<span class="token operator">=</span>golden_date<span class="token punctuation">)</span> <span class="token comment"># 1作为金叉的标识</span>s2 <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token operator">=</span>death_date<span class="token punctuation">)</span> <span class="token comment"># 0作为金叉的标识</span>s  <span class="token operator">=</span>s1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 金叉和死叉对应的时间</span>s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token string">'2010'</span><span class="token punctuation">:</span><span class="token string">'2020'</span><span class="token punctuation">]</span>s<span class="token comment">#%%</span>first_money <span class="token operator">=</span> <span class="token number">100000</span> <span class="token comment"># 本金不变</span>money <span class="token operator">=</span> first_money <span class="token comment"># 买卖操作可变的</span>hold <span class="token operator">=</span>  <span class="token number">0</span> <span class="token comment"># 持有股票的数量(100股=1手)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 金叉时间</span>        time <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        p <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>time<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span> <span class="token comment"># 股票单价</span>        hand_count <span class="token operator">=</span> money <span class="token operator">//</span> <span class="token punctuation">(</span>p<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment"># 最多买多少手股票</span>        hold <span class="token operator">=</span> hand_count <span class="token operator">*</span> <span class="token number">100</span>        money <span class="token operator">-=</span><span class="token punctuation">(</span>hold<span class="token operator">*</span>p<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        death_time <span class="token operator">=</span> s<span class="token punctuation">.</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment"># 死叉时间</span>        p_death <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>death_time<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'open'</span><span class="token punctuation">]</span> <span class="token comment"># 卖股票的单价</span>        money<span class="token operator">+=</span> <span class="token punctuation">(</span>p_death<span class="token operator">*</span>hold<span class="token punctuation">)</span> <span class="token comment"># 卖出股票的收入</span>        hold <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 判定最后一天是金叉还是死叉</span>last_monry <span class="token operator">=</span> hold<span class="token operator">*</span>df<span class="token punctuation">[</span><span class="token string">'close'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 剩余股票的价值</span><span class="token comment"># 总收益</span>money<span class="token operator">+</span>last_monry<span class="token operator">-</span>first_money<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于pandas的数据清洗"><a href="#基于pandas的数据清洗" class="headerlink" title="基于pandas的数据清洗"></a>基于pandas的数据清洗</h3><ul><li>原始数据中存在缺失值(空值)</li><li>重复值</li><li>异常值</li></ul><h4 id="处理丢失数据-空值"><a href="#处理丢失数据-空值" class="headerlink" title="处理丢失数据(空值)"></a>处理丢失数据(空值)</h4><ul><li>在数据分析中需要使用<strong>浮点型的空</strong>而不是对象类型的空 <ul><li><code>NAN</code>可以参与运算</li><li><code>None</code>不可以参与运算</li></ul></li><li>在pandas中遇到None形式的空值则pandas会将其强转成NAN的形式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 基于pandas的数据清洗</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token builtin">type</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token punctuation">,</span>Seriesdf <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>nandf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span>df<span class="token comment">#%% 方式一:对空值进行过滤(删除空所在的行数据)</span><span class="token comment"># isnull notnull any(检测行或列中是否有True) all</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 将上部的布尔值作为原数据的行索引</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment"># true对应的行数据就是存在缺失值的行数据</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token comment"># 即将要删除的行索引</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 将缺失行进行删除</span><span class="token comment">#%% all 用来检测false 有false就false</span>df<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#%% 方式二--dropna:直接将缺失的行或列进行删除</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%% 对缺失值进行覆盖</span><span class="token comment"># 使用水平和竖直方向的向前向后填充去填充空值</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'ffill'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'bfill'</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理重复数据和异常数据"><a href="#处理重复数据和异常数据" class="headerlink" title="处理重复数据和异常数据"></a>处理重复数据和异常数据</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 处理重复数据</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span> <span class="token comment"># keep = False last</span><span class="token comment">#%% 处理异常数据</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment"># 判定异常条件</span>twice_std <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">></span>twice_stddf<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token operator">></span>twice_std<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataFrame的级联和合并操作"><a href="#DataFrame的级联和合并操作" class="headerlink" title="DataFrame的级联和合并操作"></a>DataFrame的级联和合并操作</h3><ul><li>级联(数据拼接)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% DataFram的级联和合并操作</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token comment">#%%</span>df1 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df1df2<span class="token comment">#%%</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%% 不匹配级联 外连接(outer):补NAN(默认模式) 保证数据的完整性 内连接:只连接匹配的项</span>pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">(</span>df1<span class="token punctuation">,</span>df2<span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>join<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>合并(数据合并)</li><li>merge与concat的区别在于,merge需要依据某一共同列来合并</li><li>使用pd.merge()合并时,会自动根据两者相同column名称的那一列,作为key来进行合并</li><li>注意每一列元素的顺序不要求一致</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 合并</span>df1  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'employee'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'Bob'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'lisa'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token string">'group'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'Accounting'</span><span class="token punctuation">,</span><span class="token string">'Engineering'</span><span class="token punctuation">,</span><span class="token string">'Engineering'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df1<span class="token comment">#%%</span>df2  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'employee'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'lisa'</span><span class="token punctuation">,</span><span class="token string">'jack'</span><span class="token punctuation">,</span><span class="token string">'Bob'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                  <span class="token string">'hire_date'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2018</span><span class="token punctuation">,</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df2<span class="token comment">#%%</span>pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df2<span class="token punctuation">,</span>df1<span class="token punctuation">,</span>on<span class="token operator">=</span><span class="token string">'employee'</span> <span class="token punctuation">)</span> <span class="token comment"># ctrl+p 看参数按情况传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pandas高级操作"><a href="#pandas高级操作" class="headerlink" title="pandas高级操作"></a>pandas高级操作</h3><h4 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 替换操作</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">'Two'</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">74</span><span class="token punctuation">:</span><span class="token string">'one'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>to_replace<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token string">'five ten'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="映射操作"><a href="#映射操作" class="headerlink" title="映射操作"></a>映射操作</h4><ul><li>创建一个映射关系表,把<code>values</code>元素的和一个特定的标签或者字符串绑定(给一个元素提供不同的表现形式)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'salary'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df  <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%%</span>dic  <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'张三'</span><span class="token punctuation">:</span><span class="token string">'ssm'</span><span class="token punctuation">,</span>    <span class="token string">'李四'</span><span class="token punctuation">:</span><span class="token string">'shaoshao'</span><span class="token punctuation">&#125;</span>df<span class="token punctuation">[</span><span class="token string">'e_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>df<span class="token comment">#%% 运算工具(求税后薪资)</span><span class="token keyword">def</span> <span class="token function">salary_after</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token operator">-</span> <span class="token punctuation">(</span>s<span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span>df<span class="token punctuation">[</span><span class="token string">'after_sal'</span><span class="token punctuation">]</span> <span class="token operator">=</span>  df<span class="token punctuation">[</span><span class="token string">'salary'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>salary_after<span class="token punctuation">)</span>df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="排序实现的随机抽样"><a href="#排序实现的随机抽样" class="headerlink" title="排序实现的随机抽样"></a>排序实现的随机抽样</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 排序实现的随机抽样</span>df  <span class="token operator">=</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df<span class="token comment">#%% 将原始数据打乱</span>df<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 乱序的随机序列</span>df<span class="token punctuation">.</span>take<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>take<span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span>df <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'item'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span><span class="token string">'banan'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'price'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'yellow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'weight'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df<span class="token comment">#%% 查看详细的分组情况</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token comment">#%% 计算每一种水果的平均价格</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%% 将水果根据颜色的平均重量汇总到源数据</span>dic <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'color'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">[</span><span class="token string">'mean_w'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'color'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="高级数据聚合-transform-apply-自定义"><a href="#高级数据聚合-transform-apply-自定义" class="headerlink" title="高级数据聚合(transform apply) 自定义"></a>高级数据聚合(transform apply) 自定义</h4><ul><li>transform apply 也可传入一个<code>lambda</code>表达式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%% 高级数据聚合(transform apply) 自定义</span><span class="token keyword">def</span> <span class="token function">my_mean</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    m_sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>        m_sum <span class="token operator">+=</span> i    <span class="token keyword">return</span> m_sum <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>my_mean<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'item'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'price'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>my_mean<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h3><ul><li>透视表是一种对数据动态排布并且分类汇总的表格格式</li><li><code>pivot_table</code> 四个重要参数<code>index,values,columns,aggfunc</code><ul><li><code>index</code>:分类汇总的分类条件</li><li><code>values</code>:对计算的数据进行筛选</li><li><code>aggfunc</code>:设置对数据聚合时进行的函数操作,默认<code>aggfunc = &#39;mean&#39;</code></li><li><code>columns</code>:设置列层次字段</li><li><code>fill_value</code>: None-&gt;0</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'对手'</span><span class="token punctuation">,</span><span class="token string">'主客场'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'得分'</span><span class="token punctuation">,</span><span class="token string">'计分板'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token string">'sum'</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token string">'对手'</span><span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="交叉表"><a href="#交叉表" class="headerlink" title="交叉表"></a>交叉表</h3><ul><li>计算分组的特殊透视图,对数据进行汇总</li><li>`pd.corsstab(index,columns)<ul><li><code>index</code>:分组数据,交叉表的行索引</li><li><code>columns</code>:交叉表的列索引</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">pd<span class="token punctuation">.</span>crosstab<span class="token punctuation">(</span>df<span class="token punctuation">.</span>smoke<span class="token punctuation">,</span>df<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token comment"># age sex 表中的索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2012美国大选献金数据分析"><a href="#2012美国大选献金数据分析" class="headerlink" title="2012美国大选献金数据分析"></a>2012美国大选献金数据分析</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 导入包</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment">#%%</span><span class="token comment"># 读取数据</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/2012_Federal_Election_Commission_Database.csv'</span><span class="token punctuation">)</span>df<span class="token comment">#%%</span><span class="token comment"># 对新数据进行纵览,查看是否存在缺失数据</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 用统计学指标快速描述属性的摘要</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 空值处理 -> 将其填充为NOT PROVIDE</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">'NOT PROVIDE'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 异常值处理 将捐赠金额&lt;=0的数据删除</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#df.info()</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment"># 异常值处理 将捐赠金额&lt;=0的数据删除</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 用统计学指标快速描述属性的摘要</span>df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 空值处理 -> 将其填充为NOT PROVIDE</span>df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">'NOT PROVIDE'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 异常值处理 将捐赠金额&lt;=0的数据删除</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span>drop_index <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">.</span>indexdf<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>labels<span class="token operator">=</span>drop_index<span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token comment">#%%</span><span class="token comment">#通过搜索引擎等途径，获取到每个总统候选人的所属党派，建立字典parties，候选人名字作为键，所属党派作为对应的值</span>parties <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Bachmann, Michelle'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Cain, Herman'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Gingrich, Newt'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Huntsman, Jon'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Johnson, Gary Earl'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'McCotter, Thaddeus G'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Obama, Barack'</span><span class="token punctuation">:</span> <span class="token string">'Democrat'</span><span class="token punctuation">,</span>           <span class="token string">'Paul, Ron'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Pawlenty, Timothy'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Perry, Rick'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">"Roemer, Charles E. 'Buddy' III"</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Romney, Mitt'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">,</span>           <span class="token string">'Santorum, Rick'</span><span class="token punctuation">:</span> <span class="token string">'Republican'</span><span class="token punctuation">&#125;</span><span class="token comment"># 新建一列为各个候选人所在党派的party</span>df<span class="token punctuation">[</span><span class="token string">'party'</span><span class="token punctuation">]</span>  <span class="token operator">=</span>df<span class="token punctuation">[</span><span class="token string">'cand_nm'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>parties<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看party这一列有哪些不同的元素</span>df<span class="token punctuation">[</span><span class="token string">'party'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">[</span><span class="token string">'party'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看各党派收到的政治现金总数contb_receipt_amt</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'party'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看每天各个党派收到的政治献金总数contb_receipt_amt</span>df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_dt'</span><span class="token punctuation">,</span><span class="token string">'party'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span>months <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'JAN'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'FEB'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'MAR'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'APR'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'MAY'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'JUN'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'JUL'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'AUG'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'SEP'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'OCT'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'NOV'</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'DEC'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token comment">#%%</span><span class="token comment"># 将表中的日期改为'yyyy-mm-dd'</span><span class="token keyword">def</span> <span class="token function">transformDate</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    day<span class="token punctuation">,</span>month<span class="token punctuation">,</span>year <span class="token operator">=</span> d<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>    month <span class="token operator">=</span> months<span class="token punctuation">[</span>month<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">'20'</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span>daydf<span class="token punctuation">[</span><span class="token string">'contb_receipt_dt'</span><span class="token punctuation">]</span>  <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'contb_receipt_dt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>transformDate<span class="token punctuation">)</span><span class="token comment">#%%</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#%%</span><span class="token comment"># 查看老兵(捐献者的职业) DISABLED VETERAN 主要支持谁 捐钱最多</span>df<span class="token punctuation">[</span><span class="token string">'contbr_occupation'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'DISABLED VETERAN'</span>df_old <span class="token operator">=</span> df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'contbr_occupation'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'DISABLED VETERAN'</span><span class="token punctuation">]</span><span class="token comment"># 根据候选人组分,对捐赠金额求和</span>df_old<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by<span class="token operator">=</span><span class="token string">'cand_nm'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'contb_receipt_amt'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="matplotlib绘图"><a href="#matplotlib绘图" class="headerlink" title="matplotlib绘图"></a>matplotlib绘图</h3><h4 id="线形图"><a href="#线形图" class="headerlink" title="线形图"></a>线形图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%  matplotlib 绘图</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#%% 绘制线形图</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">3</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#%%</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#%% 设置绘制坐标的比例</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token comment">#%% 设置图例</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'x,y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'x+1,y-2'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># param : ncol=2</span><span class="token comment">#%% 设置轴的标识</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'temp'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'dist and temp'</span><span class="token punctuation">)</span><span class="token comment">#%% 图例保存</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>label<span class="token operator">=</span><span class="token string">'x,y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'123.png'</span><span class="token punctuation">)</span><span class="token comment">#%% 其他样式风格</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 柱状图</span>plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>barh<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 直方图</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>data<span class="token punctuation">,</span>bins<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 饼图 labeldistance 距圆心的距离  autopct 所占的比例</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>labeldistance<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span>shadow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>explode<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>autopct<span class="token operator">=</span><span class="token string">'%0.6f%%'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#%%</span><span class="token comment"># 散点图</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;numpy&quot;&gt;&lt;a href=&quot;#numpy&quot; class=&quot;headerlink&quot; title=&quot;numpy&quot;&gt;&lt;/a&gt;numpy&lt;/h3&gt;&lt;h4 id=&quot;常用方法&quot;&gt;&lt;a href=&quot;#常用方法&quot; class=&quot;headerlink&quot; title=&quot;常用方法&quot;</summary>
      
    
    
    
    <category term="数据分析" scheme="https://shaoshaossm.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>jupyter基本操作</title>
    <link href="https://shaoshaossm.github.io/2021-11-26-jupyter-ji-ben-cao-zuo.html"/>
    <id>https://shaoshaossm.github.io/2021-11-26-jupyter-ji-ben-cao-zuo.html</id>
    <published>2021-11-26T06:24:45.000Z</published>
    <updated>2021-11-26T12:23:24.913Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li>启动: 在终端中录入<code>jupyter notebook</code>,回车即可</li><li>快捷键:<ul><li>添加<code>cell</code>:<code>a</code>或者<code>b</code></li><li>删除:<code>x</code></li><li>修改<code>cell</code>模式:<ul><li>m:<code>Markdown</code>模式</li><li>y :<code>code</code>模式</li></ul></li><li>执行<code>cell</code>: <code>shift+enter</code></li><li><code>tab</code>: 自动补全</li><li>打开帮助文档:<code>shift+tab</code></li></ul></li><li>在idea中使用 jupyter<ul><li><code>pip install jupyter notebook</code></li><li>ctrl + enter : 运行cell</li><li>shift + enter : 新建cell</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;启动: 在终端中录入&lt;code&gt;jupyter notebook&lt;/code&gt;,回车即可&lt;/li&gt;
&lt;li&gt;快捷</summary>
      
    
    
    
    <category term="系统配置" scheme="https://shaoshaossm.github.io/categories/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
    <category term="pycharm" scheme="https://shaoshaossm.github.io/tags/pycharm/"/>
    
    <category term="jupyter" scheme="https://shaoshaossm.github.io/tags/jupyter/"/>
    
  </entry>
  
  <entry>
    <title>Github搜索语法</title>
    <link href="https://shaoshaossm.github.io/2021-11-25-github-sou-suo-yu-fa.html"/>
    <id>https://shaoshaossm.github.io/2021-11-25-github-sou-suo-yu-fa.html</id>
    <published>2021-11-25T06:02:03.000Z</published>
    <updated>2021-11-25T06:47:10.042Z</updated>
    
    <content type="html"><![CDATA[<p> 可以使⽤<a href="https://github.com/">搜索</a>页面或<a href="https://github.com/search">高级搜索</a>页面来搜索GitHub </p><table><thead><tr><th>Query</th><th>Examples</th></tr></thead><tbody><tr><td>&gt;n</td><td>cats stars:&gt;100 匹配关键字“cats”且stars大于100的仓库</td></tr><tr><td>&lt;n</td><td>cats stars:&gt;100 匹配关键字“cats”且stars小于100的仓库</td></tr><tr><td>&gt;=n</td><td>cats stars:&gt;=100 匹配关键字“cats”且stars大于等于100的仓库</td></tr><tr><td>&lt;=n</td><td>cats stars:&lt;=100 匹配关键字“cats”且stars小于等于100的仓库</td></tr><tr><td>n..*</td><td>cats stars:100..* 匹配关键字“cats”且stars大于等于100的仓库</td></tr><tr><td>*..n</td><td>cats stars:*..100 匹配关键字“cats”且stars小于等于100的仓库</td></tr><tr><td>n..n</td><td>cats stars:10..50 匹配关键字“cats”且stars大于10小于50的仓库</td></tr></tbody></table><h3 id="搜索代码"><a href="#搜索代码" class="headerlink" title="搜索代码"></a>搜索代码</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li> 只能搜索⼩于384 KB的⽂件。</li><li> 只能搜索少于500,000个⽂件的存储库。</li><li> 登录的⽤户可以搜索所有公共存储库 。</li><li>除<code>filename</code>搜索外，搜索源代码时，必须包含一个搜索词。例如：搜索<code>language:java</code>无效，而是这样：<code>amazing language:java</code></li><li> 搜索结果最多可以显示来⾃同⼀⽂件的两个⽚段，但⽂件中可能会有更多结果。  </li><li> 不能将以下通配符用作搜索查询的一部分<code>. , : ; / \  &#39; &quot; = * ! ? # $ &amp; + ^ | ~ &lt; &gt; ( ) &#123; &#125; [ ]</code>,搜索将忽略这些符号。</li></ul><h4 id="日期条件"><a href="#日期条件" class="headerlink" title="日期条件"></a>日期条件</h4><p><code>cats pushed:&lt;2012-07-05</code> 搜索在2012年07⽉05⽇前push代码，且cats作为关键字</p><p><code>cats pushed:2016-04-30..2016-07-04</code>⽇期区间</p><p><code>cats created:&gt;=2017-04-01</code>创建时间</p><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><p>AND、OR、NOT</p><h4 id="排除运算"><a href="#排除运算" class="headerlink" title="排除运算"></a>排除运算</h4><p><code>cats pushed:&lt;2012-07-05 -language:java </code>搜索在2012年07⽉05⽇前push代码，且cats作为关键字，排除 <code>java </code>语⾔仓库。</p><h4 id="包含搜索"><a href="#包含搜索" class="headerlink" title="包含搜索"></a>包含搜索</h4><p><code>cats in:file</code> 搜索⽂件中包含cats的代码</p><p><code>cats in:path</code> 搜索路径中包含cats的代码</p><p><code>cats in:path,file </code>搜索路径、⽂件中包含cats的代码</p><p><code>console path:app/public language:javascript</code> 搜索关键字<code>console</code>，且语⾔为javascript，在app/public下的代码</p><h4 id="主体搜索"><a href="#主体搜索" class="headerlink" title="主体搜索"></a>主体搜索</h4><p><code>user:USERNAME</code> ⽤户名搜索</p><p><code>org: ORGNAME</code> 组织搜索</p><p><code>repo:USERNAME/REPOSITORY</code> 指定仓库搜索</p><h4 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h4><p><code>size&gt;10000</code>搜索大小大于1kb的文件</p><h4 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h4><p><code>filename:config.php language:php</code> 搜索文件名为config.php,且语言为php的代码</p><h4 id="扩展名"><a href="#扩展名" class="headerlink" title="扩展名"></a>扩展名</h4><p><code>extension:EXTENSION </code><strong>指定扩展名</strong></p><h3 id="常见用法示例"><a href="#常见用法示例" class="headerlink" title="常见用法示例"></a>常见用法示例</h3><p><code> in:name mini-app</code> #仓库标题搜索含有关键字”mini-app”</p><p><code> in:descripton web</code> #仓库描述搜索含有关键字”web” </p><p><code>in:readme node #README</code>文件搜素含有关键字”node” </p><p>`org:github`` #匹配github名下的仓库</p><p><code> stars:&gt;3000</code> #stars数量大于3000的搜索仓库</p><p><code> stars:1000..3000</code> #stars数量大于1000小于3000的仓库</p><p><code> forks:&gt;1000</code> #forks数量大于1000的搜索关键字</p><p><code>forks:1000..3000</code>#forks数量大于1000小于3000的搜索仓库</p><p><code> size:&gt;=5000</code> #指定仓库大于5000k(5M)的搜索仓库</p><p><code> pushed:&gt;2019-02-12</code> #发布时间大于2019-02-12的仓库</p><p><code> created:&gt;2019-02-12</code> #创建时间大于2019-02-12的仓库</p><p><code> mirror:true(false)</code> #是否是镜像仓库 archived:true(false) #是否是废弃的仓库</p><p><code> user:jack</code> #用户名为”jack”的仓库</p><p><code> license:apache-2.0</code> #仓库的 LICENSE为”apache-2.0”</p><p><code> language:java</code> #使用”java”语言的仓库</p><p><code> user:jack in:name web</code> #组合搜索,用户名为”jack”,且标题含有”web”的</p><p><code> topic:jekyll</code> #匹配topic中含有关键字”jekyll”的仓库</p><p><code> topic:5</code> #匹配拥有5个topic的仓库</p><p><code> topic:&gt;3</code> #匹配拥有3个以上topic的仓库</p><p><code> is:public</code> #公开的仓库</p><p><code> is:private</code> #匹配有权限的私有仓库 </p><hr><p>案例演示：</p><p><code>in:name spring cloud stars:&gt;3000 pushed:&gt;2021-10-01</code></p><p><code>in:description 植物大战僵尸 stars:&gt;100 language：java</code></p><p><code>in:readme 植物大战僵尸 stars:&gt;100 created:&gt;2019</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 可以使⽤&lt;a href=&quot;https://github.com/&quot;&gt;搜索&lt;/a&gt;页面或&lt;a href=&quot;https://github.com/search&quot;&gt;高级搜索&lt;/a&gt;页面来搜索GitHub &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Query&lt;/</summary>
      
    
    
    
    <category term="后端" scheme="https://shaoshaossm.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="git" scheme="https://shaoshaossm.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Python一些类库的基本操作</title>
    <link href="https://shaoshaossm.github.io/2021-11-24-python-yi-xie-lei-ku-de-ji-ben-cao-zuo.html"/>
    <id>https://shaoshaossm.github.io/2021-11-24-python-yi-xie-lei-ku-de-ji-ben-cao-zuo.html</id>
    <published>2021-11-24T14:36:46.000Z</published>
    <updated>2021-11-25T06:03:07.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Xwlt"><a href="#Xwlt" class="headerlink" title="Xwlt"></a>Xwlt</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xlwtworkbook <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>worksheet <span class="token operator">=</span> workbook<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span><span class="token string">'sheet1'</span><span class="token punctuation">)</span>worksheet<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span>workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'student.xls'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sqlite"><a href="#Sqlite" class="headerlink" title="Sqlite"></a>Sqlite</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sqlite3conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'test.db'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    insert into company (id,name,age,address,salary)    values (1,'张三',22,'山西',8000)'''</span>sql <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    select * from company'''</span>cursor <span class="token operator">=</span> c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token keyword">for</span> row <span class="token keyword">in</span> cursor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'age='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'address='</span><span class="token punctuation">,</span>row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># conn.commit()</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>render_template<span class="token keyword">import</span> timeapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello world!'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/1/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 字典,列表等其他类型也可</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span>var <span class="token operator">=</span> a<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/welcome/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">welcome</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello %s'</span> <span class="token operator">%</span> name<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/welcome/&lt;int:id>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">welcome2</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello id: %d'</span> <span class="token operator">%</span> <span class="token builtin">id</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WordCloud"><a href="#WordCloud" class="headerlink" title="WordCloud"></a>WordCloud</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba  <span class="token comment"># 分词</span><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt  <span class="token comment"># 绘图可视化</span><span class="token keyword">from</span> wordcloud <span class="token keyword">import</span> WordCloud  <span class="token comment"># 词云</span><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token comment"># 图片处理</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token comment"># 矩阵运算</span><span class="token keyword">import</span> sqlite3  <span class="token comment"># 数据库</span>conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'test.db'</span><span class="token punctuation">)</span>cur <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'select name,address from company'</span>data <span class="token operator">=</span> cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>text <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> item <span class="token keyword">in</span> data<span class="token punctuation">:</span>    text <span class="token operator">=</span> text <span class="token operator">+</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>cut <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>string <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>cut<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span>img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'639cad061d950a7b7700d56c07d162d9f3d3c9f2.jpg'</span><span class="token punctuation">)</span>img_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>  <span class="token comment"># 图片->数组</span>wc <span class="token operator">=</span> WordCloud<span class="token punctuation">(</span>background_color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">,</span>               mask<span class="token operator">=</span>img_array<span class="token punctuation">,</span>               font_path<span class="token operator">=</span><span class="token string">'CENTURY.TTF'</span><span class="token punctuation">)</span>wc<span class="token punctuation">.</span>generate_from_text<span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token comment"># 绘制图片</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>wc<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'off'</span><span class="token punctuation">)</span> <span class="token comment">#是否显示坐标轴</span><span class="token comment"># plt.show()</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'word.jpg'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Xwlt&quot;&gt;&lt;a href=&quot;#Xwlt&quot; class=&quot;headerlink&quot; title=&quot;Xwlt&quot;&gt;&lt;/a&gt;Xwlt&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://shaoshaossm.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫之分布式爬虫</title>
    <link href="https://shaoshaossm.github.io/2021-11-24-python-pa-chong-zhi-fen-bu-shi-pa-chong.html"/>
    <id>https://shaoshaossm.github.io/2021-11-24-python-pa-chong-zhi-fen-bu-shi-pa-chong.html</id>
    <published>2021-11-24T02:45:17.000Z</published>
    <updated>2021-11-24T08:43:44.227Z</updated>
    
    <content type="html"><![CDATA[<ul><li>搭建分布式机群,让其对一组资源进行分布式联合爬取</li><li>提升爬取效率</li><li>实现分布式:<ul><li>pip install scrapy-redis</li></ul></li><li>scrapy-redis 组件的作用:<ul><li>给原生的scrapy框架提供可以被共享的管道和调度器</li></ul></li></ul><hr><h3 id="分布式爬虫"><a href="#分布式爬虫" class="headerlink" title="分布式爬虫"></a>分布式爬虫</h3><p>实现步骤:</p><ul><li><p><code>scrapy startproject firstdemo</code></p></li><li><p><code>scrapy genspider -t crawl xxx [www.xxx.com</code>](<a href="http://www.xxx.com/">http://www.xxx.com/</a>)</p></li><li><p>修改当前爬虫文件</p><ul><li>导包 : <code>from scrapy_redis.spiders import RedisCrawlSpider</code></li><li>将<code>start_urls</code>和<code>allowed_domains</code>进行注释 </li><li>添加新属性: <code>redis_key = &#39;sun&#39; </code>可以被共享的调度器的名称</li><li>编写数据解析相关操作</li><li>将当前爬虫类的父类修改成<code>RedisCrawlSpider</code></li></ul></li><li><p>修改配置文件<code>settings</code></p></li><li><p>指定使用可以被共享的管道</p><ul><li><code>ITEM_PIPELINES = &#123;    &#39;scrapy_redis.pipelines.RedisPipeline&#39;: 400&#125;</code></li></ul></li><li><p>指定调度器</p><ul><li>增加一个去重容器类的配置,使用<code>redis</code>的<code>set</code>集合来存储请求的指纹数据,从而实现请求去重的持久化 <code>DUPEFILTER_CLASS = &#39;scrapy_redis.dupefilter.RFPDupeFilter&#39;</code></li><li>使用<code>scrapy_redis</code>组件 自己的调度器<code> SCHEDULER = &#39;scrapy_redis.scheduler.Scheduler&#39;</code></li><li>配置调度器是否要持久化,也就是当爬虫结束,是否要清空<code>Redis</code>中请求队列和去重指纹<code>set</code>(人话:爬虫一般机器宕机了,重启后是否继续爬虫还是从0开始) <code>SCHEDULER_PERSIST = True</code></li></ul></li><li><p>指定<code>redis</code>服务器</p><ul><li><code>REDIS_HOST = &#39;127.0.0.1&#39;</code></li><li><code>REDIS_PORT = 6379</code></li></ul></li><li><p><code>redis</code>相关操作配置</p><ul><li><p>linux或mac:</p><ul><li><code>redis.conf</code></li></ul></li><li><p>windows:<code>redis.windows.conf</code></p><ul><li>将<code>bind 127.0.0.1</code> 删除</li><li>关闭保护模式 <code>protected-mode yes</code> 改为 <code>no</code></li></ul></li><li><p>结合配置文件开启redis服务</p><ul><li><code>redis-server redis.windows.conf</code></li></ul></li><li><p>启动客户端</p><ul><li><code>redis-cli</code></li></ul></li></ul></li><li><p>执行工程</p><ul><li><code>scrapy runspider xxx.py</code></li><li>向调度器队列(redis)中放入一个起始url<ul><li><code>lpush xxx www.xx.com</code></li></ul></li><li>查看队列中所有的内容和数量:<ul><li><code>lrange xx:items 0 -1</code></li><li><code>llen xx:items</code></li></ul></li></ul></li><li><p>最终爬取到的数据存储在了<code>redis</code>的<code>proName:items</code>这个数据结构中</p></li></ul><hr><p>代码实现</p><p><code>sun2.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> scrapy_redis<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> RedisCrawlSpider<span class="token keyword">from</span> sun2Pro<span class="token punctuation">.</span>items <span class="token keyword">import</span> Sun2ProItem<span class="token keyword">class</span> <span class="token class-name">Sun2Spider</span><span class="token punctuation">(</span>RedisCrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'sun2'</span>    redis_key <span class="token operator">=</span> <span class="token string">'sun'</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id=2&amp;page=\d+'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[3]/ul[2]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            new_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            new_title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[3]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> Sun2ProItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_title            item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_num            <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">Sun2ProItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_num <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span><span class="token comment"># 指定管道</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'scrapy_redis.pipelines.RedisPipeline'</span><span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">&#125;</span><span class="token comment"># 指定调度器</span><span class="token comment"># 增加一个去重容器类的配置,使用redis的set集合来存储请求的指纹数据,从而实现请求去重的持久化</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">'scrapy_redis.dupefilter.RFPDupeFilter'</span><span class="token comment"># 使用scrapy_redis组件 自己的调度器</span>SCHEDULER <span class="token operator">=</span> <span class="token string">'scrapy_redis.scheduler.Scheduler'</span><span class="token comment"># 配置调度器是否要持久化,也就是当爬虫结束,是否要清空Redis中请求队列和去重指纹set(人话:爬虫一般机器宕机了,重启后是否继续爬虫还是从0开始)</span>SCHEDULER_PERSIST <span class="token operator">=</span> <span class="token boolean">True</span><span class="token comment"># 指定redis</span>REDIS_HOST <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增量式爬虫"><a href="#增量式爬虫" class="headerlink" title="增量式爬虫"></a>增量式爬虫</h3><ul><li>监测网站数据更新情况,只会爬取网站最新出来的数据</li><li><strong>核心</strong>:监测页面url之前是否请求过<ul><li>将爬取过的url存储到<code>redis</code>的<code>set</code>数据结构中</li></ul></li><li>查看所有的 <code>urls</code> : <code>semebers urls</code></li></ul><hr><p>案例演示</p><p><code>movie.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> redis <span class="token keyword">import</span> Redis<span class="token keyword">from</span> moviePro<span class="token punctuation">.</span>items <span class="token keyword">import</span> MovieproItem<span class="token keyword">class</span> <span class="token class-name">MovieSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'movie'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.male37.live/index.php/vod/type/id/2/page/2.html'</span><span class="token punctuation">]</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment"># Rule(LinkExtractor(allow=r'/id/3/page/\d+/\.html'), callback='parse_item', follow=True),</span>        Rule<span class="token punctuation">(</span>LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id/\d+/page/\d+\.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    conn <span class="token operator">=</span> Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[1]/div/div[1]/div/div/div[2]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            detail_url <span class="token operator">=</span> <span class="token string">'http://www.male37.live'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            ex <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'urls'</span><span class="token punctuation">,</span> detail_url<span class="token punctuation">)</span>            <span class="token keyword">if</span> ex <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该url没有被爬取过,可以进行数据爬取!'</span><span class="token punctuation">)</span>                <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据还没更新,暂无新数据可爬取!'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> MovieproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">'/html/body/div[1]/div/div[1]/div[1]/div/div/div/div[2]/h1/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'--------------'</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>            <span class="token string">'/html/body/div[1]/div/div[1]/div[1]/div/div/div/div[2]/p[5]/span[2]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MovieproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    desc <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MovieproPipeline</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> spider<span class="token punctuation">.</span>conn    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">'desc'</span><span class="token punctuation">:</span> item<span class="token punctuation">[</span><span class="token string">'desc'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>lpush<span class="token punctuation">(</span><span class="token string">'movieData'</span><span class="token punctuation">,</span> dic<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">REDIS_HOST <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'moviePro.pipelines.MovieproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;搭建分布式机群,让其对一组资源进行分布式联合爬取&lt;/li&gt;
&lt;li&gt;提升爬取效率&lt;/li&gt;
&lt;li&gt;实现分布式:&lt;ul&gt;
&lt;li&gt;pip install scrapy-redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;scrapy-redis 组件的作用:&lt;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://shaoshaossm.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫之scrapy框架学习</title>
    <link href="https://shaoshaossm.github.io/2021-11-20-scrapy-kuang-jia-xue-xi.html"/>
    <id>https://shaoshaossm.github.io/2021-11-20-scrapy-kuang-jia-xue-xi.html</id>
    <published>2021-11-20T05:29:56.000Z</published>
    <updated>2021-11-23T13:57:13.365Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scrapy安装步骤"><a href="#scrapy安装步骤" class="headerlink" title="scrapy安装步骤"></a>scrapy安装步骤</h3><ul><li>pip install wheel</li><li>下载twisted : 地址:<a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a> (选择对应的版本)</li><li>安装twisted : pip install aiohttp-3.8.1-cp38-cp38-win_amd64.whl</li><li>pip install pywin32</li><li>pip install scrapy</li><li>测试终端输入: scrapy</li><li>创建工程 终端输入: scrapy startproject firstdemo</li><li>在sprders目录 终端输入:scrapy genspider first <a href="http://www.xxx.com/">www.xxx.com</a></li><li>执行工程 : scrapy crawl first (spiderName)  –nolong  (不输出日志)</li><li>ROBOTSTXT_OBEY = False</li><li>配置文件<code>settings.py</code>中加上 LOG_ERROR = ‘ERROR’</li><li>USER_AGENT: ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36’</li></ul><h3 id="scrapy持久化存储"><a href="#scrapy持久化存储" class="headerlink" title="scrapy持久化存储"></a>scrapy持久化存储</h3><h4 id="基于终端指令"><a href="#基于终端指令" class="headerlink" title="基于终端指令"></a>基于终端指令</h4><ul><li>持久化存储对应的终端指令只能为：(‘json’, ‘jsonlines’, ‘jl’, ‘csv’, ‘xml’, ‘marshal’, ‘pickle’)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">FirstSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 爬虫文件名称</span>    name <span class="token operator">=</span> <span class="token string">'qiubai'</span>    <span class="token comment"># 允许的域名</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    <span class="token comment"># 起始url列表:存放的url会被scrapy自动进行请求的发送</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.qiushibaike.com/text/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            <span class="token comment"># extract: 将Selector对象中data参数存储的字符串提取出来</span>            <span class="token comment"># author = div.xpath('./div[1]/a[2]/h2/text()')[0].extract() 作用一样 必须是一个列元素</span>            author <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>            dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'author'</span><span class="token punctuation">:</span> author<span class="token punctuation">,</span>                <span class="token string">'content'</span><span class="token punctuation">:</span> content            <span class="token punctuation">&#125;</span>            all_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">return</span> all_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于管道"><a href="#基于管道" class="headerlink" title="基于管道"></a>基于管道</h4><ul><li>编码流程<ul><li>数据解析</li><li>在<code>item</code>类中定义相关的属性</li><li>将解析的数据封装到<code>item</code>类型的对象</li><li>在<code>item</code>类型的对象提交给管道进行持久化存储的操作</li><li>在管道类的<code>process_item</code>中要将其受到的<code>item</code>对象存储的数据进行持久化存储操作</li><li>在配置文件中开启管道</li></ul></li><li><font color="red">管道文件中一个管道类对应一组数据存储到一个平台或者载体中</font></li><li><font color="red">爬虫文件提交的item只会给管道文件中第一个被执行的管道类接受</font></li><li><font color="red">process_item中的return item表示将item传递给下一个即将被执行的管道类</font></li></ul><p><code>qiubai.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>    div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="col1 old-style-col1"]/div'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>        <span class="token comment"># extract: 将Selector对象中data参数存储的字符串提取出来</span>        author <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/a[2]/h2/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a[1]/div/span//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        item <span class="token operator">=</span> QiubaiproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span> <span class="token operator">=</span> author        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        <span class="token keyword">yield</span> item  <span class="token comment"># 将item提交给管道</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 存储到本地</span><span class="token keyword">class</span> <span class="token class-name">QiubaiproPipeline</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># 重写父类的方法,该方法只在爬虫时调用一次</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./qiubai.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment"># 接受爬虫过来的item对象,处理item类型的对象,每接收一个item对象调用一次</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        author <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'author'</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>author <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token comment"># 重写父类的方法,该方法只在爬虫结束调用一次</span>    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束爬虫!'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 存储到数据库</span><span class="token comment"># 管道文件中一个管道类对应一组数据存储到一个平台或者载体中</span><span class="token keyword">class</span> <span class="token class-name">mysqlPileLine</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    conn <span class="token operator">=</span> <span class="token boolean">None</span>    cursor <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'hxl158120'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'qiubai'</span><span class="token punctuation">,</span>                                    charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'insert into qiubai values("%s","%s")'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">"author"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">"content"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">QiubaiproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    <span class="token comment"># name = scrapy.Field()</span>    author <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 300 优先级 数值越小 优先级越高</span>    <span class="token string">'qiubaiPro.pipelines.QiubaiproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    <span class="token string">'qiubaiPro.pipelines.mysqlPileLine'</span><span class="token punctuation">:</span> <span class="token number">301</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>基于Spider的全站数据爬取彼岸网图片名称和图片并进行本地存储</li></ul><p><code>meinv.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> meinvPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> MeinvproItem<span class="token keyword">class</span> <span class="token class-name">MeinvSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'meinv'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://pic.netbian.com/4kmeinv/index.html'</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">'https://pic.netbian.com/4kmeinv/index_%d.html'</span>    page_num <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="main"]/div[3]/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            img_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/b/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 若有图片懒加载 使用伪属性</span>            img_src <span class="token operator">=</span> <span class="token string">'https://pic.netbian.com/'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> img_src<span class="token punctuation">)</span>            item <span class="token operator">=</span> MeinvproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'img_src'</span><span class="token punctuation">]</span> <span class="token operator">=</span> img_src            <span class="token keyword">yield</span> item        <span class="token keyword">if</span> self<span class="token punctuation">.</span>page_num <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">:</span>            new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>url <span class="token operator">%</span> self<span class="token punctuation">.</span>page_num<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>page_num <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MeinvproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># define the fields for your item here like:</span>    img_src <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> itemadapter <span class="token keyword">import</span> ItemAdapter<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>pipelines<span class="token punctuation">.</span>images <span class="token keyword">import</span> ImagesPipeline<span class="token keyword">import</span> scrapy<span class="token comment"># class MeinvproPipeline:</span><span class="token comment">#     def process_item(self, item, spider):</span><span class="token comment">#         return item</span><span class="token keyword">class</span> <span class="token class-name">imgsPileLine</span><span class="token punctuation">(</span>ImagesPipeline<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 根据图片地址进行图片数据请求</span>    <span class="token keyword">def</span> <span class="token function">get_media_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'img_src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 指定图片存储路径</span>    <span class="token keyword">def</span> <span class="token function">file_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> info<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img_Name <span class="token operator">=</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> img_Name    <span class="token keyword">def</span> <span class="token function">item_completed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> results<span class="token punctuation">,</span> item<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 指定图片存储目录</span>IMAGES_STORE <span class="token operator">=</span> <span class="token string">'./imgs'</span><span class="token comment"># 更换管道</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'meinvPro.pipelines.imgsPileLine'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五大核心组件"><a href="#五大核心组件" class="headerlink" title="五大核心组件"></a>五大核心组件</h3><ul><li>引擎(Scrapy)<ul><li>用来处理整个系统的数据流处理,触发事务(框架核心)。</li></ul></li><li>调度器(Scheduler)<ul><li>用来接收引擎发过来的请求,压入队列中,并在引擎再次请求的时候返回,可以想象成一个URL(抓取网页的网址或者说是链接)的优先队列,由他来决定下一个要抓取的网址是什么,同时去除重复的网址。</li></ul></li><li>下载器(Downloader)<ul><li>用于下载网页的内容,并将网页内容返回给蜘蛛(Scrapy下载是建立在twisted这个高效的异步模型上的)。</li></ul></li><li>爬虫(Spiders)<ul><li>爬虫主要是干活的,用于从特定的网页中提取自己需要的信息,即所谓的实体(item).用户也可以从中取出链接,让Scrapy继续抓取下一个页面。</li></ul></li><li>项目管道(Pipeline)<ul><li>负责处理爬虫从网页中抽取的实体,主要的功能是持久化实体、验证实体的有效性,清楚不需要的信息,当页面被爬虫解析后,将被发送到项目管道,并经过几个特定的次序处理数据。</li></ul></li></ul><h3 id="请求传参"><a href="#请求传参" class="headerlink" title="请求传参"></a>请求传参</h3><ul><li>使用场景：爬取解析的数据不在同一张页面中（详情页）。</li></ul><p><code>meta=&#123;&#39;item&#39;:item&#125;</code></p><p>案例演示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> bossPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> BossproItem<span class="token keyword">class</span> <span class="token class-name">BossSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'boss'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://jh.58.com/job/?param6693=8|10&amp;PGTID=0d100000-0021-349d-98e8-58c336a9edba&amp;ClickID=2'</span><span class="token punctuation">]</span>    <span class="token comment"># 回调函数接收item</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        job_desc <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[3]/div[2]/div[1]/div[1]/div[1]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        job_desc <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>job_desc<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>job_desc<span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'job_desc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> job_desc        <span class="token keyword">yield</span> item    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="list_con"]/li'</span><span class="token punctuation">)</span>        <span class="token comment"># print(li_list)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            item <span class="token operator">=</span> BossproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            job_address <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/a/span[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            job_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/a/span[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'job_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> jo b_name            <span class="token keyword">print</span><span class="token punctuation">(</span>job_address<span class="token punctuation">,</span>job_name<span class="token punctuation">)</span>            detail_url <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div[1]/div[1]/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 请求传参：meta = &#123;&#125;，可以将meta字典传递给请求对应的回调函数</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span>meta<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'item'</span><span class="token punctuation">:</span>item<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><ul><li>位于引擎和下载器之间</li><li>用于拦截到整个工程中所有请求和响应</li><li>拦截请求<ul><li>UA伪装</li><li>代理IP</li></ul></li><li>拦截相应<ul><li>篡改响应数据(响应对象)</li></ul></li></ul><p>案例演示 (ip更换失败)</p><p><code>middle.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">MiddleSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'middle'</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.baidu.com/s?wd=ip'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text        <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ip.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>middlewares.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MiddleproDownloaderMiddleware</span><span class="token punctuation">:</span>    <span class="token comment"># UA伪装</span>    user_agent_list<span class="token operator">=</span><span class="token punctuation">[</span>    <span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>    <span class="token punctuation">]</span>    <span class="token comment"># 代理池</span>    PROXY_http <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'153.180.102.104:80'</span><span class="token punctuation">,</span>        <span class="token string">'195.208.131.189:56055'</span>    <span class="token punctuation">]</span>    PROXY_https <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'120.83.49.90.9000'</span><span class="token punctuation">,</span>        <span class="token string">'95.189.112.214:35508'</span>    <span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">process_request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'User-Agent'</span><span class="token punctuation">]</span> <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_agent_list<span class="token punctuation">)</span><span class="token comment"># 方便测试</span>        request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://121.232.148.116:9000'</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 代理</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'http'</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://'</span><span class="token operator">+</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>PROXY_http<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            request<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'proxy'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'https://'</span><span class="token operator">+</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>PROXY_https<span class="token punctuation">)</span>        <span class="token keyword">return</span> request <span class="token comment"># 将修正后的请求对象进行重新发送</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 开启</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'middlePro.middlewares.MiddleproDownloaderMiddleware'</span><span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>爬取网易各大板块文章标题和内容并本地存储</li></ul><p><code>wangyi.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> wangyiPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> WangyiproItem<span class="token keyword">class</span> <span class="token class-name">WangyiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'wangyi'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://news.163.com/'</span><span class="token punctuation">]</span>    models_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 存储板块对应详情页对应的url</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'E:\PyCharm\pachong\com\ssm\seleniumTest\chromedriver.exe'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="index2016_wrap"]/div[1]/div[2]/div[2]/div[2]/div[2]/div/ul/li'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>li_list<span class="token punctuation">)</span>        alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> alist<span class="token punctuation">:</span>            model_url <span class="token operator">=</span> li_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>models_urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model_url<span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>models_urls<span class="token punctuation">:</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_model<span class="token punctuation">)</span>    <span class="token comment"># 解析每个板块页面中对应新闻的标题和新闻详情页的url</span>    <span class="token keyword">def</span> <span class="token function">parse_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div/div[3]/div[4]/div[1]/div[1]/div/ul/li/div/div'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div[1]/h3/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>            new_detail_url <span class="token operator">=</span> div<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/div[1]/h3/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> WangyiproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title            <span class="token comment"># 对新闻详情页的url发起请求</span>            <span class="token keyword">yield</span> scrapy<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>new_detail_url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse_detail<span class="token punctuation">,</span> meta<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'item'</span><span class="token punctuation">:</span> item<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        all_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="content"]/div[2]//text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>        content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        item <span class="token operator">=</span> response<span class="token punctuation">.</span>meta<span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span>        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> content        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'content'</span><span class="token punctuation">:</span> content        <span class="token punctuation">&#125;</span>        all_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>        <span class="token keyword">yield</span> item        <span class="token keyword">return</span> all_data    <span class="token keyword">def</span> <span class="token function">closed</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">WangyiproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>middlewares.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>http <span class="token keyword">import</span> HtmlResponse<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">class</span> <span class="token class-name">WangyiproDownloaderMiddleware</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        bro <span class="token operator">=</span> spider<span class="token punctuation">.</span>bro  <span class="token comment"># 获取浏览器对象</span>        <span class="token comment"># url -> request -> response</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>url <span class="token keyword">in</span> spider<span class="token punctuation">.</span>models_urls<span class="token punctuation">:</span>            bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>            sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            page_text <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_source            <span class="token comment"># 五大板块对应的响应对象 针对定位到的这些response进行篡改,实例化一个新的响应对象 ,替代原来的响应对象</span>            new_response <span class="token operator">=</span> HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span>request<span class="token punctuation">.</span>url<span class="token punctuation">,</span> body<span class="token operator">=</span>page_text<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> request<span class="token operator">=</span>request<span class="token punctuation">)</span>            <span class="token keyword">return</span> new_response        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment"># 其他请求对应的响应对象</span>            <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">WangyiproPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span>LOG_ERROR <span class="token operator">=</span> <span class="token string">'ERROR'</span>DOWNLOADER_MIDDLEWARES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'wangyiPro.middlewares.WangyiproDownloaderMiddleware'</span><span class="token punctuation">:</span> <span class="token number">543</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'wangyiPro.pipelines.WangyiproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CrawlSpider类"><a href="#CrawlSpider类" class="headerlink" title="CrawlSpider类"></a>CrawlSpider类</h3><ul><li>全站数据爬取的方式<ul><li>基于spider: 手动请求</li><li>基于CrawlSpider</li></ul></li><li>CrawlSpider的使用<ul><li>创建工程</li><li>cd xxx</li><li>scrapy genspider -t crawl  xxx <a href="http://www.xxx.com/">www.xxx.com</a></li></ul></li><li>链接提取器:<ul><li>根据指定规则(allow)进行指定链接提取</li></ul></li><li>规则解析器:<ul><li>将链接提取提取到的链接进行指定规则 (callback) 的解析操作</li></ul></li></ul><hr><p>案例演示</p><ul><li>爬取sun网站中的编号,新闻标题,新闻内容,标号</li></ul><p><code>sun.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>linkextractors <span class="token keyword">import</span> LinkExtractor<span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>spiders <span class="token keyword">import</span> CrawlSpider<span class="token punctuation">,</span> Rule<span class="token keyword">from</span> sunPro<span class="token punctuation">.</span>items <span class="token keyword">import</span> SunproItem<span class="token punctuation">,</span>DetailItem<span class="token keyword">class</span> <span class="token class-name">SunSpider</span><span class="token punctuation">(</span>CrawlSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'sun'</span>    <span class="token comment"># allowed_domains = ['www.xxx.com']</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://wz.sun0769.com/political/index/politicsNewest?id=2&amp;page=2'</span><span class="token punctuation">]</span>    link <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id=2&amp;page=\d+'</span><span class="token punctuation">)</span>    <span class="token comment"># link_detail = 'https://wz.sun0769.com/political/politics/index?' + LinkExtractor(allow=r'id=\d+')</span>    link_detail <span class="token operator">=</span> LinkExtractor<span class="token punctuation">(</span>allow<span class="token operator">=</span><span class="token string">r'id=\d+'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>link_detail<span class="token punctuation">)</span>    rules <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token comment"># LinkExtractor 链接提取器</span>        <span class="token comment"># allows = (正则) 根据指定规则进行链接提取</span>        <span class="token comment"># follow=True : 将链接提取器继续作用到链接提取器提取到的链接所对应的页面中</span>        <span class="token comment"># 规则解析器 : 将链接提取提取到的链接进行指定规则 (callback) 的解析操作</span>        Rule<span class="token punctuation">(</span>link<span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_item'</span><span class="token punctuation">,</span> follow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Rule<span class="token punctuation">(</span>link_detail<span class="token punctuation">,</span> callback<span class="token operator">=</span><span class="token string">'parse_detail'</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token comment"># 解析新闻编号、标题</span>    <span class="token keyword">def</span> <span class="token function">parse_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        li_list <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[2]/div[3]/ul[2]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            new_num <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[1]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            new_title <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./span[3]/a/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item <span class="token operator">=</span> SunproItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_title            item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_num            <span class="token keyword">yield</span> item    <span class="token comment"># 解析新闻内容、编号</span>    <span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        new_id <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[2]/div[2]/div[1]/span[4]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_content <span class="token operator">=</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'/html/body/div[3]/div[2]/div[2]/div[2]/pre/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>        new_content <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>new_content<span class="token punctuation">)</span>        item <span class="token operator">=</span> DetailItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        item<span class="token punctuation">[</span><span class="token string">'new_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_id        item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> new_content        <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>items.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">SunproItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    new_num <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DetailItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_id <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    content <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pipelines.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SunproPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 判定item类型</span>        <span class="token keyword">if</span> item<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__ <span class="token operator">==</span> <span class="token string">'DetailItem'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'new_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'new_num'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span>LOG_ERROR <span class="token operator">=</span> <span class="token string">'ERROR'</span>DOWNLOAD_DELAY <span class="token operator">=</span> <span class="token number">3</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token string">'sunPro.pipelines.SunproPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;scrapy安装步骤&quot;&gt;&lt;a href=&quot;#scrapy安装步骤&quot; class=&quot;headerlink&quot; title=&quot;scrapy安装步骤&quot;&gt;&lt;/a&gt;scrapy安装步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pip install wheel&lt;/li&gt;
&lt;li&gt;下载twi</summary>
      
    
    
    
    <category term="爬虫" scheme="https://shaoshaossm.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫之selenium学习</title>
    <link href="https://shaoshaossm.github.io/2021-11-19-python-pa-chong-zhong-zhi-selenium-xue-xi.html"/>
    <id>https://shaoshaossm.github.io/2021-11-19-python-pa-chong-zhong-zhi-selenium-xue-xi.html</id>
    <published>2021-11-19T08:41:17.000Z</published>
    <updated>2022-01-12T08:31:53.672Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本概述"><a href="#基本概述" class="headerlink" title="基本概述"></a>基本概述</h3><ul><li><code>selenium</code>可以便捷的获取网站中的动态加在的数据</li><li><code>selenium</code>可以便捷的实现模拟登陆</li><li><code>selenium</code>是基于浏览器自动化的一个模块</li></ul><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> selenium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看google浏览器版本号</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在浏览器中输入</span>chrome://version/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>选择合适的版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://chromedriver.storage.googleapis.com/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将下载好的<code>chromedriver.exe</code>放入开发目录中即可</li><li>运行测试</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriverbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="案例演示1-："><a href="#案例演示1-：" class="headerlink" title="案例演示1.："></a>案例演示1.：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://scxk.nmpa.gov.cn:81/xk/'</span><span class="token punctuation">)</span><span class="token comment"># 获取浏览器当前页面的页面源码数据</span>page_text <span class="token operator">=</span> bro<span class="token punctuation">.</span>page_sourcetree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="gzlist"]/li'</span><span class="token punctuation">)</span><span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>    name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./dl/@title'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例演示2-："><a href="#案例演示2-：" class="headerlink" title="案例演示2.："></a>案例演示2.：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> Bybro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://lol.qq.com/main.shtml'</span><span class="token punctuation">)</span><span class="token comment"># 获取浏览器当前页面的页面源码数据</span>bro<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">'window.scrollTo(0,document.body.scrollHeight)'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>search_btn<span class="token operator">=</span>bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span><span class="token string">'J_headSearchBtn'</span><span class="token punctuation">)</span><span class="token comment"># search_btn = bro.find_element_by_id('J_headSearchBtn')</span>search_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>search_input <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J_hoverSearchInput'</span><span class="token punctuation">)</span>search_input<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'无限火力'</span><span class="token punctuation">)</span>btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'J_hoverSearchBtn'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.4399.com'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="案例演示3"><a href="#案例演示3" class="headerlink" title="案例演示3.:"></a>案例演示3.:</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span><span class="token punctuation">)</span><span class="token comment"># 如果定位的标签在iframe标签中，需如下操作</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'iframeResult'</span><span class="token punctuation">)</span>  <span class="token comment"># 切换浏览器标签的作用域</span>div <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'draggable'</span><span class="token punctuation">)</span><span class="token comment"># 动作链</span>action <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>bro<span class="token punctuation">)</span><span class="token comment"># 点击长按指定的标签</span>action<span class="token punctuation">.</span>click_and_hold<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># (x,y) x: 水平 y： 竖直</span>    action<span class="token punctuation">.</span>move_by_offset<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">)</span><span class="token comment"># 释放动作链</span>action<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="qq空间自动登录签到"><a href="#qq空间自动登录签到" class="headerlink" title="qq空间自动登录签到"></a>qq空间自动登录签到</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChainsbro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://qzone.qq.com/'</span><span class="token punctuation">)</span><span class="token comment"># 如果定位的标签在iframe标签中，需如下操作</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'login_frame'</span><span class="token punctuation">)</span>  <span class="token comment"># 切换浏览器标签的作用域</span>a_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'switcher_plogin'</span><span class="token punctuation">)</span>a_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>username_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">)</span>password_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>username_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>password_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'login_button'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>qiandao <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'checkin_button'</span><span class="token punctuation">)</span>qiandao<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">'checkin_likeTipsFrame'</span><span class="token punctuation">)</span>qiandao_img <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'detail-box'</span><span class="token punctuation">)</span>qiandao_img<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>fabu <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CLASS_NAME<span class="token punctuation">,</span> <span class="token string">'btn-submit'</span><span class="token punctuation">)</span>fabu<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证码识别并自动登录"><a href="#验证码识别并自动登录" class="headerlink" title="验证码识别并自动登录"></a>验证码识别并自动登录</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 验证码模拟登陆</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">import</span> chaojiying<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'./chromedriver'</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://changyan.kuaizhan.com/"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># tanchuangguanbi = bro.find_element(By.CLASS_NAME, ' icon-raw-error ')</span>    tanchuangguanbi <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'icon-raw-error '</span><span class="token punctuation">)</span>    tanchuangguanbi<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'c-button'</span><span class="token punctuation">)</span>    btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    bro<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">'aa.png'</span><span class="token punctuation">)</span>    code_img_ele <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="vcode-img"]'</span><span class="token punctuation">)</span>    <span class="token comment"># 获取验证码</span>    <span class="token comment"># 验证码左上角坐标x，y</span>    location <span class="token operator">=</span> code_img_ele<span class="token punctuation">.</span>location    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'location: '</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span>    <span class="token comment"># 验证码对应的长宽</span>    size <span class="token operator">=</span> code_img_ele<span class="token punctuation">.</span>size    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'size'</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span>    rangle <span class="token operator">=</span> <span class="token punctuation">(</span>        <span class="token builtin">int</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">'width'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>location<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> size<span class="token punctuation">[</span><span class="token string">'height'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1.25</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rangle<span class="token punctuation">)</span>    i <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./aa.png'</span><span class="token punctuation">)</span>    code_img_name <span class="token operator">=</span> <span class="token string">'./code.png'</span>    frame <span class="token operator">=</span> i<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>rangle<span class="token punctuation">)</span>    frame<span class="token punctuation">.</span>save<span class="token punctuation">(</span>code_img_name<span class="token punctuation">)</span>    <span class="token comment"># 解析验证码</span>    chaojiying <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'19858165529'</span><span class="token punctuation">,</span> <span class="token string">'hxl158120'</span><span class="token punctuation">,</span> <span class="token string">'925040'</span><span class="token punctuation">)</span>  <span class="token comment"># 用户中心>>软件ID 生成一个替换 96001</span>    im <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span>    code <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">1004</span><span class="token punctuation">)</span>    code_img <span class="token operator">=</span> code<span class="token punctuation">[</span><span class="token string">'pic_str'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code_img<span class="token punctuation">)</span>  <span class="token comment"># 1902 验证码类型  官方网站>>价格体系 3.4+版 print 后要加()</span>    username_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'normal_login_name'</span><span class="token punctuation">)</span>    username_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'19858165529'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    password_tag <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'normal_login_password'</span><span class="token punctuation">)</span>    password_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'hxl158120'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    text <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'normal_login_vcode'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token comment"># fullXpath 相对路径定位不到</span>    Verification_code <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">'/html/body/div/div/div[4]/div[2]/div[2]/form/div[3]/div/div/div/div/div[1]/input'</span><span class="token punctuation">)</span>    Verification_code<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>code_img<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    Login_btn <span class="token operator">=</span> bro<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'login-form-button'</span><span class="token punctuation">)</span>    Login_btn<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Google-无头浏览器"><a href="#Google-无头浏览器" class="headerlink" title="Google 无头浏览器"></a>Google 无头浏览器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token comment"># 无可视化界面</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>service <span class="token keyword">import</span> Service<span class="token comment"># 规避selenium检测</span><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ChromeOptions<span class="token comment"># 实现无可视化界面的操作</span>chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--headless'</span><span class="token punctuation">)</span>chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span><span class="token comment"># 实现规避检测</span>option <span class="token operator">=</span> ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>option<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Service<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>service<span class="token operator">=</span>s<span class="token punctuation">)</span><span class="token comment"># bro = webdriver.Chrome(executable_path='./chromedriver',options=chrome_options)</span>bro <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">,</span> options<span class="token operator">=</span>option<span class="token punctuation">)</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://qzone.qq.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bro<span class="token punctuation">.</span>page_source<span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>bro<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;基本概述&quot;&gt;&lt;a href=&quot;#基本概述&quot; class=&quot;headerlink&quot; title=&quot;基本概述&quot;&gt;&lt;/a&gt;基本概述&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;selenium&lt;/code&gt;可以便捷的获取网站中的动态加在的数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s</summary>
      
    
    
    
    <category term="爬虫" scheme="https://shaoshaossm.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫模拟登陆和异步爬虫</title>
    <link href="https://shaoshaossm.github.io/2021-11-17-python-pa-chong-mo-ni-deng-lu-he-yi-bu-pa-chong.html"/>
    <id>https://shaoshaossm.github.io/2021-11-17-python-pa-chong-mo-ni-deng-lu-he-yi-bu-pa-chong.html</id>
    <published>2021-11-17T08:54:12.000Z</published>
    <updated>2021-11-19T08:38:40.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h3><ul><li>使用<strong>超级鹰</strong>平台识别验证码的编码流程:<ul><li>将验证码图片进行本地下载</li><li>调用平台提供的示例代码进行图片数据识别</li></ul></li></ul><p>有<strong>验证码</strong>,验证码可以读取到但测试未成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 验证码</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">import</span> chaojiying<span class="token comment"># 封装识别验证码函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://so.gushiwen.cn/user/login.aspx?from=http://so.gushiwen.cn/user/collect.aspx"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    code_img_src <span class="token operator">=</span> <span class="token string">'https://so.gushiwen.cn/'</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="imgCode"]/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code_img_src<span class="token punctuation">)</span>    code_img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>code_img_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>code_img_data<span class="token punctuation">)</span>    chaojiying <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>Chaojiying_Client<span class="token punctuation">(</span><span class="token string">'19858165529'</span><span class="token punctuation">,</span> <span class="token string">'hxl158120'</span><span class="token punctuation">,</span> <span class="token string">'925040'</span><span class="token punctuation">)</span>  <span class="token comment"># 用户中心>>软件ID 生成一个替换 96001</span>    im <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./code.jpg'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span>    code <span class="token operator">=</span> chaojiying<span class="token punctuation">.</span>PostPic<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">1004</span><span class="token punctuation">)</span>    code_img <span class="token operator">=</span> code<span class="token punctuation">[</span><span class="token string">'pic_str'</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>code_img<span class="token punctuation">)</span>  <span class="token comment"># 1902 验证码类型  官方网站>>价格体系 3.4+版 print 后要加()</span>    <span class="token comment"># 模拟登陆</span>    login_url <span class="token operator">=</span> <span class="token string">"https://so.gushiwen.cn/user/login.aspx?"</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'from'</span><span class="token punctuation">:</span> <span class="token string">'http://so.gushiwen.cn/user/collect.aspx'</span><span class="token punctuation">,</span>        <span class="token string">'email'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'pwd'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'code'</span><span class="token punctuation">:</span> code_img<span class="token punctuation">,</span>        <span class="token string">'denglu'</span><span class="token punctuation">:</span> <span class="token string">'登录'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    login_page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'changyan.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>login_page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>cookie</code> : 用来让服务端记录客户端的相关状态</li><li>自动处理: <ul><li><code>cookie</code>来源于模拟登陆请求后,由服务端创建</li><li><code>session</code>会话对象:<ul><li>进行请求的发送</li><li>如果请求中产生了<code>cookie</code>,则由<code>cookie</code>会被自动存储/携带在<code>session</code>对象中</li></ul></li></ul></li></ul><p>无<strong>验证码</strong>,模拟登陆并获取用户数据 测试成功</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 模拟登陆无验证码</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"https://work.shopeebao1688.com/login.html"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    login_url <span class="token operator">=</span> <span class="token string">"https://work.shopeebao1688.com/index/Login/doLogin?username=13668567749&amp;password=yangbiao2021"</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    login_page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>    detail_url <span class="token operator">=</span> <span class="token string">"https://work.shopeebao1688.com/main"</span>    <span class="token comment"># 使用携带cookie 的session 进行get请求的发送</span>    detail_page_text <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'xiabao.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>detail_page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><ul><li><p>带路服务器</p></li><li><p>代理的作用:</p><ul><li>突破自身访问限制</li><li>隐藏自身真实IP</li></ul></li><li><p>代理相关网站</p><ul><li>快代理</li></ul></li><li><p>代理<code>ip</code>类型</p><ul><li><code>http</code>:应用到http协议对应的url中</li><li><code>https</code>:应用到http协议对应的url中 </li></ul></li><li><p>代理<code>ip</code>的匿名度</p><ul><li>透明：服务器知道该次请求使用了代理，也知道请求对应的真实ip</li><li>匿名：知道使用了代理，但不知道真实ip</li><li>高匿：不知道使用了代理，跟不知道真实的ip</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 代理服务器  未成功（可能是没找到https的服务器）</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?ie=UTF-8&amp;wd=ip"</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span><span class="token punctuation">&#125;</span>page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> proxies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"HTTP"</span><span class="token punctuation">:</span> <span class="token string">'39.99.149.148'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'ip2.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异步爬虫之线程池"><a href="#异步爬虫之线程池" class="headerlink" title="异步爬虫之线程池"></a>异步爬虫之线程池</h3><ul><li>线程池处理的是阻塞且耗时的操作</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 爬取梨视频</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">from</span> multiprocessing<span class="token punctuation">.</span>dummy <span class="token keyword">import</span> Pool<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://www.pearvideo.com/category_10"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@id="listvideoListUl"]/li'</span><span class="token punctuation">)</span>    urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 所有视频的连接</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        detail_url <span class="token operator">=</span> <span class="token string">'https://www.pearvideo.com/'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        href <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/@href'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./div/a/div[2]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.mp4'</span>        video_id <span class="token operator">=</span> detail_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>            <span class="token punctuation">,</span> <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.pearvideo.com/'</span> <span class="token operator">+</span> href        <span class="token punctuation">&#125;</span>        video_href <span class="token operator">=</span> <span class="token string">'https://www.pearvideo.com/videoStatus.jsp?contId='</span> <span class="token operator">+</span> video_id        video_url <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>video_href<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        video <span class="token operator">=</span> video_url<span class="token punctuation">[</span><span class="token string">"videoInfo"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"videos"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"srcUrl"</span><span class="token punctuation">]</span>        video <span class="token operator">=</span> video<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>video<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'cont-%s'</span> <span class="token operator">%</span> video_id<span class="token punctuation">)</span>        dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>            <span class="token string">'url'</span><span class="token punctuation">:</span> video        <span class="token punctuation">&#125;</span>        urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_video_data</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> dic<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'正在下载。。。'</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'下载成功'</span><span class="token punctuation">)</span>    <span class="token comment"># 使用线程池对视频数据进行请求</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>get_video_data<span class="token punctuation">,</span> urls<span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单线程-异步协程"><a href="#单线程-异步协程" class="headerlink" title="单线程+异步协程"></a>单线程+异步协程</h3><ul><li><code>event_loop</code>:事件循环,相当于一个无限循环,我们可以把一些函数注册到这个事件循环上,当满足某些条件时,函数就会被执行</li><li><code>coroutine</code>: 协程对象,可以把协程对象注册到事件循环中,它会被事件循环调用.可以使用<code>async</code>关键字定义一个方法,这个方法在调用时不会执行,而是返回一个协程对象</li><li><code>task</code>:任务,它是对协程对象的一个封装,包含了任务的各个状态</li><li><code>future</code>: 代表将来执行或还没有执行的任务,实际上和<code>task</code>没有本质区别</li><li><code>async</code>: 定义一个协程</li><li><code>await</code>: 用来挂起阻塞方法的执行</li></ul><h4 id="协程基础案例演示"><a href="#协程基础案例演示" class="headerlink" title="协程基础案例演示"></a>协程基础案例演示</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在请求的url"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请求成功"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">return</span> url<span class="token comment"># async 修饰的函数,调用之后返回的是一个协程对象</span>c <span class="token operator">=</span> request<span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># # 创建事件循环对象</span><span class="token comment"># loop = asyncio.get_event_loop()</span><span class="token comment"># # 将协程对象注册到loop中,然后启动loop</span><span class="token comment"># loop.run_until_complete(c)</span><span class="token comment"># task使用</span><span class="token comment">#loop = asyncio.get_event_loop()</span><span class="token comment"># 基于loop创建一个task对象</span><span class="token comment"># task = loop.create_task(c)</span><span class="token comment">#</span><span class="token comment"># print(task)</span><span class="token comment"># loop.run_until_complete(task)</span><span class="token comment"># print(task)</span><span class="token comment"># future的使用</span><span class="token comment"># loop = asyncio.get_event_loop()</span><span class="token comment"># task = asyncio.ensure_future(c)</span><span class="token comment"># print(task)</span><span class="token comment"># loop.run_until_complete(task)</span><span class="token comment"># print(task)</span><span class="token keyword">def</span> <span class="token function">callback_func</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 绑定回调</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>task<span class="token punctuation">.</span>add_done_callback<span class="token punctuation">(</span>callback_func<span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多任务异步协程"><a href="#多任务异步协程" class="headerlink" title="多任务异步协程"></a>多任务异步协程</h4><ul><li>基础案例演示</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正在下载"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token comment"># time.sleep(2)  6s</span>    <span class="token comment"># 当在asyncio中遇到阻塞操作必须手动挂起</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下载完毕"</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>urls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>    <span class="token string">'www.4399.com'</span><span class="token punctuation">,</span>    <span class="token string">'www.ssm.com'</span><span class="token punctuation">]</span>stasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    c <span class="token operator">=</span> request<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    stasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将任务列表封装到wait中</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>stasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>进阶案例</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> timeapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/ssm'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_ssm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello ssm"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/shao'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_shao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello shao"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hxl'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index_hxl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"hello hxl"</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>threaded<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> time<span class="token keyword">import</span> aiohttpurls <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'http://127.0.0.1:5000/ssm'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:5000/shao'</span><span class="token punctuation">,</span> <span class="token string">'http://127.0.0.1:5000/hxl'</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token comment"># headers params/data proxy='http://ip:port'</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            page_text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在下载'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'下载完毕'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>    c <span class="token operator">=</span> get_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    tasks<span class="token punctuation">.</span>append<span class="token punctuation">(</span>task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将任务列表封装到wait中</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;模拟登陆&quot;&gt;&lt;a href=&quot;#模拟登陆&quot; class=&quot;headerlink&quot; title=&quot;模拟登陆&quot;&gt;&lt;/a&gt;模拟登陆&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;超级鹰&lt;/strong&gt;平台识别验证码的编码流程:&lt;ul&gt;
&lt;li&gt;将验证码图片进行本地下载</summary>
      
    
    
    
    <category term="爬虫" scheme="https://shaoshaossm.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫问题合集</title>
    <link href="https://shaoshaossm.github.io/2021-11-16-python-pa-chong-wen-ti-he-ji.html"/>
    <id>https://shaoshaossm.github.io/2021-11-16-python-pa-chong-wen-ti-he-ji.html</id>
    <published>2021-11-16T08:57:33.000Z</published>
    <updated>2021-11-24T08:29:02.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 通用中文乱码的解决方案</span>img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token comment"># 手动设置相应数据的编码格式</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>response<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span><span class="token comment">#  text -> content</span>response<span class="token punctuation">.</span>text 改成 response<span class="token punctuation">.</span>content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决python爬虫<code>requests.exceptions.SSLError: HTTPSConnectionPool(host=&#39;XXX&#39;, port=443)</code>问题</li></ul><ol><li>安装<code>cryptography</code>、<code>pyOpenSSL</code>、<code>certifi</code>三个模块即可</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> cryptographypip <span class="token function">install</span> pyOpenSSLpip <span class="token function">install</span> certifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>requests库提示警告：<code>InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate ver</code></li></ul><ol><li>加入如下代码即可</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">requests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>提取html文件报错<code>lxml.etree.XMLSyntaxError: Opening and ending tag mismatch: meta line 4 and head</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">原因在于html标签未加 <span class="token operator">/</span> 所有的标签最好都用 <span class="token operator">/</span> 来结束<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>TypeError: can only concatenate str (not “list”) to str</code>(列表和字符串的报错解决方法)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 强转即可</span><span class="token builtin">str</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>警告<code>DeprecationWarning: executable_path has been deprecated, please pass in a Service object</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 是使用api过期导致此警告 使用这个（测试案例）即可</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>service <span class="token keyword">import</span> Services <span class="token operator">=</span> Service<span class="token punctuation">(</span><span class="token string">"chromedriver.exe"</span><span class="token punctuation">)</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>service<span class="token operator">=</span>s<span class="token punctuation">)</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>标签定位不到<code>selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用标签的绝对定位</span>bro<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span><span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>l类型错误 :<code>TypeError: ‘ItemMeta‘ object does not support item assignment</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 报错原因：未找到具体item，load出错，item后面需要加()进行实例化。</span>item <span class="token operator">=</span> MeinvproItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>scrapy框架写入数据库中存储数据部分代码报错 <code>redis.exceptions.DataError: Invalid input of type: &#39;dict&#39;. Convert to a byte, string or number first. </code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用旧版本pip install redis==2.10.6，即可解决</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;中文乱码&quot;&gt;&lt;a href=&quot;#中文乱码&quot; class=&quot;headerlink&quot; title=&quot;中文乱码&quot;&gt;&lt;/a&gt;中文乱码&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://shaoshaossm.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>爬虫常用正则表达式</title>
    <link href="https://shaoshaossm.github.io/2021-11-16-pa-chong-chang-yong-zheng-ze-biao-da-shi.html"/>
    <id>https://shaoshaossm.github.io/2021-11-16-pa-chong-chang-yong-zheng-ze-biao-da-shi.html</id>
    <published>2021-11-16T03:35:46.000Z</published>
    <updated>2021-12-23T07:14:07.867Z</updated>
    
    <content type="html"><![CDATA[<ul><li>单字符<ul><li><code>.</code> : 除换行以外所有字符</li><li><code>[]</code> : [aoe] [a-w] 匹配集合中任意一个字符</li><li><code>\d</code>：元字符，代表0-9中的任意一个</li><li><code>\D</code> : 代表任意一个非数字字符</li><li><code>\w</code> : 数字、字母、下划线、中文</li><li><code>\W</code> : 非<code>\w</code> </li><li><code>\s</code> : 所有的空白字符,包括空格、制表符、换页符等,等价于<code>\f\n\r\t\v</code></li><li><code>\S</code> : 非空白   </li></ul></li><li>数量修饰<ul><li><code>*</code> : 任意多次   &gt;=0</li><li><code>+</code>: 至少一次    &gt;=1</li><li><code>?</code> : 可有可无   0次或一次</li><li><code>&#123;m&#125;</code> : 固定m次   hello{3,}</li><li><code>&#123;m,&#125;</code> : 至少m次</li><li><code>&#123;m,n&#125;</code> : m-n次</li></ul></li><li>边界<ul><li><code>$</code> : 以某某结尾</li><li><code>^</code> : 以某某开头</li></ul></li><li>分组<ul><li><code>(ab)</code></li></ul></li><li>贪婪模式 : <code>.*</code></li><li>非贪婪(惰性)模式 :<code> .*?</code></li><li><code>re.I</code> : 忽略大小写</li><li><code>re.M</code> : 多行匹配</li><li><code>re.S</code> : 但行匹配</li><li><code>re.sub</code> : (正则表达式,替换内容,字符串)</li></ul><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">import rekey &#x3D; &quot;javapython1myslqpython1&quot;print(re.findall(&#39;python1&#39;, key)[1])key &#x3D; &quot;&lt;html&gt;&lt;h1&gt;hello world&lt;h1&gt;&lt;&#x2F;html&gt;&quot;print(re.findall(&#39;&lt;h1&gt;(.*)&lt;h1&gt;&#39;, key))string &#x3D; &quot;I like 170 girl&quot;print(re.findall(&#39;\d&#39;, string))key &#x3D; &quot;http:&#x2F;&#x2F;www.baidu.com and https:&#x2F;&#x2F;www.shaoshaossm.github.io&quot;print(re.findall(&#39;https:&#x2F;&#x2F;&#39;, key))key &#x3D; &#39;am@shao.com&#39;print(re.findall(&#39;s.*?\.&#39;, key))key &#x3D; &#39;saas and asa and saaas&#39;print(re.findall(&#39;sa&#123;1,2&#125;s&#39;,key))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;单字符&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; : 除换行以外所有字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt; : [aoe] [a-w] 匹配集合中任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\d&lt;/code&gt;：元字符，代表0-9中的任意一个&lt;</summary>
      
    
    
    
    <category term="表达式" scheme="https://shaoshaossm.github.io/categories/%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
    <category term="正则表达式" scheme="https://shaoshaossm.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫基础</title>
    <link href="https://shaoshaossm.github.io/2021-11-14-python-pa-chong.html"/>
    <id>https://shaoshaossm.github.io/2021-11-14-python-pa-chong.html</id>
    <published>2021-11-14T04:15:51.000Z</published>
    <updated>2021-11-24T08:51:56.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫基础简介"><a href="#爬虫基础简介" class="headerlink" title="爬虫基础简介"></a>爬虫基础简介</h3><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><ul><li>概念: 服务器和客户端进行数据交互的一种形式</li><li><code>user-Agent</code>: 请求载体的身份表示</li><li>Connection : 请求完毕后,是断开连接还是保持连接 </li><li><code>Content-Type</code> : 服务器相应客户端的数据类型 </li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http"># user-Agent ( NetWork-All-Headers )Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="https协议"><a href="#https协议" class="headerlink" title="https协议"></a>https协议</h4><ul><li>概念: 安全的超文本数据传输协议</li><li>普遍采用的加密方式 : 证书密钥加密</li></ul><h3 id="request模块"><a href="#request模块" class="headerlink" title="request模块"></a>request模块</h3><ul><li>作用：模拟浏览器发送请求</li><li>request模块编码流程<ul><li>指定url</li><li>发起请求</li><li>获取响应数据</li><li>持久化存储</li></ul></li></ul><ol><li>爬取<code>https://shaoshaossm.github.io/</code> 首页数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"https://shaoshaossm.github.io/"</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>    page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./ssm.html'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"爬取结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>豆瓣高分电影</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 豆瓣高分电影</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://movie.douban.com/j/search_subjects?"</span>    param <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'movie'</span><span class="token punctuation">,</span>        <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token string">'热门'</span><span class="token punctuation">,</span>        <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token string">'recommend'</span><span class="token punctuation">,</span>        <span class="token string">'page_limit'</span><span class="token punctuation">:</span> <span class="token string">'20'</span><span class="token punctuation">,</span>        <span class="token string">'page_start'</span><span class="token punctuation">:</span> <span class="token string">'0'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 携带参数的</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> params<span class="token operator">=</span>param<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    list_data <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>list_data<span class="token punctuation">)</span>    <span class="token comment"># 持久化存储</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./douban.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>list_data<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'voer!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>药监总局化妆品生产许可</li></ol><ul><li> 百度搜 国家药品监督管理局，点首页化妆品——化妆品查询——化妆品生产许可获证企业 </li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 药监总局化妆品生产许可</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> json<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># UA伪装</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    id_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    all_data_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList"</span>    <span class="token comment"># post请求参数处理</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        page <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'on'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>            <span class="token string">'page'</span><span class="token punctuation">:</span> page<span class="token punctuation">,</span>            <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token punctuation">,</span>            <span class="token string">'productName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'conditionType'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>            <span class="token string">'applyname'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'applysn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span>        <span class="token comment"># 携带参数的</span>        json_ids <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> dic <span class="token keyword">in</span> json_ids<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            id_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dic<span class="token punctuation">[</span><span class="token string">'ID'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    post_url <span class="token operator">=</span> <span class="token string">"http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById"</span>    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> id_list<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token builtin">id</span>        <span class="token punctuation">&#125;</span>        detail_json <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>post_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>detail_json<span class="token punctuation">)</span>        all_data_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>detail_json<span class="token punctuation">)</span>    <span class="token comment"># 持久化存储</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./allData.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>all_data_list<span class="token punctuation">,</span> fp<span class="token operator">=</span>fp<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'voer!!!'</span><span class="token punctuation">)</span><span class="token comment"># 若报错多试几次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="聚焦爬虫"><a href="#聚焦爬虫" class="headerlink" title="聚焦爬虫"></a>聚焦爬虫</h3><ul><li><p>爬取页面中指定的内容</p></li><li><p>数据解析分类</p><ul><li>正则</li><li>bs4</li><li><strong>xpath</strong></li></ul></li><li><p>数据解析原理概述:</p><ul><li>进行指定标签的定位</li><li>标签或者标签对应的属性中存储的数据的值进行提取(解析)</li></ul></li><li><p><font color="red">正则表达式</font>爬取糗事百科图片–分页爬取</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 爬取糗事百科图片--分页爬取</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> osrequests<span class="token punctuation">.</span>packages<span class="token punctuation">.</span>urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\qiutu'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\qiutu'</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 设置一个通用的url模板</span>    url <span class="token operator">=</span> <span class="token string">"https://www.qiushibaike.com/imgrank/page/%d/"</span>    <span class="token keyword">for</span> pageNum <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>url <span class="token operator">%</span> pageNum<span class="token punctuation">)</span>        <span class="token comment"># 二进制形式的图片数据</span>        page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        ex <span class="token operator">=</span> <span class="token string">'&lt;div class="thumb">.*?&lt;img src="(.*?)" alt.*?&lt;/div>'</span>        img_src_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>ex<span class="token punctuation">,</span> page_text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>        <span class="token keyword">for</span> src <span class="token keyword">in</span> img_src_list<span class="token punctuation">:</span>            <span class="token comment"># 拼接出一个完整的图片地址</span>            src <span class="token operator">=</span> <span class="token string">'https:'</span> <span class="token operator">+</span> src            <span class="token comment"># 请求图片二进制数据</span>            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            <span class="token comment"># 生成图片名称</span>            img_name <span class="token operator">=</span> src<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment"># 图片存储路路径</span>            imgPath <span class="token operator">=</span> <span class="token string">'E:\\pachongzhuanyongwenjianjia\\qiutu\\'</span> <span class="token operator">+</span> img_name            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> <span class="token string">"下载成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>bs4</code>数据解析原理:</p><ul><li>实例化一个<code>BeautifulSoup</code>对象,并且将页面源码数据加载到该对象中</li><li>通过调用<code>BeautifulSoup</code>对象中相关属性或方法进行标签定位和数据提取</li></ul></li><li><p>环境安装</p><ul><li>pip install bs4</li><li>pip install lxml</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 提供数据解析的方法和属性</span>soup<span class="token punctuation">.</span>tagName <span class="token punctuation">:</span> 返回文档中第一次出现的tagName对应的标签soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>     <span class="token operator">-</span><span class="token operator">-</span> find<span class="token punctuation">(</span><span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>等同于soup<span class="token punctuation">.</span>div    <span class="token operator">-</span><span class="token operator">-</span> 属性定位<span class="token punctuation">:</span>        <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">/</span><span class="token builtin">id</span><span class="token operator">/</span>attr<span class="token operator">=</span><span class="token string">'song'</span><span class="token punctuation">)</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tagName'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>返回符合要求的所有标签<span class="token punctuation">(</span>列表<span class="token punctuation">)</span>select<span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span> select<span class="token punctuation">(</span><span class="token string">'某种选择器 (id,class,标签...选择器)'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>返回的是一个列表    <span class="token operator">-</span><span class="token operator">-</span> 层级选择器<span class="token punctuation">:</span>        <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang > ul > li > a'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token operator">></span> 表示一个层级 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 第一个数据        <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.tang > ul a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">></span> 空格表示多个个层级获取标签之间的文本数据<span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text<span class="token operator">/</span>string<span class="token operator">/</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-</span><span class="token operator">-</span> text<span class="token operator">/</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>可以获取标签中所有的文本内容    <span class="token operator">-</span><span class="token operator">-</span> string<span class="token punctuation">:</span> 只可以获取该标签下直系的文本内容获取标签中的属性值<span class="token punctuation">:</span>    <span class="token operator">-</span><span class="token operator">-</span> soup<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>bs4</code>爬取三国演义中所有章节和文章内容</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 爬取三国演义中所有章节和文章内容</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://www.shicimingju.com/book/sanguoyanyi.html"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment"># 实例化BeautifulSoup对象 将页面源码数据加载到该对象中</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>page_text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment"># 解析章节标题和详情页url</span>    li_list <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.book-mulu > ul > li'</span><span class="token punctuation">)</span>    fp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./sanguo.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>        title <span class="token operator">=</span> li<span class="token punctuation">.</span>a<span class="token punctuation">.</span>string        detail_url <span class="token operator">=</span> <span class="token string">'https://www.shicimingju.com'</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token comment"># 对详情页发起请求,解析章节内容</span>        detail_page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>detail_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content        <span class="token comment"># 解析出详情页中相关的章节内容</span>        detail_soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>detail_page_text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        <span class="token comment"># 解析到章节内容</span>        content <span class="token operator">=</span> detail_soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'chapter_content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token string">'爬取成功!!!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>xpath</code> 解析原理<ul><li>实例化一个<code>etree</code>的对象,且需要将被解析的页面源码数据加载到该对象中</li><li>调用<code>etree</code> 对象中的xpath方法结合着xpath表达式实现标签的定位和内容的捕获</li></ul></li><li>环境安装<ul><li>pin install lxml</li></ul></li><li><code>xpath</code>表达式<ul><li>/:表示的是从根节点开始定位.表示的是一个层级</li><li>//:表示多个层级.可以从任意位置开始定位</li><li>属性定位: //div[@class=’song’] tag[@attrName=”attrValue”]</li><li>索引定位: //div[@class=’song’]/p[3] 索引从1开始</li><li>取文本:<ul><li>/text() 获取的是标签中直系的文本内容</li><li>//text() 标签中非直系文本内容 (所有文本的内容)</li></ul></li><li>取属性<ul><li>/@attrName   ===&gt;img/src</li></ul></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 演示示例</span><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span><span class="token string">'1.html'</span><span class="token punctuation">)</span>    <span class="token comment">#  r = tree.xpath('/html/body/h1')</span>    <span class="token comment"># r = tree.xpath('//h1')</span>    <span class="token comment"># r = tree.xpath('//div[@class="song"]')</span>    <span class="token comment"># r = tree.xpath('//div')</span>    <span class="token comment"># r = tree.xpath('//div[@class="song"]//li[5]/a/text()')[0]</span>    <span class="token comment"># r = tree.xpath('//li[7]//text()')</span>    <span class="token comment"># r = tree.xpath('//div[@class="song"]//text()')</span>    r <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="song"]/img/@src'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>全国城市列表(两种方式)</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://www.aqistudy.cn/historydata/"</span>    page_text <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>    all_li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="bottom"]/ul/li/a | //div[@class="bottom"]/ul/div[2]/li/a'</span><span class="token punctuation">)</span>    all_city_Names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 解析到热门城市名称</span>    <span class="token keyword">for</span> li <span class="token keyword">in</span> all_li_list<span class="token punctuation">:</span>        all_city_Name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        all_city_Names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>all_city_Name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>all_city_Names<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>all_city_Names<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 彼岸图网美女图片 分页爬取</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> lxml <span class="token keyword">import</span> html<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\bizhimeinv'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token string">'E:\\pachongzhuanyongwenjianjia\\bizhimeinv'</span><span class="token punctuation">)</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36'</span>    <span class="token punctuation">&#125;</span>    url <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com/4kqiche/index_%d.html"</span>    <span class="token keyword">for</span> pageNum <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_url <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>url <span class="token operator">%</span> pageNum<span class="token punctuation">)</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>new_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        <span class="token comment"># 手动设置相应数据的编码格式</span>        <span class="token comment"># response.encoding = 'utf-8'</span>        page_text <span class="token operator">=</span> response<span class="token punctuation">.</span>text        tree <span class="token operator">=</span> html<span class="token punctuation">.</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>page_text<span class="token punctuation">)</span>        li_list <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//ul[@class="clearfix"]/li'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> li <span class="token keyword">in</span> li_list<span class="token punctuation">:</span>            img_src <span class="token operator">=</span> <span class="token string">"https://pic.netbian.com"</span> <span class="token operator">+</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@src'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            img_name <span class="token operator">=</span> li<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'./a/img/@alt'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span>            <span class="token comment"># 通用中文乱码的解决方案</span>            img_name <span class="token operator">=</span> img_name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'iso-8859-1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> img_src<span class="token punctuation">)</span>            img_data <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>img_src<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>content            imgPath <span class="token operator">=</span> <span class="token string">'E:\\pachongzhuanyongwenjianjia\\bizhimeinv\\'</span> <span class="token operator">+</span> img_name            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>                fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img_data<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>img_name<span class="token punctuation">,</span> img_src<span class="token punctuation">,</span><span class="token string">"下载成功"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;爬虫基础简介&quot;&gt;&lt;a href=&quot;#爬虫基础简介&quot; class=&quot;headerlink&quot; title=&quot;爬虫基础简介&quot;&gt;&lt;/a&gt;爬虫基础简介&lt;/h3&gt;&lt;h3 id=&quot;http协议&quot;&gt;&lt;a href=&quot;#http协议&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="爬虫" scheme="https://shaoshaossm.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python进阶</title>
    <link href="https://shaoshaossm.github.io/2021-11-06-python-jin-jie.html"/>
    <id>https://shaoshaossm.github.io/2021-11-06-python-jin-jie.html</id>
    <published>2021-11-06T11:11:00.000Z</published>
    <updated>2021-11-14T04:14:48.497Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在 <code>Python</code> 中可以使用以下两个方法验证：</p><ol><li>在 <strong>标识符</strong> / <strong>数据</strong> 后输入一个 <code>.</code>，然后按下 <code>TAB</code> 键，<code>iPython</code> 会提示该对象能够调用的 <strong>方法列表</strong></li><li>使用内置函数 <code>dir</code> 传入 <strong>标识符</strong> / <strong>数据</strong>，可以查看对象内的 <strong>所有属性及方法</strong></li></ol><p><strong>提示</strong> <code>__方法名__</code> 格式的方法是 <code>Python</code> 提供的 <strong>内置方法 / 属性</strong></p><table><thead><tr><th align="center">序号</th><th align="center">方法名</th><th align="center">类型</th><th>作用</th></tr></thead><tbody><tr><td align="center">01</td><td align="center"><code>__new__</code></td><td align="center">方法</td><td><strong>创建对象</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td align="center">02</td><td align="center"><code>__init__</code></td><td align="center">方法</td><td><strong>对象被初始化</strong>时，会被 <strong>自动</strong> 调用</td></tr><tr><td align="center">03</td><td align="center"><code>__del__</code></td><td align="center">方法</td><td><strong>对象被从内存中销毁</strong>前，会被 <strong>自动</strong> 调用</td></tr><tr><td align="center">04</td><td align="center"><code>__str__</code></td><td align="center">方法</td><td>返回<strong>对象的描述信息</strong>，<code>print</code> 函数输出使用</td></tr><tr><td align="center">05</td><td align="center"><code>__file__</code></td><td align="center">方法</td><td>返回<strong>文件所在路径</strong></td></tr><tr><td align="center">06</td><td align="center"><code>__name__</code></td><td align="center">方法</td><td>测试模块代码只在<strong>测试情况下运行</strong>,被导入时不会执行!</td></tr></tbody></table><blockquote><p>利用好 <code>dir()</code> 函数，在学习时很多内容就不需要死记硬背了</p></blockquote><h4 id="初始化方法-——同时设置初始值"><a href="#初始化方法-——同时设置初始值" class="headerlink" title="初始化方法 ——同时设置初始值"></a>初始化方法 ——同时设置初始值</h4><p>在开发中，如果希望在 <strong>创建对象的同时，就设置对象的属性</strong>，可以对 <code>__init__</code> 方法进行 <strong>改造</strong></p><ol><li>把希望设置的属性值，定义成 <code>__init__</code> 方法的参数</li><li>在方法内部使用 <code>self.属性 = 形参</code> 接收外部传递的参数</li><li>在创建对象时，使用 <code>类名(属性1, 属性2...)</code> 调用</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始化方法 %s"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    tom <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>lazy_cat <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token string">"大懒猫"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h4><ul><li>在定义方法和属性时,在属性名或者方法名前增加<strong>两个下划线</strong>,定义的就是<strong>私有</strong>属性或方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>__age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">def</span> <span class="token function">__scret</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="类方法和静态方法"><a href="#类方法和静态方法" class="headerlink" title="类方法和静态方法"></a>类方法和静态方法</h4><ul><li>类方法就是针对<strong>类对象</strong>定义的方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 类方法</span><span class="token decorator annotation punctuation">@classmethod</span><span class="token keyword">def</span> 方法名<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 静态方法</span><span class="token decorator annotation punctuation">@staticmethod</span><span class="token keyword">def</span> 静态方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>方法写在类中就是封装</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HouseItem</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> area<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param name: 家具名称        :param area: 占地面积        """</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>area <span class="token operator">=</span> area    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"[%s] 占地面积 %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token comment"># 1. 创建家具</span>bed <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"席梦思"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>chest <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"衣柜"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>table <span class="token operator">=</span> HouseItem<span class="token punctuation">(</span><span class="token string">"餐桌"</span><span class="token punctuation">,</span> <span class="token number">1.5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bed<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>chest<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="继承-and-多继承"><a href="#继承-and-多继承" class="headerlink" title="继承 and 多继承"></a>继承 and 多继承</h3><ul><li>当<strong>父类</strong>方法不能满足子类需求时,可以对方法进行<strong>重写(override)</strong><ul><li>覆盖父类的方法</li><li>对父类方法进行扩展</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 单继承</span><span class="token keyword">class</span> 类名<span class="token punctuation">(</span>父类名<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 多继承</span><span class="token keyword">class</span> 类名<span class="token punctuation">(</span>父类名<span class="token punctuation">,</span>父类名<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>对父类方法进行扩展</p><ul><li>在<strong>子类中重写</strong>父类的方法</li><li>在需要的位置使用<code>super()</code>.父类方法来调用父类方法的执行</li><li>代码其他位置针对子类的需求,编写<strong>子类特有的代码实现</strong></li></ul></li><li><p><code>super()</code>就是<code>super</code>类创建的对象</p></li><li><p>最常使用的场景就是在<strong>重写父类方法</strong>时,调用<strong>在父类中封装的方法实现</strong></p></li><li><p><strong>子类对象</strong>不能在自己的方法的内部,<strong>直接</strong>访问父类的<strong>私有属性和私有方法</strong></p></li><li><p><strong>子类对象</strong>可以通过父类的<strong>公有</strong>方法<strong>间接</strong>访问**私有属性或私有方法 **</p></li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>在程序执行时，传入不同的<strong>狗对象</strong>实参，就会产生不同的执行效果</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 蹦跳玩"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XiaoTianDog</span><span class="token punctuation">(</span>Dog<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">game</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 边飞边蹦跳玩"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">game_width_dog</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dog<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s 与 %s 一起玩耍"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> dog<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>        dog<span class="token punctuation">.</span>game<span class="token punctuation">(</span><span class="token punctuation">)</span>xiaoming <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span>xiaotianquan <span class="token operator">=</span> XiaoTianDog<span class="token punctuation">(</span><span class="token string">"哮天犬"</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>game_width_dog<span class="token punctuation">(</span>xiaotianquan<span class="token punctuation">)</span>wangcai <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">)</span>xiaoming<span class="token punctuation">.</span>game_width_dog<span class="token punctuation">(</span>wangcai<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">小明 与 哮天犬 一起玩耍哮天犬 边飞边蹦跳玩小明 与 旺财 一起玩耍旺财 蹦跳玩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h3><ul><li>设计模式<ul><li>设计模式是针对<strong>某一特定问题</strong>的成熟的解决方案</li><li>使用设计模式是为了可重用代码、让代码更容易被人理解、保证代码的可读性</li></ul></li><li>单例设计模式<ul><li>目的–让类创建的对象,在系统中<strong>只有唯一的一个实例</strong></li><li>每一次执行<code>类名()</code>返回的对象、<strong>内存地址是相同的</strong></li></ul></li><li>应用场景:<ul><li> <strong>音乐播放</strong> 对象</li><li> <strong>回收站</strong> 对象</li><li> **打印机 **对象</li></ul></li></ul><blockquote><p>重写new方法的代码非常固定</p></blockquote><ul><li><p>重写 <code>__new__</code>方法一定要<code>return super().__new__(cls)</code></p></li><li><p><code>__new__</code>是一个静态方法,在调用时需要主动传递<code>cls</code>参数</p></li></ul><p>案例演示</p><ul><li>只执行一次初始化</li><li>内存地址是唯一的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MusicPlayer</span><span class="token punctuation">:</span>    instance <span class="token operator">=</span> <span class="token boolean">None</span>    init_flag <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> MusicPlayer<span class="token punctuation">.</span>init_flag<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"初始化播放器"</span><span class="token punctuation">)</span>        MusicPlayer<span class="token punctuation">.</span>init_flag <span class="token operator">=</span> <span class="token boolean">True</span>player1 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span>player2 <span class="token operator">=</span> MusicPlayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token comment"># 运行结果</span>初始化播放器<span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>MusicPlayer <span class="token builtin">object</span> at <span class="token number">0x0000017824D39A20</span><span class="token operator">></span><span class="token operator">&lt;</span>__main__<span class="token punctuation">.</span>MusicPlayer <span class="token builtin">object</span> at <span class="token number">0x0000017824D39A20</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ul><li><strong>简单捕获异常</strong>语法格式</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    尝试执行的代码<span class="token keyword">except</span><span class="token punctuation">:</span>    出现错误的处理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>错误类型捕获</strong>语法格式</li><li>当<code>python</code>解释器<strong>抛出异常</strong>时,<strong>最后一行</strong>错误信息的<strong>第一个单词</strong>,就是错误类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> 错误类型<span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> <span class="token punctuation">(</span>错误类型<span class="token number">2</span><span class="token punctuation">,</span>错误类型<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># 捕获未知错误</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误 %s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>异常捕获完整</strong>语法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> 错误类型<span class="token number">1</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> <span class="token punctuation">(</span>错误类型<span class="token number">2</span><span class="token punctuation">,</span>错误类型<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"未知错误 %s"</span> <span class="token operator">%</span> result<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment"># 没有异常才会执行的代码</span>    <span class="token keyword">pass</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment"># 必定执行的代码</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>异常传递性</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    demo1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>demo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>再开发中，可以在主函数中增加<strong>异常捕获</strong></li><li>在主函数中调用其他函数,只要出现异常,都会传递到主函数的<strong>异常捕获</strong>中</li><li>这样不需要再代码中增加大量的<strong>异常捕获</strong>,保证代码的整洁行.</li></ul></blockquote><ul><li>主动抛出<code>raise</code>异常</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">input_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pwd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pwd<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> pwd    ex <span class="token operator">=</span> Exception<span class="token punctuation">(</span><span class="token string">"密码长度不够"</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> ex<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>input_password<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>使用<code>as</code>指定模块的别名</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> 模块名<span class="token number">1</span> <span class="token keyword">as</span> 模块名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>模块别名应该符合<font color="green">大驼峰</font>命名法</p></blockquote><ul><li>从模块中导入<strong>部分</strong>工具</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> 模块名<span class="token number">1</span> <span class="token keyword">import</span> 工具名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>导入之后可直接使用模块提供的工具 – <font color="green">全局变量、函数、类</font></p><p>如果两个模块存在<strong>同名函数</strong>,那么后导入的模块的函数会<strong>覆盖</strong>先导入的函数</p></blockquote><ul><li>从模块导入所有工具</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> 模块名<span class="token number">1</span> <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>__name</code> 属性兼顾测试和导入</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>__file__</code> 文件所在路径</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> my_package<span class="token keyword">print</span><span class="token punctuation">(</span>my_package<span class="token punctuation">.</span>__file__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p><code>__inti__.py</code></p><ul><li>要在外界使用包中的模块,需要在<code>__inti__.py</code>中指定对外界提供的模块列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从 当前目录 导入 模块列表</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment"># 示例</span><span class="token keyword">from</span> <span class="token punctuation">.</span>send <span class="token keyword">import</span> send_message<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="制作发布压缩包"><a href="#制作发布压缩包" class="headerlink" title="制作发布压缩包"></a>制作发布压缩包</h3><h4 id="1-创建-setup-py"><a href="#1-创建-setup-py" class="headerlink" title="1) 创建 setup.py"></a>1) 创建 setup.py</h4><ul><li><code>setup.py</code> 的文件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> distutils<span class="token punctuation">.</span>core <span class="token keyword">import</span> setupsetup<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"hm_message"</span><span class="token punctuation">,</span>  <span class="token comment"># 包名</span>      version<span class="token operator">=</span><span class="token string">"1.0"</span><span class="token punctuation">,</span>  <span class="token comment"># 版本</span>      description<span class="token operator">=</span><span class="token string">"ssm's 发送和接收消息模块"</span><span class="token punctuation">,</span>  <span class="token comment"># 描述信息</span>      long_description<span class="token operator">=</span><span class="token string">"完整的发送和接收消息模块"</span><span class="token punctuation">,</span>  <span class="token comment"># 完整描述信息</span>      author<span class="token operator">=</span><span class="token string">"ssm"</span><span class="token punctuation">,</span>  <span class="token comment"># 作者</span>      author_email<span class="token operator">=</span><span class="token string">"1600767556@qq.com"</span><span class="token punctuation">,</span>  <span class="token comment"># 作者邮箱</span>      url<span class="token operator">=</span><span class="token string">"www.shaoshaossm.github.io"</span><span class="token punctuation">,</span>  <span class="token comment"># 主页</span>      py_modules<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"hm_message.send_message"</span><span class="token punctuation">,</span>                  <span class="token string">"hm_message.receive_message"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有关字典参数的详细信息，可以参阅官方网站：</p><p><a href="https://docs.python.org/2/distutils/apiref.html">https://docs.python.org/2/distutils/apiref.html</a></p><h4 id="2-构建模块"><a href="#2-构建模块" class="headerlink" title="2) 构建模块"></a>2) 构建模块</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python3 setup.py build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-生成发布压缩包"><a href="#3-生成发布压缩包" class="headerlink" title="3) 生成发布压缩包"></a>3) 生成发布压缩包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ python3 setup.py sdist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：要制作哪个版本的模块，就使用哪个版本的解释器执行！</p></blockquote><h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> -zxvf hm_message-1.0.tar.gz $ <span class="token function">sudo</span> python3 setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>卸载模块</strong></p><p>直接从安装目录下，把安装模块的 <strong>目录</strong> 删除就可以</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">$ cd <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>python3<span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">/</span>dist<span class="token operator">-</span>packages<span class="token operator">/</span>$ sudo rm <span class="token operator">-</span>r hm_message<span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="pip-安装第三方模块"><a href="#pip-安装第三方模块" class="headerlink" title="pip 安装第三方模块"></a><code>pip</code> 安装第三方模块</h4><ul><li><strong>第三方模块</strong> 通常是指由 <strong>知名的第三方团队</strong> <strong>开发的</strong> 并且被 <strong>程序员广泛使用</strong> 的 <code>Python</code> 包 / 模块<ul><li>例如 <code>pygame</code> 就是一套非常成熟的 <strong>游戏开发模块</strong></li></ul></li><li><code>pip</code> 是一个现代的，通用的 <code>Python</code> 包管理工具</li><li>提供了对 <code>Python</code> 包的查找、下载、安装、卸载等功能</li></ul><p>安装和卸载命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将模块安装到 Python 2.x 环境</span>$ <span class="token function">sudo</span> pip <span class="token function">install</span> pygame$ <span class="token function">sudo</span> pip uninstall pygame<span class="token comment"># 将模块安装到 Python 3.x 环境</span>$ <span class="token function">sudo</span> pip3 <span class="token function">install</span> pygame$ <span class="token function">sudo</span> pip3 uninstall pygame<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在-Mac-下安装-iPython"><a href="#在-Mac-下安装-iPython" class="headerlink" title="在 Mac 下安装 iPython"></a>在 <code>Mac</code> 下安装 <code>iPython</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> pip <span class="token function">install</span> ipython<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="在-Linux-下安装-iPython"><a href="#在-Linux-下安装-iPython" class="headerlink" title="在 Linux 下安装 iPython"></a>在 <code>Linux</code> 下安装 <code>iPython</code></h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipython$ <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ipython3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><h3 id="操作文件的函数-方法"><a href="#操作文件的函数-方法" class="headerlink" title="操作文件的函数/方法"></a>操作文件的函数/方法</h3><ul><li>在 <code>Python</code> 中要操作文件需要记住 1 个函数和 3 个方法</li></ul><table><thead><tr><th>序号</th><th>函数/方法</th><th>说明</th></tr></thead><tbody><tr><td>01</td><td>open</td><td>打开文件，并且返回文件操作对象</td></tr><tr><td>02</td><td>read</td><td>将文件内容读取到内存</td></tr><tr><td>03</td><td>write</td><td>将指定内容写入文件</td></tr><tr><td>04</td><td>close</td><td>关闭文件</td></tr></tbody></table><ul><li><code>open</code> 函数负责打开文件，并且返回文件对象</li><li><code>read</code>/<code>write</code>/<code>close</code> 三个方法都需要通过 <strong>文件对象</strong> 来调用</li></ul><h3 id="read-方法-——-读取文件"><a href="#read-方法-——-读取文件" class="headerlink" title="read 方法 —— 读取文件"></a>read 方法 —— 读取文件</h3><ul><li><code>open</code> 函数的第一个参数是要打开的文件名（文件名区分大小写）<ul><li>如果文件 <strong>存在</strong>，返回 <strong>文件操作对象</strong></li><li>如果文件 <strong>不存在</strong>，会 <strong>抛出异常</strong></li></ul></li><li><code>read</code> 方法可以一次性 <strong>读入</strong> 并 <strong>返回</strong> 文件的 <strong>所有内容</strong></li><li><code>close</code> 方法负责 <strong>关闭文件</strong><ul><li>如果 <strong>忘记关闭文件</strong>，<strong>会造成系统资源消耗，而且会影响到后续对文件的访问</strong></li></ul></li><li><strong>注意</strong>：<code>read</code> 方法执行后，会把 <strong>文件指针</strong> 移动到 <strong>文件的末尾</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开 - 文件名需要注意大小写</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span><span class="token comment"># 2. 读取</span>text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 3. 关闭</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打开文件的方式"><a href="#打开文件的方式" class="headerlink" title="打开文件的方式"></a>打开文件的方式</h3><ul><li><code>open</code> 函数默认以 <strong>只读方式</strong> 打开文件，并且返回文件对象</li></ul><p>语法如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"文件名"</span><span class="token punctuation">,</span> <span class="token string">"访问方式"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th align="center">访问方式</th><th>说明</th></tr></thead><tbody><tr><td align="center">r</td><td>以<strong>只读</strong>方式打开文件。文件的指针将会放在文件的开头，这是<strong>默认模式</strong>。如果文件不存在，抛出异常</td></tr><tr><td align="center">w</td><td>以<strong>只写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td align="center">a</td><td>以<strong>追加</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr><tr><td align="center">r+</td><td>以<strong>读写</strong>方式打开文件。文件的指针将会放在文件的开头。如果文件不存在，抛出异常</td></tr><tr><td align="center">w+</td><td>以<strong>读写</strong>方式打开文件。如果文件存在会被覆盖。如果文件不存在，创建新文件</td></tr><tr><td align="center">a+</td><td>以<strong>读写</strong>方式打开文件。如果该文件已存在，文件指针将会放在文件的结尾。如果文件不存在，创建新文件进行写入</td></tr></tbody></table><ul><li>写入文件示例</li><li>若文件中有中文需加入<code>encoding=&#39;utf-8&#39;</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开文件</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"hello python！\n"</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"今天天气真好"</span><span class="token punctuation">)</span><span class="token comment"># 关闭文件</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>readline</code> 方法</p><ul><li><code>readline</code> 方法可以一次读取一行内容</li><li>方法执行后，会把 <strong>文件指针</strong> 移动到下一行，准备再次读取</li></ul><p><strong>读取大文件的正确姿势</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 打开文件</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 读取一行内容</span>    text <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 判断是否读到内容</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> text<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token comment"># 每读取一行的末尾已经有了一个 `\n`</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># 关闭文件</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><h4 id="小文件复制"><a href="#小文件复制" class="headerlink" title="小文件复制"></a>小文件复制</h4><ul><li>打开一个已有文件，读取完整内容，并写入到另外一个文件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件</span>file_read <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span>file_write <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README[复件]"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token comment"># 2. 读取并写入文件</span>text <span class="token operator">=</span> file_read<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>file_read<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="大文件复制"><a href="#大文件复制" class="headerlink" title="大文件复制"></a>大文件复制</h4><ul><li>打开一个已有文件，逐行读取内容，并顺序写入到另外一个文件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 1. 打开文件</span>file_read <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README"</span><span class="token punctuation">)</span>file_write <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"README[复件]"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token comment"># 2. 读取并写入文件</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 每次读取一行</span>    text <span class="token operator">=</span> file_read<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 判断是否读取到内容</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> text<span class="token punctuation">:</span>        <span class="token keyword">break</span>    file_write<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token comment"># 3. 关闭文件</span>file_read<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>file_write<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件-目录操作"><a href="#文件-目录操作" class="headerlink" title="文件/目录操作"></a>文件/目录操作</h3><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 导入前提</span><span class="token keyword">import</span> os<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>rename</td><td>重命名文件</td><td><code>os.rename(源文件名, 目标文件名)</code></td></tr><tr><td>02</td><td>remove</td><td>删除文件</td><td><code>os.remove(文件名)</code></td></tr></tbody></table><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><table><thead><tr><th>序号</th><th>方法名</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>01</td><td>listdir</td><td>目录列表</td><td><code>os.listdir(目录名)</code></td></tr><tr><td>02</td><td>mkdir</td><td>创建目录</td><td><code>os.mkdir(目录名)</code></td></tr><tr><td>03</td><td>rmdir</td><td>删除目录</td><td><code>os.rmdir(目录名)</code></td></tr><tr><td>04</td><td>getcwd</td><td>获取当前目录</td><td><code>os.getcwd()</code></td></tr><tr><td>05</td><td>chdir</td><td>修改工作目录</td><td><code>os.chdir(目标目录)</code></td></tr><tr><td>06</td><td>path.isdir</td><td>判断是否是文件</td><td><code>os.path.isdir(文件路径)</code></td></tr></tbody></table><blockquote><p>提示：文件或者目录操作都支持 <strong>相对路径</strong> 和 <strong>绝对路径</strong></p></blockquote><p><code>eva()</code> : 将<strong>字符串</strong>当成<strong>有效的表达式</strong>来求值，并<strong>返回计算结果</strong> </p><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_str <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入算术题："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>input_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;Python&lt;/code&gt; 中可以使用以下两个方法验证：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;strong&gt;标识符&lt;/stron</summary>
      
    
    
    
    <category term="后端" scheme="https://shaoshaossm.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://shaoshaossm.github.io/2021-11-02-python-ji-chu.html"/>
    <id>https://shaoshaossm.github.io/2021-11-02-python-ji-chu.html</id>
    <published>2021-11-02T03:46:15.000Z</published>
    <updated>2021-11-07T08:50:23.773Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python基础"><a href="#Python基础" class="headerlink" title="Python基础"></a>Python基础</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 向控制台输出内容结束后,不换行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment"># 自带换行</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">%</span>d 以十进制输出数字<span class="token operator">%</span>x 以十六进制输出数字 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li><code>List</code>（列表） 用 <code>[]</code> 定义，<strong>数据</strong> 之间使用 <code>,</code> 分隔 也叫作数组<strong>数组</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"wangwu"</span><span class="token punctuation">]</span><span class="token comment"># API</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> name_list<span class="token punctuation">.</span>name_list<span class="token punctuation">.</span>append   name_list<span class="token punctuation">.</span>count    name_list<span class="token punctuation">.</span>insert   name_list<span class="token punctuation">.</span>reversename_list<span class="token punctuation">.</span>clear    name_list<span class="token punctuation">.</span>extend   name_list<span class="token punctuation">.</span>pop      name_list<span class="token punctuation">.</span>sortname_list<span class="token punctuation">.</span>copy     name_list<span class="token punctuation">.</span>index    name_list<span class="token punctuation">.</span>remove <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>序号</th><th>分类</th><th>关键字 / 函数 / 方法</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>增加</td><td>列表.insert(索引, 数据)</td><td>在指定位置插入数据</td></tr><tr><td></td><td></td><td>列表.append(数据)</td><td>在末尾追加数据</td></tr><tr><td></td><td></td><td>列表.extend(列表2)</td><td>将列表2 的数据追加到列表</td></tr><tr><td>2</td><td>修改</td><td>列表[索引] = 数据</td><td>修改指定索引的数据</td></tr><tr><td>3</td><td>删除</td><td>del 列表[索引]</td><td>删除指定索引的数据</td></tr><tr><td></td><td></td><td>列表.remove[数据]</td><td>删除第一个出现的指定数据</td></tr><tr><td></td><td></td><td>列表.pop</td><td>删除末尾数据</td></tr><tr><td></td><td></td><td>列表.pop(索引)</td><td>删除指定索引数据</td></tr><tr><td></td><td></td><td>列表.clear</td><td>清空列表</td></tr><tr><td>4</td><td>统计</td><td>len(列表)</td><td>列表长度</td></tr><tr><td></td><td></td><td>列表.count(数据)</td><td>数据在列表中出现的次数</td></tr><tr><td>5</td><td>排序</td><td>列表.sort()</td><td>升序排序</td></tr><tr><td></td><td></td><td>列表.sort(reverse=True)</td><td>降序排序</td></tr><tr><td></td><td></td><td>列表.reverse()</td><td>逆序、反转</td></tr></tbody></table><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><ul><li><code>Tuple</code>（元组）与列表类似，不同之处在于元组的 <strong>元素不能修改</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">1.75</span><span class="token punctuation">)</span>info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 元组中 只包含一个元素时，需要在元素后面添加逗号</span>info_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>  <span class="token comment"># 不加,类型为int</span><span class="token comment"># API</span>info<span class="token punctuation">.</span>count  info<span class="token punctuation">.</span>index<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元组和列表之间的转换"><a href="#元组和列表之间的转换" class="headerlink" title="元组和列表之间的转换"></a>元组和列表之间的转换</h4><ul><li>使用 <code>list</code> 函数可以把元组转换成列表</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span><span class="token punctuation">(</span>元组<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 <code>tuple</code> 函数可以把列表转换成元组</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span><span class="token punctuation">(</span>列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用<code>len</code>函数可以计算元组、列表等长度</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">len</span><span class="token punctuation">(</span>列表<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li><code>dictionary</code>（字典） 是 <strong>除列表以外</strong> <code>Python</code> 之中 <strong>最灵活</strong> 的数据类型</li><li>和列表的区别<ul><li><strong>列表</strong> 是 <strong>有序</strong> 的对象集合</li><li><strong>字典</strong> 是 <strong>无序</strong> 的对象集合</li></ul></li><li>字典使用 <strong>键值对</strong> 存储数据，键值对之间使用 <code>,</code> 分隔<ul><li><strong>键</strong> <code>key</code> 是索引</li><li><strong>值</strong> <code>value</code> 是数据</li><li><strong>键</strong> 和 <strong>值</strong> 之间使用 <code>:</code> 分隔</li><li><strong>键必须是唯一的</strong></li><li><strong>值</strong> 可以取任何数据类型，但 <strong>键</strong> 只能使用 <strong>字符串</strong>、<strong>数字</strong>或 <strong>元组</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># API</span>In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> xiaoming<span class="token punctuation">.</span>xiaoming<span class="token punctuation">.</span>clear       xiaoming<span class="token punctuation">.</span>items       xiaoming<span class="token punctuation">.</span>setdefaultxiaoming<span class="token punctuation">.</span>copy        xiaoming<span class="token punctuation">.</span>keys        xiaoming<span class="token punctuation">.</span>updatexiaoming<span class="token punctuation">.</span>fromkeys    xiaoming<span class="token punctuation">.</span>pop         xiaoming<span class="token punctuation">.</span>valuesxiaoming<span class="token punctuation">.</span>get         xiaoming<span class="token punctuation">.</span>popitem    <span class="token comment"># 字典的遍历</span><span class="token keyword">for</span> k <span class="token keyword">in</span> xiaoming<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s - %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> xiaoming<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字典与列表组合使用</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">card <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小胡"</span><span class="token punctuation">,</span>         <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小张"</span><span class="token punctuation">,</span>         <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token keyword">for</span> ren <span class="token keyword">in</span> card<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ren<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li>在 Python 中可以使用 <strong>一对双引号</strong> <code>&quot;</code> 或者 <strong>一对单引号</strong> <code>&#39;</code> 定义一个字符串<ul><li>虽然可以使用 <code>\&quot;</code> 或者 <code>\&#39;</code> 做字符串的转义，但是在实际开发中：<ul><li>如果字符串内部需要使用 <code>&quot;</code>，可以使用 <code>&#39;</code> 定义字符串</li><li>如果字符串内部需要使用 <code>&#39;</code>，可以使用 <code>&quot;</code> 定义字符串</li></ul></li></ul></li></ul><h4 id="1-判断类型-9"><a href="#1-判断类型-9" class="headerlink" title="1) 判断类型 - 9"></a>1) 判断类型 - 9</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.isspace()</td><td>如果 string 中只包含空格，则返回 True</td></tr><tr><td>string.isalnum()</td><td>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True</td></tr><tr><td>string.isalpha()</td><td>如果 string 至少有一个字符并且所有字符都是字母则返回 True</td></tr><tr><td>string.isdecimal()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code></td></tr><tr><td>string.isdigit()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>、<code>⑴</code>、<code>\u00b2</code></td></tr><tr><td>string.isnumeric()</td><td>如果 string 只包含数字则返回 True，<code>全角数字</code>，<code>汉字数字</code></td></tr><tr><td>string.istitle()</td><td>如果 string 是标题化的(每个单词的首字母大写)则返回 True</td></tr><tr><td>string.islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True</td></tr><tr><td>string.isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True</td></tr></tbody></table><h4 id="2-查找和替换-7"><a href="#2-查找和替换-7" class="headerlink" title="2) 查找和替换 - 7"></a>2) 查找和替换 - 7</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.startswith(str)</td><td>检查字符串是否是以 str 开头，是则返回 True</td></tr><tr><td>string.endswith(str)</td><td>检查字符串是否是以 str 结束，是则返回 True</td></tr><tr><td>string.find(str, start=0, end=len(string))</td><td>检测 str 是否包含在 string 中，如果 start 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回 <code>-1</code></td></tr><tr><td>string.rfind(str, start=0, end=len(string))</td><td>类似于 find()，不过是从右边开始查找</td></tr><tr><td>string.index(str, start=0, end=len(string))</td><td>跟 find() 方法类似，不过如果 str 不在 string 会报错</td></tr><tr><td>string.rindex(str, start=0, end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td>string.replace(old_str, new_str, num=string.count(old))</td><td>把 string 中的 old_str 替换成 new_str，如果 num 指定，则替换不超过 num 次</td></tr></tbody></table><h4 id="3-大小写转换-5"><a href="#3-大小写转换-5" class="headerlink" title="3) 大小写转换 - 5"></a>3) 大小写转换 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.capitalize()</td><td>把字符串的第一个字符大写</td></tr><tr><td>string.title()</td><td>把字符串的每个单词首字母大写</td></tr><tr><td>string.lower()</td><td>转换 string 中所有大写字符为小写</td></tr><tr><td>string.upper()</td><td>转换 string 中的小写字母为大写</td></tr><tr><td>string.swapcase()</td><td>翻转 string 中的大小写</td></tr></tbody></table><h4 id="4-文本对齐-3"><a href="#4-文本对齐-3" class="headerlink" title="4) 文本对齐 - 3"></a>4) 文本对齐 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.ljust(width)</td><td>返回一个原字符串左对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.rjust(width)</td><td>返回一个原字符串右对齐，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>string.center(width)</td><td>返回一个原字符串居中，并使用空格填充至长度 width 的新字符串</td></tr></tbody></table><h4 id="5-去除空白字符-3"><a href="#5-去除空白字符-3" class="headerlink" title="5) 去除空白字符 - 3"></a>5) 去除空白字符 - 3</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.lstrip()</td><td>截掉 string 左边（开始）的空白字符</td></tr><tr><td>string.rstrip()</td><td>截掉 string 右边（末尾）的空白字符</td></tr><tr><td>string.strip()</td><td>截掉 string 左右两边的空白字符</td></tr></tbody></table><h4 id="6-拆分和连接-5"><a href="#6-拆分和连接-5" class="headerlink" title="6) 拆分和连接 - 5"></a>6) 拆分和连接 - 5</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>string.partition(str)</td><td>把字符串 string 分成一个 3 元素的元组 (str前面, str, str后面)</td></tr><tr><td>string.rpartition(str)</td><td>类似于 partition() 方法，不过是从右边开始查找</td></tr><tr><td>string.split(str=””, num)</td><td>以 str 为分隔符拆分 string，如果 num 有指定值，则仅分隔 num + 1 个子字符串，str 默认包含 ‘\r’, ‘\t’, ‘\n’ 和空格</td></tr><tr><td>string.splitlines()</td><td>按照行(‘\r’, ‘\n’, ‘\r\n’)分隔，返回一个包含各行作为元素的列表</td></tr><tr><td>string.join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素（的字符串表示）合并为一个新的字符串</td></tr></tbody></table><h3 id="字符串的切片"><a href="#字符串的切片" class="headerlink" title="字符串的切片"></a>字符串的切片</h3><ul><li><strong>切片</strong> 方法适用于 <strong>字符串</strong>、<strong>列表</strong>、<strong>元组</strong><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li><li>字符串[开始索引:结束索引:步长]</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/00cdef8c52504340befc0849cbed95df.png" alt="字符串索引"></p><p><strong>注意</strong>：</p><ol><li>指定的区间属于 <strong>左闭右开</strong> 型 <code>[开始索引,  结束索引)</code> =&gt; <code>开始索引 &gt;= 范围 &lt; 结束索引</code><ul><li>从 <code>起始</code> 位开始，到 <strong><code>结束</code>位的前一位</strong> 结束（<strong>不包含结束位本身</strong>)</li></ul></li><li>从头开始，<strong>开始索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>到末尾结束，<strong>结束索引</strong> <strong>数字可以省略，冒号不能省略</strong></li><li>步长默认为 <code>1</code>，如果连续切片，<strong>数字和冒号都可以省略</strong></li></ol><h4 id="索引的顺序和倒序"><a href="#索引的顺序和倒序" class="headerlink" title="索引的顺序和倒序"></a>索引的顺序和倒序</h4><ul><li>在 Python 中不仅支持 <strong>顺序索引</strong>，同时还支持 <strong>倒序索引</strong></li><li>所谓倒序索引就是 <strong>从右向左</strong> 计算索引<ul><li>最右边的索引值是 <strong>-1</strong>，依次递减</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num_str <span class="token operator">=</span> <span class="token string">"0123456789"</span><span class="token comment"># 1. 截取从 2 ~ 5 位置 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 2. 截取从 2 ~ `末尾` 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 3. 截取从 `开始` ~ 5 位置 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 4. 截取完整的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 5. 从开始位置，每隔一个字符截取字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 6. 从索引 1 开始，每隔一个取一个</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 倒序切片</span><span class="token comment"># -1 表示倒数第一个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 7. 截取从 2 ~ `末尾 - 1` 的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 8. 截取字符串末尾两个字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 9. 字符串的逆序（面试题）</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="公共方法"><a href="#公共方法" class="headerlink" title="公共方法"></a>公共方法</h3><p>Python 包含了以下内置函数：</p><table><thead><tr><th>函数</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>len(item)</td><td>计算容器中元素个数</td><td></td></tr><tr><td>del(item)</td><td>删除变量</td><td>del 有两种方式</td></tr><tr><td>max(item)</td><td>返回容器中元素最大值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>min(item)</td><td>返回容器中元素最小值</td><td>如果是字典，只针对 key 比较</td></tr><tr><td>cmp(item1, item2)</td><td>比较两个值，-1 小于/0 相等/1 大于</td><td>Python 3.x 取消了 cmp 函数</td></tr><tr><td>id(item)</td><td>变量中保存数据所在的 <strong>内存地址</strong></td><td></td></tr><tr><td>hash(item)</td><td>经hash算法后返回一个整数</td><td>接收一个不可变类型作为参数</td></tr><tr><td>global(item)</td><td>在函数中修改全局变量</td><td></td></tr></tbody></table><p><strong>注意</strong></p><ul><li><p><strong>字符串</strong> 比较符合以下规则： “0” &lt; “A” &lt; “a”</p></li><li><p>如果变量已经被定义，当给一个变量赋值的时候，本质上是 <strong>修改了数据的引用</strong></p><ul><li>变量 <strong>不再</strong> 对之前的数据引用</li><li>变量 <strong>改为</strong> 对新赋值的数据引用</li></ul></li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><table><thead><tr><th align="center">描述</th><th>Python 表达式</th><th>结果</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="center">切片</td><td>“0123456789”[::-2]</td><td>“97531”</td><td>字符串、列表、元组</td></tr></tbody></table><ul><li><strong>切片</strong> 使用 <strong>索引值</strong> 来限定范围，从一个大的 <strong>字符串</strong> 中 <strong>切出</strong> 小的 <strong>字符串</strong></li><li><strong>列表</strong> 和 <strong>元组</strong> 都是 <strong>有序</strong> 的集合，都能够 <strong>通过索引值</strong> 获取到对应的数据</li><li><strong>字典</strong> 是一个 <strong>无序</strong> 的集合，是使用 <strong>键值对</strong> 保存数据</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th align="center">运算符</th><th>Python 表达式</th><th>结果</th><th>描述</th><th>支持的数据类型</th></tr></thead><tbody><tr><td align="center">+</td><td>[1, 2] + [3, 4]</td><td>[1, 2, 3, 4]</td><td>合并</td><td>字符串、列表、元组</td></tr><tr><td align="center">*</td><td>[“Hi!”] * 4</td><td>[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>重复</td><td>字符串、列表、元组</td></tr><tr><td align="center">in</td><td>3 in (1, 2, 3)</td><td>True</td><td>元素是否存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td>4 not in (1, 2, 3)</td><td>True</td><td>元素是否不存在</td><td>字符串、列表、元组、字典</td></tr><tr><td align="center">&gt; &gt;= == &lt; &lt;=</td><td>(1, 2, 3) &lt; (2, 2, 3)</td><td>True</td><td>元素比较</td><td>字符串、列表、元组</td></tr></tbody></table><p><strong>注意</strong></p><ul><li><code>in</code> 在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></li><li><code>in</code> 和 <code>not in</code> 被称为 <strong>成员运算符</strong></li></ul><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><p>成员运算符用于 <strong>测试</strong> 序列中是否包含指定的 <strong>成员</strong></p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False</td><td><code>3 in (1, 2, 3)</code> 返回 <code>True</code></td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False</td><td><code>3 not in (1, 2, 3)</code> 返回 <code>False</code></td></tr></tbody></table><p>注意：在对 <strong>字典</strong> 操作时，判断的是 <strong>字典的键</strong></p><h3 id="完整的-for-循环语法"><a href="#完整的-for-循环语法" class="headerlink" title="完整的 for 循环语法"></a>完整的 for 循环语法</h3><ul><li>在 <code>Python</code> 中完整的 <code>for 循环</code> 的语法如下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 集合<span class="token punctuation">:</span>        循环体代码<span class="token keyword">else</span><span class="token punctuation">:</span>    没有通过 <span class="token keyword">break</span> 退出循环，循环结束后，会执行的代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>在 <strong>迭代遍历</strong> 嵌套的数据类型时，例如 <strong>一个列表包含了多个字典</strong></li><li>需求：要判断 某一个字典中 是否存在 指定的 值 <ul><li>如果 <strong>存在</strong>，提示并且退出循环</li><li>如果 <strong>不存在</strong>，在 <strong>循环整体结束</strong> 后，希望 <strong>得到一个统一的提示</strong></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">students <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"阿土"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.7</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">75.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小美"</span><span class="token punctuation">,</span>     <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>     <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>     <span class="token string">"height"</span><span class="token punctuation">:</span> <span class="token number">1.6</span><span class="token punctuation">,</span>     <span class="token string">"weight"</span><span class="token punctuation">:</span> <span class="token number">45.0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span>find_name <span class="token operator">=</span> <span class="token string">"阿土"</span><span class="token keyword">for</span> stu_dict <span class="token keyword">in</span> students<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>stu_dict<span class="token punctuation">)</span>    <span class="token comment"># 判断当前遍历的字典中姓名是否为find_name</span>    <span class="token keyword">if</span> stu_dict<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">==</span> find_name<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"找到了"</span><span class="token punctuation">)</span>        <span class="token comment"># 如果已经找到，直接退出循环，就不需要再对后续的数据进行比较</span>        <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有找到"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"循环结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多值参数（知道）"><a href="#多值参数（知道）" class="headerlink" title="多值参数（知道）"></a>多值参数（知道）</h3><ul><li>有时可能需要 <strong>一个函数</strong> 能够处理的参数 <strong>个数</strong> 是不确定的，这个时候，就可以使用 <strong>多值参数</strong></li><li><code>python</code> 中有 <strong>两种</strong> 多值参数：<ul><li>参数名前增加 <strong>一个</strong> <code>*</code> 可以接收 <strong>元组</strong></li><li>参数名前增加 <strong>两个</strong> <code>*</code> 可以接收 <strong>字典</strong></li></ul></li><li>一般在给多值参数命名时，<strong>习惯</strong>使用以下两个名字<ul><li><code>*args</code> —— 存放 <strong>元组</strong> 参数，前面有一个 <code>*</code></li><li><code>**kwargs</code> —— 存放 <strong>字典</strong> 参数，前面有两个 <code>*</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span> gender<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="元组和字典的拆包（知道）"><a href="#元组和字典的拆包（知道）" class="headerlink" title="元组和字典的拆包（知道）"></a>元组和字典的拆包（知道）</h4><ul><li>在调用带有多值参数的函数时，如果希望：<ul><li>将一个 <strong>元组变量</strong>，直接传递给 <code>args</code></li><li>将一个 <strong>字典变量</strong>，直接传递给 <code>kwargs</code></li></ul></li><li>就可以使用 <strong>拆包</strong>，简化参数的传递，<strong>拆包</strong> 的方式是：<ul><li>在 <strong>元组变量前</strong>，增加 <strong>一个</strong> <code>*</code></li><li>在 <strong>字典变量前</strong>，增加 <strong>两个</strong> <code>*</code></li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token comment"># 需要将一个元组变量/字典变量传递给函数对应的参数</span>gl_nums <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>gl_xiaoming <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token comment"># 会把 num_tuple 和 xiaoming 作为元组传递个 args</span><span class="token comment"># demo(gl_nums, gl_xiaoming)</span>demo<span class="token punctuation">(</span><span class="token operator">*</span>gl_nums<span class="token punctuation">,</span> <span class="token operator">**</span>gl_xiaoming<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li>返回值如果有多个并需要单独处理变量的话,可以使用多个变量来接收</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">measure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a11 <span class="token operator">=</span> <span class="token number">1031</span>    a22 <span class="token operator">=</span> <span class="token number">11</span>    <span class="token keyword">return</span> a11<span class="token punctuation">,</span> a22s<span class="token punctuation">,</span> d <span class="token operator">=</span> measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>measure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>交换数字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">6</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token comment"># 解法一</span>c <span class="token operator">=</span> aa <span class="token operator">=</span> b b <span class="token operator">=</span> c<span class="token comment"># 解法二</span>a <span class="token operator">=</span> a <span class="token operator">+</span> bb <span class="token operator">=</span> a <span class="token operator">-</span> ba <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token comment"># 解法三 元祖()可以省略</span>a <span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span>a <span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果传递的参数是<strong>不可变类型</strong>,在函数内部,使用<font color="red">方法</font>修改了数据的内容,<strong>不会影响到外部的数据</strong></li><li>如果传递的参数是<strong>可变类型</strong>,在函数内部,使用<font color="red">方法</font>修改了数据的内容,<strong>同样会影响到外部的数据</strong></li><li>列表变量使用 += 不会做相加在赋值的操作,本质上是调用列表的 extend 方法</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span>num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>demo<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token comment"># 运行结果</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在参数后使用<strong>赋值语句</strong>,可以<strong>指定参数的缺省值</strong></li><li>必须保证带有默认值的缺省参数在参数列表的<strong>末尾</strong></li><li>在调用函数时,如果有<strong>多个缺省参数,需要指定参数名=</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num_list <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="多值参数案例-——-计算任意多个数字的和"><a href="#多值参数案例-——-计算任意多个数字的和" class="headerlink" title="多值参数案例 —— 计算任意多个数字的和"></a>多值参数案例 —— 计算任意多个数字的和</h4><ol><li>定义一个函数 <code>sum_numbers</code>，可以接收的 <strong>任意多个整数</strong></li><li>功能要求：将传递的 <strong>所有数字累加</strong> 并且返回累加结果</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token comment"># 遍历 args 元组顺序求和</span><span class="token keyword">for</span> n <span class="token keyword">in</span> args<span class="token punctuation">:</span>    num <span class="token operator">+=</span> n<span class="token keyword">return</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>sum_numbers<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用关键字"><a href="#常用关键字" class="headerlink" title="常用关键字"></a>常用关键字</h3><ul><li><code>pass</code> 表示一个占位符，能够保证程序代码结构正确，一般用在开发程序时，不希望立刻编写分支内部的代码 </li></ul><h3 id="LINUX-上的特殊符号"><a href="#LINUX-上的特殊符号" class="headerlink" title="LINUX 上的特殊符号"></a>LINUX 上的特殊符号</h3><ul><li><code>Shebang</code> 符号(<code>#!</code>)</li></ul><ul><li><code>#!</code>这个符号叫做 <code>Shebang</code> 或者 <code>Sha-bang</code></li><li><code>Shebang</code> 通常在 <code>Unix</code> 系统脚本的中 <strong>第一行开头</strong> 使用</li><li>指明 <strong>执行这个脚本文件</strong> 的 <strong>解释程序</strong></li></ul><h4 id="使用-Shebang-的步骤"><a href="#使用-Shebang-的步骤" class="headerlink" title="使用 Shebang 的步骤"></a>使用 Shebang 的步骤</h4><ul><li><ol><li>使用 <code>which</code> 查询 <code>python3</code> 解释器所在路径</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">which</span> python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="2"><li>修改要运行的 <strong>主 python 文件</strong>，在第一行增加以下内容(文件路径)</li></ol></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3  </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="3"><li>修改 <strong>主 python 文件</strong> 的文件权限，增加执行权限</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> +x cards_main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><ol start="4"><li>在需要时执行程序即可</li></ol></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./cards_main.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>函数的文档注释 Ctrl + Q 在函数定义的下方写注释</li></ul><p><img src="https://img-blog.csdnimg.cn/c9e6eaad37c940ffa5fa6d4a47a78e3d.png" alt="Ctrl+Q"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Python基础&quot;&gt;&lt;a href=&quot;#Python基础&quot; class=&quot;headerlink&quot; title=&quot;Python基础&quot;&gt;&lt;/a&gt;Python基础&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-python&quot; data-la</summary>
      
    
    
    
    <category term="后端" scheme="https://shaoshaossm.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Python" scheme="https://shaoshaossm.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令汇总</title>
    <link href="https://shaoshaossm.github.io/2021-10-21-linux-chang-yong-ming-ling-hui-zong.html"/>
    <id>https://shaoshaossm.github.io/2021-10-21-linux-chang-yong-ming-ling-hui-zong.html</id>
    <published>2021-10-21T02:30:47.000Z</published>
    <updated>2021-11-02T08:40:34.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-文件和目录"><a href="#1-文件和目录" class="headerlink" title="1.文件和目录"></a>1.文件和目录</h3><ul><li>cd命令，用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对路径。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home     进入 <span class="token string">'/ home'</span> 目录<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>            返回上一级目录<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>         返回上两级目录<span class="token builtin class-name">cd</span>               进入个人的主目录<span class="token builtin class-name">cd</span> ~user1    进入个人的主目录<span class="token builtin class-name">cd</span> -             返回上次所在的目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pwd命令，显示工作路径</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root ~<span class="token punctuation">]</span><span class="token comment"># pwd</span>/root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ls命令，查看文件与目录的命令，list之意</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> 查看目录中的文件<span class="token function">ls</span> -l 显示文件和目录的详细资料<span class="token function">ls</span> -a 列出全部文件，包含隐藏文件<span class="token function">ls</span> -R 连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来<span class="token function">ls</span> <span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span> 显示包含数字的文件名和目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>cp命令，用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-a ：将文件的特性一起复制-p ：连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份-i ：若目标文件已经存在时，在覆盖时会先询问操作的进行-r ：递归持续复制，用于目录的复制行为 //经常使用递归复制-u ：目标文件与源文件有差异时才会复制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>mv命令，用于移动文件、目录或更名，move之意</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖-i ：若目标文件已经存在，就会询问是否覆盖-u ：若目标文件已经存在，且比目标文件新，才会更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>rm命令，用于删除文件或目录，remove之意</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-f ：就是force的意思，忽略不存在的文件，不会出现警告消息-i ：互动模式，在删除前会询问用户是否操作-r ：递归删除，最常用于目录删除，它是一个非常危险的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2.查看文件内容"></a>2.查看文件内容</h3><ul><li>cat命令，用于查看文本文件的内容，后接要查看的文件名，通常可用管道与more和less一起使用</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> file1 从第一个字节开始正向查看文件的内容<span class="token function">tac</span> file1 从最后一行开始反向查看一个文件的内容<span class="token function">cat</span> -n file1 标示文件的行数<span class="token function">more</span> file1 查看一个长文件的内容<span class="token function">head</span> -n <span class="token number">2</span> file1 查看一个文件的前两行<span class="token function">tail</span> -n <span class="token number">2</span> file1 查看一个文件的最后两行<span class="token function">tail</span> -n +1000 file1  从1000行开始显示，显示1000行以后的cat filename <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token number">3000</span> <span class="token operator">|</span> <span class="token function">tail</span> -n +1000  显示1000行到3000行cat filename <span class="token operator">|</span> <span class="token function">tail</span> -n +3000 <span class="token operator">|</span> <span class="token function">head</span> -n <span class="token number">1000</span>  从第3000行开始，显示1000<span class="token punctuation">(</span>即显示3000~3999行<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-文件搜索"><a href="#3-文件搜索" class="headerlink" title="3.文件搜索"></a>3.文件搜索</h3><ul><li>find命令，用来查找系统的</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -name file1 从 <span class="token string">'/'</span> 开始进入根文件系统搜索文件和目录<span class="token function">find</span> / -user user1 搜索属于用户 <span class="token string">'user1'</span> 的文件和目录<span class="token function">find</span> /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件<span class="token function">find</span> /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件<span class="token function">whereis</span> <span class="token function">halt</span> 显示一个二进制文件、源码或man的位置<span class="token function">which</span> <span class="token function">halt</span> 显示一个二进制文件或可执行文件的完整路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除大于50M的文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /var/mail/ -size +50M -exec <span class="token function">rm</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> ＼<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#4-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="4.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>4.文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h3><ul><li>chmod命令，改变文件/文件夹权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> -lh 显示权限<span class="token function">chmod</span> ugo+rwx directory1 设置目录的所有人<span class="token punctuation">(</span>u<span class="token punctuation">)</span>、群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>以及其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>以读（r，4 ）、写<span class="token punctuation">(</span>w，2<span class="token punctuation">)</span>和执行<span class="token punctuation">(</span>x，1<span class="token punctuation">)</span>的权限 <span class="token function">chmod</span> go-rwx directory1  删除群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>与其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>对目录的读写执行权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>chown命令，改变文件的所有者</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> user1 file1 改变一个文件的所有人属性<span class="token function">chown</span> -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性<span class="token function">chown</span> user1:group1 file1 改变一个文件的所有人和群组属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>11.chgrp命令，改变文件所属用户组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chgrp</span> group1 file1 改变文件的群组<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-文本处理"><a href="#5-文本处理" class="headerlink" title="5.文本处理"></a>5.文本处理</h3><ol><li>grep命令，分析一行的信息，若当中有我们所需要的信息，就将该行显示出来，该命令通常与管道命令一起使用，用于对一些命令的输出进行筛选加工等等</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> Aug /var/log/messages  在文件 <span class="token string">'/var/log/messages'</span>中查找关键词<span class="token string">"Aug"</span><span class="token function">grep</span> ^Aug /var/log/messages 在文件 <span class="token string">'/var/log/messages'</span>中查找以<span class="token string">"Aug"</span>开始的词汇<span class="token function">grep</span> <span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>  /var/log/messages 选择 <span class="token string">'/var/log/messages'</span> 文件中所有包含数字的行<span class="token function">grep</span> Aug -R /var/log/* 在目录 <span class="token string">'/var/log'</span> 及随后的目录中搜索字符串<span class="token string">"Aug"</span><span class="token function">sed</span> <span class="token string">'s/stringa1/stringa2/g'</span> example.txt 将example.txt文件中的 <span class="token string">"string1"</span> 替换成 <span class="token string">"string2"</span><span class="token function">sed</span> <span class="token string">'/^$/d'</span> example.txt 从example.txt文件中删除所有空白行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>paste命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">paste</span> file1 file2 合并两个文件或两栏的内容<span class="token function">paste</span> -d <span class="token string">'+'</span> file1 file2 合并两个文件或两栏的内容，中间用<span class="token string">"+"</span>区分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>sort命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sort</span> file1 file2 排序两个文件的内容<span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> 取出两个文件的并集<span class="token punctuation">(</span>重复的行只保留一份<span class="token punctuation">)</span><span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -u 删除交集，留下其他的行<span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -d 取出两个文件的交集<span class="token punctuation">(</span>只留下同时存在于两个文件中的文件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>comm命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">comm</span> -1 file1 file2 比较两个文件的内容只删除<span class="token string">'file1'</span> 所包含的内容 <span class="token function">comm</span> -2 file1 file2 比较两个文件的内容只删除<span class="token string">'file2'</span> 所包含的内容 <span class="token function">comm</span> -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-打包和压缩文件"><a href="#6-打包和压缩文件" class="headerlink" title="6.打包和压缩文件"></a>6.打包和压缩文件</h3><ol><li>tar命令，对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-c ：新建打包文件-t ：查看打包文件的内容含有哪些文件名-x ：解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中-j ：通过bzip2的支持进行压缩/解压缩-z ：通过gzip的支持进行压缩/解压缩-v ：在压缩/解压缩过程中，将正在处理的文件名显示出来-f filename ：filename为要处理的文件-C <span class="token function">dir</span> ：指定压缩/解压缩的目录dir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称 查询：tar -jtv -f filename.tar.bz2 解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bunzip2 file1.bz2 解压一个叫做 <span class="token string">'file1.bz2'</span>的文件<span class="token function">bzip2</span> file1 压缩一个叫做 <span class="token string">'file1'</span> 的文件gunzip file1.gz 解压一个叫做 <span class="token string">'file1.gz'</span>的文件<span class="token function">gzip</span> file1 压缩一个叫做 <span class="token string">'file1'</span>的文件<span class="token function">gzip</span> -9 file1 最大程度压缩<span class="token function">rar</span> a file1.rar test_file 创建一个叫做 <span class="token string">'file1.rar'</span> 的包<span class="token function">rar</span> a file1.rar file1 file2 dir1 同时压缩 <span class="token string">'file1'</span>, <span class="token string">'file2'</span> 以及目录 <span class="token string">'dir1'</span> <span class="token function">rar</span> x file1.rar 解压rar包<span class="token function">zip</span> file1.zip file1 创建一个zip格式的压缩包<span class="token function">unzip</span> file1.zip 解压一个zip格式压缩包<span class="token function">zip</span> -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-系统和关机（关机、重启和登出）"><a href="#7-系统和关机（关机、重启和登出）" class="headerlink" title="7.系统和关机（关机、重启和登出）"></a>7.系统和关机（关机、重启和登出）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">shutdown</span> -h now 关闭系统<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>init <span class="token number">0</span> 关闭系统<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>telinit <span class="token number">0</span> 关闭系统<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">shutdown</span> -h hours:minutes <span class="token operator">&amp;</span> 按预定时间关闭系统<span class="token function">shutdown</span> -c 取消按预定时间关闭系统<span class="token function">shutdown</span> -r now 重启<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">reboot</span> 重启<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token builtin class-name">logout</span> 注销<span class="token function">time</span> 测算一个命令（即程序）的执行时间 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-进程相关的命令"><a href="#8-进程相关的命令" class="headerlink" title="8.进程相关的命令"></a>8.进程相关的命令</h3><ul><li><p>jps命令，显示当前系统的java进程情况，及其id号</p></li><li><p>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。</p></li><li><p>ps命令，用于将某个时间点的进程运行情况选取下来并输出，process之意</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-A ：所有的进程均显示出来-a ：不与terminal有关的所有进程-u ：有效用户的相关进程-x ：一般与a参数一起使用，可列出较完整的信息-l ：较长，较详细地将PID的信息列出<span class="token function">ps</span> aux <span class="token comment"># 查看系统所有的进程数据</span><span class="token function">ps</span> ax <span class="token comment"># 查看不与terminal有关的所有进程</span><span class="token function">ps</span> -lA <span class="token comment"># 查看系统所有的进程数据</span><span class="token function">ps</span> axjf <span class="token comment"># 查看连同一部分进程树状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>kill命令,用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用</li></ul><p> 命令格式 : kill [命令参数] [进程id]</p><p>命令参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称-a  当处理当前进程时，不限制命令名和进程号的对应关系-p  指定kill 命令只打印相关进程的进程号，而不发送任何信号-s  指定发送信号-u  指定用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例1：列出所有信号名称 命令：kill -l 输出： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l</span> <span class="token number">1</span><span class="token punctuation">)</span> SIGHUP       <span class="token number">2</span><span class="token punctuation">)</span> SIGINT       <span class="token number">3</span><span class="token punctuation">)</span> SIGQUIT      <span class="token number">4</span><span class="token punctuation">)</span> SIGILL <span class="token number">5</span><span class="token punctuation">)</span> SIGTRAP      <span class="token number">6</span><span class="token punctuation">)</span> SIGABRT      <span class="token number">7</span><span class="token punctuation">)</span> SIGBUS       <span class="token number">8</span><span class="token punctuation">)</span> SIGFPE <span class="token number">9</span><span class="token punctuation">)</span> SIGKILL     <span class="token number">10</span><span class="token punctuation">)</span> SIGUSR1     <span class="token number">11</span><span class="token punctuation">)</span> SIGSEGV     <span class="token number">12</span><span class="token punctuation">)</span> SIGUSR2<span class="token number">13</span><span class="token punctuation">)</span> SIGPIPE     <span class="token number">14</span><span class="token punctuation">)</span> SIGALRM     <span class="token number">15</span><span class="token punctuation">)</span> SIGTERM     <span class="token number">16</span><span class="token punctuation">)</span> SIGSTKFLT<span class="token number">17</span><span class="token punctuation">)</span> SIGCHLD     <span class="token number">18</span><span class="token punctuation">)</span> SIGCONT     <span class="token number">19</span><span class="token punctuation">)</span> SIGSTOP     <span class="token number">20</span><span class="token punctuation">)</span> SIGTSTP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明:  只有第9种信号(SIGKILL)才可以无条件终止进程，其他信号进程都有权利忽略。  下面是常用的信号： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HUP    <span class="token number">1</span>    终端断线INT     <span class="token number">2</span>    中断（同 Ctrl + C）QUIT    <span class="token number">3</span>    退出（同 Ctrl + <span class="token punctuation">\</span>）<span class="token environment constant">TERM</span>   <span class="token number">15</span>    终止KILL    <span class="token number">9</span>    强制终止CONT   <span class="token number">18</span>    继续（与STOP相反， fg/bg命令）STOP    <span class="token number">19</span>    暂停（同 Ctrl + Z）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例2：得到指定信号的数值 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l KILL</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l SIGKILL</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l TERM</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill -l SIGTERM</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例3：先用ps查找进程，然后用kill杀掉 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令：kill <span class="token number">3268</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep vim </span>root      <span class="token number">3268</span>  <span class="token number">2884</span>  <span class="token number">0</span> <span class="token number">16</span>:21 pts/1    00:00:00 <span class="token function">vim</span> install.logroot      <span class="token number">3370</span>  <span class="token number">2822</span>  <span class="token number">0</span> <span class="token number">16</span>:21 pts/0    00:00:00 <span class="token function">grep</span> <span class="token function">vim</span><span class="token punctuation">[</span>root@localhost test6<span class="token punctuation">]</span><span class="token comment"># kill 3268 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 实例4：彻底杀死进程 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令：kill –9 <span class="token number">3268</span>   // -9 强制杀掉进程<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>killall命令，向一个命令启动的进程发送一个信号，用于杀死指定名字的进程 命令格式 : killall[命令参数] [进程名]</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">命令参数：-Z 只杀死拥有scontext 的进程-e 要求匹配进程名称-I 忽略小写-g 杀死进程组而不是进程-i 交互模式，杀死进程前先询问用户-l 列出所有的已知信号名称-q 不输出警告信息-s 发送指定的信号-v 报告信号是否成功发送-w 等待进程死亡--help 显示帮助信息--version 显示版本显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>示例:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>：杀死所有同名进程    <span class="token function">killall</span> nginx    <span class="token function">killall</span> -9 <span class="token function">bash</span><span class="token number">2</span>.向进程发送指定信号    <span class="token function">killall</span> -<span class="token environment constant">TERM</span> ngixn  或者  <span class="token function">killall</span> -KILL nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>top命令，是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</li></ul><p> 如何杀死进程： </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">（1）图形化界面的方式（2）kill -9 pid  （-9表示强制关闭）（3）killall -9 程序的名字（4）pkill 程序的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 查看进程端口号:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -tunlp<span class="token operator">|</span><span class="token function">grep</span> 端口号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h3><p>echo 文字内容</p><ul><li>echo 会在终端中显示参数指定的文字,通常会和重定向联合使用</li></ul><p>重定向 &gt; 和 &gt;&gt;</p><ul><li>Linux中允许将命令执行结果 重定向到一个文件</li><li>将文本应显示在终端上的内容 删除/追加 到指定文件中<ul><li>/  &gt;  表示输出,会覆盖文件中的内容</li><li>/  &gt; &gt; 表示追加,会将内容追加到已有文件的末尾</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># / 转义一下</span><span class="token builtin class-name">echo</span> Hello Python <span class="token operator">>></span>a<span class="token builtin class-name">echo</span> Hello Python <span class="token operator">>></span>a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>管道 |</p><ul><li>Linux中允许将一个命令的输出,可以通过管道作为另一个命令的输入</li><li>常用的管道命令有<ul><li>more : 分屏显示内容</li><li>gerp : 在命令执行结果的基础上查询指定的文本</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># a 显示隐藏文件夹</span><span class="token function">ls</span> -lha ~ <span class="token operator">|</span> <span class="token function">more</span><span class="token function">ls</span> -lha ~ <span class="token operator">|</span> <span class="token function">grep</span> Vim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-文件和目录&quot;&gt;&lt;a href=&quot;#1-文件和目录&quot; class=&quot;headerlink&quot; title=&quot;1.文件和目录&quot;&gt;&lt;/a&gt;1.文件和目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;cd命令，用于切换当前目录，它的参数是要切换到的目录的路径，可以是绝对路径，也可以是相对</summary>
      
    
    
    
    <category term="系统运维" scheme="https://shaoshaossm.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://shaoshaossm.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>docker学习应用</title>
    <link href="https://shaoshaossm.github.io/2021-10-18-docker-xue-xi-ying-yong.html"/>
    <id>https://shaoshaossm.github.io/2021-10-18-docker-xue-xi-ying-yong.html</id>
    <published>2021-10-18T14:47:54.000Z</published>
    <updated>2021-10-20T08:52:26.733Z</updated>
    
    <content type="html"><![CDATA[<ul><li>docker启动命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使容器处于后台运行状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ctrl p + q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看内存状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看本地浏览器运行地址页面</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> localhost:8080<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker启动容器命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ( --name ssm ) 给容器命名</span><span class="token comment"># -d 后台运行 -p 宿主机端口</span>docker run -it centos <span class="token punctuation">(</span> --name ssm <span class="token punctuation">)</span>/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>docker启动特定容器命令并进入容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker start c65e128bc615docker attach c65e128bc615<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>docker查看进程</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker设置容器和宿主机文件共享</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v /myDataVolume:/dataVolumeContainer centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker 检查容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker inspect c65e128bc615<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker 启动tomcat (指定映射端口号)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -p <span class="token number">7777</span>:8080 tomcat02:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker 关闭正在运行中的容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stop c65e128bc615 docker <span class="token function">kill</span> c65e128bc615 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>docker 批量关闭正在运行中的容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token function">rm</span> -f <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -qa<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>下载镜像源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>建立一个ssm/centos数据卷 Dockerfile</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 建立一个文件 Dockerfile </span><span class="token function">mkdir</span> Docker <span class="token comment"># 编写内容</span>FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"/dataVolumeContainer1"</span>,<span class="token string">"/dataVolumeContainer2"</span><span class="token punctuation">]</span>CMD <span class="token builtin class-name">echo</span> <span class="token string">"finished,------------successful"</span>CMD /bin/bash<span class="token comment"># 构建容器</span>docker build -f /mydocker/Dockerfile -t ssm/centos <span class="token builtin class-name">.</span><span class="token comment"># 运行容器</span>docker run -it ssm/centos <span class="token comment"># 进入 dataVolumeContainer1 并创建文件container01.txt</span><span class="token builtin class-name">cd</span> dataVolumeContainer1<span class="token function">touch</span> container01.txt<span class="token comment"># 另开一个终端</span>docker <span class="token function">ps</span> docker inspect 容器id找到dataVolumeContainer1: /var/lib/docker/volumes/60f8b0b4209fc59b92c2e36f40b7f1c5ccea3032344bcf9a17951ce08cacd423/_data<span class="token comment"># 另开一个终端,查看共享文件,并创建container02.txt 测试dataVolumecontainer1中是否有container02.txt</span><span class="token builtin class-name">cd</span> /var/lib/docker/volumes/60f8b0b4209fc59b92c2e36f40b7f1c5ccea3032344bcf9a17951ce08cacd423/_data<span class="token function">touch</span> container02.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>容器数据卷传递共享</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 dc01容器</span>docker run -it --name dc01 ssm/centos<span class="token comment"># 创建 dc01_add.txt</span><span class="token builtin class-name">cd</span> dataVolumeContainer2<span class="token function">touch</span> dc01_add.txt<span class="token comment"># 复制dc01 到 dc02</span>docker run -it --name dc02 --volumes-from dc01 ssm/centos<span class="token function">touch</span> dc02_add.txt<span class="token comment"># 复制dc01 到 dc02</span>docker run -it --name dc03 --volumes-from dc01 ssm/centos<span class="token function">touch</span> dc03_add.txt<span class="token comment"># 回到dc01验证即可</span>docker attach dc01<span class="token comment"># 即使删除dc01,dc02和dc03也数据共享</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/fb9c63317cd34ad092dd093eb789166b.png" alt="容器数据卷间传递共享"></p><ul><li>docker运行mysql</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一步 运行mysql容器</span>docker run -p <span class="token number">12345</span>:3306 --name mysql02 -v /ssmuse/mysql/conf:/etc/mysql/conf.d -v /ssmuse/mysql/logs:/logs -v /ssmuse/mysql/data:/var/lib/mysql -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -d mysql:8.0.17<span class="token comment"># 第二部  进入容器</span>docker <span class="token function">ps</span>docker <span class="token builtin class-name">exec</span> -it feec4e661b7d /bin/bash<span class="token comment"># 第三步 进入mysql</span>mysql -uroot -p123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据备份</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker <span class="token builtin class-name">exec</span> mysql 容器id <span class="token function">sh</span> -c <span class="token string">'exec mysqldump --all-databases -uroot -p"123456" '</span> <span class="token operator">></span> /ssmuse/all-databases.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>docker运行redis</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第一步 运行redis容器</span>docker run -p <span class="token number">6379</span>:6379 -v /ssmuse/redis/data:/data -v /ssmuse/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly <span class="token function">yes</span><span class="token comment"># 第二部  进入容器</span>docker <span class="token function">ps</span>docker <span class="token builtin class-name">exec</span> -it 600e8af12e4a redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>docker 运行redis</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name elasticsearch02 -p <span class="token number">9200</span>:9200 -p <span class="token number">9300</span>:9300 -e <span class="token string">"discovery.type=single-node"</span> -e <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms64m -Xmx512m"</span> elasticsearch:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>登录docker</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 本地登录</span>docker login -u19858165529<span class="token comment"># 阿里云登录</span>docker login --username<span class="token operator">=</span>秋水墨色染ssm registry.cn-hangzhou.aliyuncs.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>发布镜像到dockerHub</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改镜像标签 (必须为dockerHub用户名+...)</span>docker tag ssm/centos <span class="token number">19858165529</span>/centos:1.0<span class="token comment"># 发布即可</span>docker push <span class="token number">19858165529</span>/centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>发布镜像到阿里云 ( [ ]  一定要去掉 )</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker login --username<span class="token operator">=</span>秋水墨色染ssm registry.cn-hangzhou.aliyuncs.com$ docker tag <span class="token punctuation">[</span>ImageId<span class="token punctuation">]</span> registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span>$ docker push registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:<span class="token punctuation">[</span>镜像版本号<span class="token punctuation">]</span><span class="token comment"># 本地删除发布的镜像并从阿里云上下载回来</span>docker rmi -f registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:1.1.0docker pull  registry.cn-hangzhou.aliyuncs.com/shaoshaossm/ssm:1.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>springboot微服务打包Docker</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将springboot jar 包和Dockerfile 传到 centos 上 </span><span class="token comment"># Dockerfile内容如下:</span>FROM java:8    ADD *.jar app.jar    EXPOSE <span class="token number">8081</span>    ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"app.jar"</span><span class="token punctuation">]</span>    <span class="token comment"># 构建镜像</span>docker  build -t ssm777 <span class="token builtin class-name">.</span><span class="token comment"># 启动镜像</span>docker run -d --name demo -p <span class="token number">8081</span>:8081 ssm777<span class="token comment"># 运行测试</span><span class="token function">curl</span> localhost:8081/say<span class="token comment"># 运行结果</span>Hello SpringBoot<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>若出现这种报错,需删除此容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 错误信息</span>Error response from daemon: Conflict. The container name <span class="token string">"/mysql"</span> is already <span class="token keyword">in</span> use by container <span class="token string">"19ee5d825ff210ace68011ba7ab6bd6c1cc634e75f0a25a9934c720eab9367a1"</span><span class="token builtin class-name">.</span> You have to remove <span class="token punctuation">(</span>or <span class="token function">rename</span><span class="token punctuation">)</span> that container to be able to reuse that name.<span class="token comment"># 解决办法</span>docker <span class="token function">rm</span> -f 19ee5d825ff210ace68011ba7ab6bd6c1cc634e75f0a25a9934c720eab9367a1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输入docker命令报错</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>原因可能是上一次没有正常退出docker，所以docker没有正常启动，在相应的/var/run/路径下找不到docker进程。解决办法:</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> docker restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;docker启动命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;systemctl start dock</summary>
      
    
    
    
    <category term="后端" scheme="https://shaoshaossm.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="docker" scheme="https://shaoshaossm.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构和算法(七)</title>
    <link href="https://shaoshaossm.github.io/2021-10-15-java-shu-ju-jie-gou-he-suan-fa-qi.html"/>
    <id>https://shaoshaossm.github.io/2021-10-15-java-shu-ju-jie-gou-he-suan-fa-qi.html</id>
    <published>2021-10-15T10:25:06.000Z</published>
    <updated>2021-12-08T09:03:17.991Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-二分查找-非递归"><a href="#1-二分查找-非递归" class="headerlink" title="1. 二分查找(非递归)"></a>1. 二分查找(非递归)</h3><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearchNoRecursion</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">413</span><span class="token punctuation">,</span> <span class="token number">880</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 二分查找非递归实现     *     * @param arr    待查找的数组 arr升序排序     * @param target 目标数     * @return 返回对应下标 否则返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分治算法-汉诺塔"><a href="#2-分治算法-汉诺塔" class="headerlink" title="2. 分治算法(汉诺塔)"></a>2. 分治算法(汉诺塔)</h3><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HanoiTower</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">hanoiTower</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hanoiTower</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">char</span> a<span class="token punctuation">,</span><span class="token keyword">char</span> b<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1个盘从 "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//n>=2 把所有的盘总是看成两个盘:1.下边的一个盘,上面的所有盘</span>            <span class="token comment">//1.最上面的所有盘A->B</span>            <span class="token function">hanoiTower</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.最下面的盘A->C</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第"</span><span class="token operator">+</span>num<span class="token operator">+</span><span class="token string">"个盘从 "</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"->"</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.把B塔的所有盘从B->C 移动过程使用到a塔</span>            <span class="token function">hanoiTower</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-动态规划算法"><a href="#3-动态规划算法" class="headerlink" title="3. 动态规划算法"></a>3. 动态规划算法</h3><ul><li><p>动态规划(<strong>Dynamic Programming</strong>)算法的核心思想是：将大问题划分为小问题进行解决，从而一步步获取最优解的处理算法</p></li><li><p>动态规划算法与分治算法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。</p></li><li><p>与分治法不同的是，<strong>适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。</strong> ( 即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解 )</p></li><li><p>动态规划可以通过<strong>填表的方式</strong>来逐步推进，得到最优解.</p></li></ul><table><thead><tr><th><strong>物品</strong></th><th><strong>重量</strong></th><th><strong>价格</strong></th></tr></thead><tbody><tr><td>吉他(G)</td><td>1</td><td>1500</td></tr><tr><td>音响(S)</td><td>4</td><td>3000</td></tr><tr><td>电脑(L)</td><td>3</td><td>2000</td></tr></tbody></table><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KnapsackProblem</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> w <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> val<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">//最大价值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//商品放入情况</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//初始化第一行和列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//动态规划处理</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//公式</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// v[i][j] = Math.max(v[i-1][j],val[i-1]+v[i-1][j-w[i-1]]);</span>                    <span class="token comment">// 记录商品放入情况</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> path<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//行的最大下标</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//列的最大下标</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//从最后遍历</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个商品放入到背包\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                j<span class="token operator">-=</span>w<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 剩余的容量</span>            <span class="token punctuation">&#125;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">0</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">3000</span> <span class="token number">0</span> <span class="token number">1500</span> <span class="token number">1500</span> <span class="token number">2000</span> <span class="token number">3500</span> 第<span class="token number">3</span>个商品放入到背包第<span class="token number">1</span>个商品放入到背包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-KMP算法"><a href="#4-KMP算法" class="headerlink" title="4. KMP算法"></a>4. KMP算法</h3><ul><li><p>KMP是一个解决模式串在文本串是否出现过，如果出现过，最早出现的位置的经典算法</p></li><li><p>Knuth-Morris-Pratt <strong>字符串查找算法</strong>，简称为 “KMP算法”，常用于在一个文本串S内查找一个模式串P 的出现位置，这个算法由Donald Knuth、Vaughan Pratt、James H. Morris三人于1977年联合发表，故取这3人的姓氏命名此算法.</p></li><li><p>KMP方法算法就利用之前判断过信息，通过一个next数组，保存模式串中前后最长公共子序列的长度，每次回溯时，通过next数组找到，前面匹配过的位置，省去了大量的计算时间</p></li><li><p>参考资料：<a href="https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html">https://www.cnblogs.com/ZuoAndFutureGirl/p/9028287.html</a> </p></li></ul><p>字符串匹配问题</p><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViolenceMatch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"少司啊命你少少打司命少司命"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"少司命"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">violenceMatch</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//暴力算法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">violenceMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s1 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s1Len <span class="token operator">=</span> s1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> s2Len <span class="token operator">=</span> s2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s1Len <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s2Len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> s2Len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//KMP算法</span>    <span class="token comment">/**     * @param str1 源字符串     * @param str2 子串     * @param next 子串对应的部分匹配表     * @return 返回匹配的位置 否则返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">kmpSearch</span><span class="token punctuation">(</span><span class="token class-name">String</span> str1<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//找到了</span>                <span class="token keyword">return</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取到一个字符串的部分匹配值表</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">kmpNext</span><span class="token punctuation">(</span><span class="token class-name">String</span> dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>dest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dest<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//kmp算法核心点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j <span class="token operator">=</span> next<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> dest<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-贪心算法"><a href="#5-贪心算法" class="headerlink" title="5. 贪心算法"></a>5. 贪心算法</h3><ul><li>贪婪算法(贪心算法)是指在对问题进行求解时，在每一步选择中都采取最好或者最优(即最有利)的选择，从而希望能够导致结果是最好或者最优的算法</li><li>贪婪算法所得到的结果<strong>不一定是最优的结果</strong>(有时候会是最优解)，但是都是相对近似(接近)最优解的结果</li></ul><p><font color="blue">应用场景-集合覆盖问题</font></p><p>假设存在下面需要付费的广播台，以及广播台信号可以覆盖的地区。 <strong>如何选择最少的广播台</strong>，让所有的地区都可以接收到信号?</p><table><thead><tr><th>广播台</th><th>覆盖地区</th></tr></thead><tbody><tr><td>K1</td><td>“北京”, “上海”, “天津”</td></tr><tr><td>K2</td><td>“广州”, “北京”, “深圳”</td></tr><tr><td>K3</td><td>“成都”, “上海”, “杭州”</td></tr><tr><td>K4</td><td>“上海”, “天津”</td></tr><tr><td>K5</td><td>“杭州”, “大连”</td></tr></tbody></table><ul><li><p>遍历所有的广播电台, 找到一个覆盖了最多<strong>未覆盖的地区</strong>的电台(此电台可能包含一些已覆盖的地区，但没有关系） </p></li><li><p>将这个电台加入到一个集合中(比如ArrayList), 想办法把该电台覆盖的地区在下次比较时去掉。</p></li><li><p>重复第1步直到覆盖了全部的地区</p></li></ul><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GreedyAlgorithm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HashSet</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> broadcasts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HashSet</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet4<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> hashSet5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大连"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashSet5<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> hashSet1<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k2"</span><span class="token punctuation">,</span> hashSet2<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k3"</span><span class="token punctuation">,</span> hashSet3<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k4"</span><span class="token punctuation">,</span> hashSet4<span class="token punctuation">)</span><span class="token punctuation">;</span>        broadcasts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k5"</span><span class="token punctuation">,</span> hashSet5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存放所有的地区</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"杭州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"天津"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"成都"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allArea<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"大连"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//存放选择的电台的集合</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> selects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//临时集合,存放遍历过程中的电台覆盖的地区和当前还没有覆盖的地区的交集</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> tempSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//保存在一次遍历中能够覆盖最大未覆盖的地区对应的电台key  如果maxKey不为null,则加入到selects</span>        <span class="token class-name">String</span> maxKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>allArea<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> broadcasts<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                tempSet<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> areas <span class="token operator">=</span> broadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                tempSet<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>areas<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//取tempSet 和 areas 的交集 赋给 tempSet</span>                tempSet<span class="token punctuation">.</span><span class="token function">retainAll</span><span class="token punctuation">(</span>allArea<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//如果当亲这个集合包含未覆盖地区的数量,比maxKey指向的集合地区还多,就需要重置maxKey  这里体现贪心算法的特点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tempSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>maxKey <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tempSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> broadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxKey<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    maxKey <span class="token operator">=</span> key<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                selects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>maxKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将maxkey指向的广播电台重allArea中去除掉</span>                allArea<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>broadcasts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>maxKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"得到的选择结果"</span> <span class="token operator">+</span> selects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-普利姆算法"><a href="#6-普利姆算法" class="headerlink" title="6. 普利姆算法"></a>6. 普利姆算法</h3><p><img src="https://img-blog.csdnimg.cn/46d7560c75e7486e9f29256cd4e472b1.png" alt="普利姆算法"></p><ul><li>普利姆(Prim)算法求<strong>最小生成树</strong>，也就是在包含n个顶点的连通图中，找出只有(n-1)条边包含所有n个顶点的连通子图，也就是所谓的<strong>极小连通子图</strong></li></ul><p><img src="https://img-blog.csdnimg.cn/d57522fe6b634cb199dd4dbb1034f3a1.png" alt="问题示意图"></p><p>各个村庄的距离用边线表示(权) ，比如 A – B 距离 5公里.问：如何修路保证各个村庄都能连通，并且总的修建公路总里程最短?</p><p>代码演示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>tenAlgorithms</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimAlgorithm</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> verxs <span class="token operator">=</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">MGraph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MGraph</span><span class="token punctuation">(</span>verxs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MinTree</span> minTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minTree<span class="token punctuation">.</span><span class="token function">createGraph</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span> verxs<span class="token punctuation">,</span> data<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        minTree<span class="token punctuation">.</span><span class="token function">showGraph</span><span class="token punctuation">(</span>graph<span class="token punctuation">)</span><span class="token punctuation">;</span>        minTree<span class="token punctuation">.</span><span class="token function">prim</span><span class="token punctuation">(</span>graph<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建最小生成树</span><span class="token keyword">class</span> <span class="token class-name">MinTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createGraph</span><span class="token punctuation">(</span><span class="token class-name">MGraph</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> verxs<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> verxs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> verxs<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                graph<span class="token punctuation">.</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示图的邻接矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGraph</span><span class="token punctuation">(</span><span class="token class-name">MGraph</span> graph<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> link <span class="token operator">:</span> graph<span class="token punctuation">.</span>weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//prim算法,生成最小生成树</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prim</span><span class="token punctuation">(</span><span class="token class-name">MGraph</span> graph<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// visited [] 标记顶点是否被访问</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>graph<span class="token punctuation">.</span>verxs<span class="token punctuation">]</span><span class="token punctuation">;</span>        visited<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// h1,h2记录两个顶点的下标</span>        <span class="token keyword">int</span> h1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h2 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minWeight <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>verxs<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>verxs<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//i 表示被访问过的结点</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> graph<span class="token punctuation">.</span>verxs<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//j 表示未被访问过的结点</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>visited<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>graph<span class="token punctuation">.</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>minWeight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token comment">//找到权值最小的边</span>                        minWeight <span class="token operator">=</span> graph<span class="token punctuation">.</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        h1<span class="token operator">=</span>i<span class="token punctuation">;</span>                        h2<span class="token operator">=</span>j<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"边&lt;"</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h1<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>graph<span class="token punctuation">.</span>data<span class="token punctuation">[</span>h2<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">">权值:"</span><span class="token operator">+</span>minWeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>h2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            minWeight<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MGraph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> verxs<span class="token punctuation">;</span> <span class="token comment">//图的节点的个数</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span> <span class="token comment">//存放节点的个数</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weight<span class="token punctuation">;</span> <span class="token comment">//存放边,就是我们的邻接矩阵</span>    <span class="token keyword">public</span> <span class="token class-name">MGraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> verxs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>verxs <span class="token operator">=</span> verxs<span class="token punctuation">;</span>        data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>verxs<span class="token punctuation">]</span><span class="token punctuation">;</span>        weight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>verxs<span class="token punctuation">]</span><span class="token punctuation">[</span>verxs<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">G</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">2</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">G</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">3</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">G</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">4</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">F</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">5</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">F</span><span class="token punctuation">,</span><span class="token class-name">D</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">4</span>边<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span>权值<span class="token operator">:</span><span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-克鲁斯卡尔算法"><a href="#7-克鲁斯卡尔算法" class="headerlink" title="7.克鲁斯卡尔算法"></a>7.克鲁斯卡尔算法</h3><ul><li>- </li></ul><p><img src="https://img-blog.csdnimg.cn/d9edfa644e64427b925b8ce8daffd039.png" alt="克鲁斯卡尔算法"></p><p>克鲁斯卡尔算法和普利姆算法的区别:</p><ul><li>普利姆：以点为核心，两点之间的权值从小到大找，找到的最小的连上即可。(<font color = red>不能断开</font>)</li><li>克鲁斯卡尔：以边为核心，边的权值从小到大找，即使两个线条不相连也先连上，然后最后再连在一起<font color = red>（可以断开）</font></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-二分查找-非递归&quot;&gt;&lt;a href=&quot;#1-二分查找-非递归&quot; class=&quot;headerlink&quot; title=&quot;1. 二分查找(非递归)&quot;&gt;&lt;/a&gt;1. 二分查找(非递归)&lt;/h3&gt;&lt;p&gt;代码实现&lt;/p&gt;
&lt;pre class=&quot;line-numbers </summary>
      
    
    
    
    <category term="数据结构和算法" scheme="https://shaoshaossm.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="java" scheme="https://shaoshaossm.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java数据结构和算法(六)</title>
    <link href="https://shaoshaossm.github.io/2021-10-13-java-shu-ju-jie-gou-he-suan-fa-liu.html"/>
    <id>https://shaoshaossm.github.io/2021-10-13-java-shu-ju-jie-gou-he-suan-fa-liu.html</id>
    <published>2021-10-13T08:05:32.000Z</published>
    <updated>2021-12-05T03:27:54.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图"><a href="#图" class="headerlink" title=" 图"></a><center> 图</h3><ul><li>图的表示方式有两种：二维数组表示（邻接矩阵）；链表表示（邻接表）。</li><li><font color = "red">邻接矩阵</font>是表示图形中顶点之间相邻关系的矩阵，对于n个顶点的图而言，矩阵是的row和col表示的是1….n个点。 </li></ul><p><img src="https://img-blog.csdnimg.cn/87a6a3bb7a864acd96c6f55042a36a64.png" alt="邻接矩阵"></p><ul><li><font color = "red">邻接表</font>的实现只关心存在的边，不关心不存在的边。因此没有空间浪费，邻接表由数组+链表组成  </li></ul><p><img src="https://img-blog.csdnimg.cn/ab8291a09fb94b5fa9a08681073a7358.png" alt="邻接表"></p><p><strong>图的遍历</strong> : 即是对结点的访问。  </p><p><strong>图的深度优先搜索(Depth First Search)</strong> 。</p><p><img src="https://img-blog.csdnimg.cn/c8da20681b0044d1911c78b1a2e04fbc.png" alt="深度优先遍历"></p><ul><li>深度优先遍历，从初始访问结点出发，初始访问结点可能有多个邻接结点，深度优先遍历的策略就是首先访问第一个邻接结点，然后再以这个被访问的邻接结点作为初始结点，访问它的第一个邻接结点， 可以这样理解：每次都在访问完<strong>当前结点</strong>后首先访问<strong>当前结点的第一个邻接结点</strong>。</li><li>我们可以看到，这样的访问策略是优先往纵向挖掘深入，而不是对一个结点的所有邻接结点进行横向访问。</li><li>显然，深度优先搜索是一个递归的过程</li></ul><p><strong>深度优先遍历算法步骤</strong></p><ul><li><p>访问初始结点v，并标记结点v为已访问。</p></li><li><p>查找结点v的第一个邻接结点w。</p></li><li><p>若w存在，则继续执行4，如果w不存在，则回到第1步，将从v的下一个结点继续。</p></li><li><p>若w未被访问，对w进行深度优先遍历递归（即把w当做另一个v，然后进行步骤123）。</p></li><li><p>查找结点v的w邻接结点的下一个邻接结点，转到步骤3。</p></li></ul><p><strong>图的广度优先搜索(Broad First Search)</strong> 。</p><p><img src="https://img-blog.csdnimg.cn/81a67600922a4054b118d6f7f3f9c968.png" alt="广度优先遍历"></p><ul><li>类似于一个分层搜索的过程，广度优先遍历需要使用一个队列以保持访问过的结点的顺序，以便按这个顺序来访问这些结点的邻接结点</li></ul><p><strong>广度优先遍历算法步骤</strong></p><ul><li><p>访问初始结点v并标记结点v为已访问。</p></li><li><p> 结点v入队列</p></li><li><p>当队列非空时，继续执行，否则算法结束。</p></li><li><p>出队列，取得队头结点u。</p></li><li><p>查找结点u的第一个邻接结点w。</p></li><li><p>若结点u的邻接结点w不存在，则转到步骤3；否则循环执行以下三个步骤：</p><ul><li>若结点w尚未被访问，则访问结点w并标记为已访问。 </li><li>结点w入队列 </li><li>查找结点u的继w邻接结点后的下一个邻接结点w，转到步骤6。</li></ul></li></ul><p>代码实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>graph</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token comment">/** * @author shaoshao * @version 1.0 * @date 2021/10/13 18:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Graph</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> vertexList<span class="token punctuation">;</span> <span class="token comment">//存储顶点的集合</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">;</span><span class="token comment">//存储图对应的邻接矩阵</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> numOfEdge<span class="token punctuation">;</span> <span class="token comment">// 表示边的数目</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">;</span> <span class="token comment">//</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token comment">//String[] vertexs = &#123;"A", "B", "C", "D", "E"&#125;;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vertexs <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string">"6"</span><span class="token punctuation">,</span> <span class="token string">"7"</span><span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Graph</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加顶点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> vertex <span class="token operator">:</span> vertexs        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            graph<span class="token punctuation">.</span><span class="token function">insertVertex</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//添加边</span>        <span class="token comment">/*graph.insertEdge(0, 1, 1); // A-B        graph.insertEdge(0, 2, 1); // A-C        graph.insertEdge(1, 2, 1);        graph.insertEdge(1, 3, 1);        graph.insertEdge(1, 4, 1);*/</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">showGarph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"深度优先遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"广度优先遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        graph<span class="token punctuation">.</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Graph</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        edges <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        vertexList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        numOfEdge <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到第一个邻接点的下标</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//根据前一个邻接结点的下标来获取下一个邻接结点</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> v2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//深度优先遍历 i 第一次是0</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//说明有</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果w结点已经被访问过</span>            w <span class="token operator">=</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对dfs重载 遍历所有的结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//广度优先遍历</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isVisited<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> u<span class="token punctuation">;</span> <span class="token comment">//队列头结点对应的下标</span>        <span class="token keyword">int</span> w<span class="token punctuation">;</span> <span class="token comment">//邻接点w</span>        <span class="token comment">//记录结点访问顺序</span>        <span class="token class-name">LinkedList</span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValByIndex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>linkedList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//取出队列头结点的下标</span>            u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> linkedList<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 得到第一个邻接结点的下标</span>            w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getValByIndex</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    isVisited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    linkedList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//以u为前驱结点,找w后面的下一个邻接结点</span>                w <span class="token operator">=</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//体现出广度优先</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//bfs重载 遍历所有的结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        isVisited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isVisited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">bfs</span><span class="token punctuation">(</span>isVisited<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回节点的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfVertex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回边的个数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumOfEdge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> numOfEdge<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回结点i(下标)对应的数据</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValByIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vertexList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回v1 v2的权值</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//插入节点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span><span class="token class-name">String</span> vertex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vertexList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//添加边</span>    <span class="token comment">/**     * @param v1     表示点的下标即是第几个顶点     * @param v2     第二个顶点对应的下标     * @param weight     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">,</span> <span class="token keyword">int</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        edges<span class="token punctuation">[</span>v1<span class="token punctuation">]</span><span class="token punctuation">[</span>v2<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        edges<span class="token punctuation">[</span>v2<span class="token punctuation">]</span><span class="token punctuation">[</span>v1<span class="token punctuation">]</span> <span class="token operator">=</span> weight<span class="token punctuation">;</span>        numOfEdge<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//显示图对应的矩阵</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showGarph</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> link <span class="token operator">:</span> edges        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>深度优先遍历<span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">8</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">6</span><span class="token operator">-></span><span class="token number">7</span><span class="token operator">-></span>广度优先遍历<span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token number">6</span><span class="token operator">-></span><span class="token number">7</span><span class="token operator">-></span><span class="token number">8</span><span class="token operator">-></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/0aad0e90501848ab902885bc5c938795.png" alt="图例示意图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;图&quot;&gt;&lt;a href=&quot;#图&quot; class=&quot;headerlink&quot; title=&quot; 图&quot;&gt;&lt;/a&gt;&lt;center&gt; 图&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;图的表示方式有两种：二维数组表示（邻接矩阵）；链表表示（邻接表）。&lt;/li&gt;
&lt;li&gt;&lt;font color = &quot;</summary>
      
    
    
    
    <category term="数据结构和算法" scheme="https://shaoshaossm.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="java" scheme="https://shaoshaossm.github.io/tags/java/"/>
    
  </entry>
  
</feed>
